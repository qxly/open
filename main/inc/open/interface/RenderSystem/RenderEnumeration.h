#ifndef RENDERSYSTEM_RENDERENUMERATION_ENUMERATION_H
#define RENDERSYSTEM_RENDERENUMERATION_ENUMERATION_H

#include <open/openDef.h>

namespace open
{
	enum RenderFlag : uint16
	{
		RENDER_VISIBLE = 1,

		RENDER_CAST_SHADOW = 1 << 2,

		RENDER_RECEIVES_SHADOW = 1 << 3
	};

	enum BufferBit : uint16
	{
		DEPTH_BUFFER_BIT = 0x0100,

		STENCIL_BUFFER_BIT = 0x0400,

		COLOR_BUFFER_BIT = 0x4000
	};

	enum DrawMode : uint8
	{
		POINT_LIST,
		LINE_LIST,
		LINE_STRIP,
		LINE_LOOP,
		TRIANGLE_LIST,
		TRIANGLE_STRIP,
		TRIANGLE_FAN,
	};

	enum CloneMode : uint8
	{
		SHALLOW_CLONE,
		DEEP_CLONE_ALL
	};

	enum DataType : uint16
	{
		DATATYPE_UNSIGNED_BYTE = 0x1401,
		DATATYPE_UNSIGNED_SHORT = 0x1403,
		DATATYPE_UNSIGNED_INT = 0x1405,
		DATATYPE_INT = 0x1404,
		DATATYPE_FLOAT = 0x1406,
	};

	enum PixelInternalFormat : uint16
	{
		PIXELINTERNALFORMAT_RGB = 0x1907,
		PIXELINTERNALFORMAT_RGBA,
		PIXELINTERNALFORMAT_RGBA32F = 0x8814,
		PIXELINTERNALFORMAT_RGB32F = 0x8815,
		PIXELINTERNALFORMAT_RGBA16F = 0x881A,
		PIXELINTERNALFORMAT_RGB16F = 0x881B,

		PIXELINTERNALFORMAT_R8 = 0x8229,
		PIXELINTERNALFORMAT_R16F = 0x822D,
		PIXELINTERNALFORMAT_R32F = 0x822E,

		PIXELINTERNALFORMAT_DEPTH_COMPONENT32 = 0x81A7,

		PIXELINTERNALFORMAT_DEPTH_STENCIL = 0x84F9
	};

	enum PixelFormat : uint16
	{
		PIXEFORMAT_DEPTH_COMPONENT = 0x1902,

		PIXEFORMAT_R = 0x1903,
		PIXEFORMAT_G = 0x1904,
		PIXEFORMAT_B = 0x1905,

		PIXEFORMAT_ALPHA = 0x1906,

		PIXEFORMAT_RGB = 0x1907,
		PIXEFORMAT_RGBA = 0x1908,

		PIXEFORMAT_BGR = 0x80E0,
		PIXEFORMAT_BGRA = 0x80E1,

		PIXEFORMAT_DEPTH_STENCIL = 0x84F9
	};

	enum BufferUseType : uint8
	{
		VERT_USE,
		INDEX_USE,
		INSTANCED_USE,
		UNIFORM_USE,
		TEXTURE_USE,
		PIXEL_PACK_USE,
		PIXEL_UNPACK_USE,
		OTHER_USE
	};

	enum StateMode : uint16
	{
		DEPTH_TEST = 2929,
		STENCIL_TEST = 2960,
		BLEND = 3042,
		CULL_FACE = 2884,
		LIGHT = 0x0B50,
	};

	enum ColorMask : uint8
	{
		COLORMASK_R = 1,
		COLORMASK_G = 1 << 2,
		COLORMASK_B = 1 << 3,
		COLORMASK_A = 1 << 4,
		COLORMASK_ALL = COLORMASK_R | COLORMASK_G | COLORMASK_B | COLORMASK_A
	};

	enum PolygonMode : uint16
	{
		POLYGONMODE_FILL = 0x1B02,
		POLYGONMODE_LINE = 0x1B01,
		POLYGONMODE_POINT = 0x1B00
	};

	enum CompareFunction : uint16
	{
		NEVER = 0x0200,
		LESS = 0x0201,
		EQUAL = 0x0202,
		LEQUAL = 0x0203,
		GREATER = 0x0204,
		NOTEQUAL = 0x0205,
		GEQUAL = 0x0206,
		ALWAYS = 0x0207
	};

	enum StencilOperation : uint16
	{
		STENCILOPERATION_ZERO = 0,
		STENCILOPERATION_KEEP = 0x1E00,
		STENCILOPERATION_REPLACE = 0x1E01,
		STENCILOPERATION_INCR = 0x1E02,
		STENCILOPERATION_DECR = 0x1E03,
		STENCILOPERATION_INVERT = 0x150A,
		STENCILOPERATION_INCR_WRAP = 0x8507,
		STENCILOPERATION_DECR_WRAP = 0x8508
	};

	enum Face : uint16
	{
		FACE_FRONT = 0x0404,
		FACE_BACK = 0x0405,
		FACE_FRONT_AND_BACK = 0x0408
	};

	enum FrontFace : uint16
	{
		FRONTFACE_CW = 0x0900,
		FRONTFACE_CCW = 0x0901
	};

	enum BlendEquation : uint16
	{
		BLENDEQUATION_ADD = 0x8006,
		BLENDEQUATION_MIN = 0x8007,
		BLENDEQUATION_MAX = 0x8008,
		BLENDEQUATION_SUBTRACT = 0x800A,
		BLENDEQUATION_REVERSE_SUBTRACT = 0x800B
	};

	enum BlendFun : uint16
	{
		BLENDFUN_ZERO = 0,
		BLENDFUN_ONE = 1,

		BLENDFUN_SRC_COLOR = 0x0300,
		BLENDFUN_ONE_MINUS_SRC_COLOR = 0x0301,
		BLENDFUN_SRC_ALPHA = 0x0302,
		BLENDFUN_ONE_MINUS_SRC_ALPHA = 0x0303,
		BLENDFUN_DST_ALPHA = 0x0304,
		BLENDFUN_ONE_MINUS_DST_ALPHA = 0x0305,
		BLENDFUN_DST_COLOR = 0x0306,
		BLENDFUN_ONE_MINUS_DST_COLOR = 0x0307,
		BLENDFUN_SRC_ALPHA_SATURATE = 0x0308
	};

	enum TextureWrapParameter : uint8
	{
		WRAP_S,
		WRAP_T,
		WRAP_R
	};

	enum TextureWrapMode : uint16
	{
		CLAMP = 0x2900,
		CLAMP_TO_EDGE = 0x812F,
		CLAMP_TO_BORDER = 0x812D,
		REPEAT = 0x2901,
		MIRROR = 0x8370
	};

	enum TextureFilterParameter : uint8
	{
		MIN_FILTER,
		MAG_FILTER
	};

	enum TextureFilterMode : uint16
	{
		LINEAR = 0x2601,
		LINEAR_MIPMAP_LINEAR = 0x2703,
		LINEAR_MIPMAP_NEAREST = 0x2701,
		NEAREST = 0x2600,
		NEAREST_MIPMAP_LINEAR = 0x2702,
		NEAREST_MIPMAP_NEAREST = 0x2700
	};

	enum FrameBufferAttachment : uint16
	{
		DEPTH_ATTACHMENT = 0x8D00,
		STENCIL_ATTACHMENT = 0x8D20,
		DEPTH_STENCIL_ATTACHMENT = 0x821A,

		COLOR_ATTACHMENT0 = 0x8CE0,
		COLOR_ATTACHMENT1 = COLOR_ATTACHMENT0 + 1,
		COLOR_ATTACHMENT2 = COLOR_ATTACHMENT0 + 2,
		COLOR_ATTACHMENT3 = COLOR_ATTACHMENT0 + 3,
		COLOR_ATTACHMENT4 = COLOR_ATTACHMENT0 + 4,
		COLOR_ATTACHMENT5 = COLOR_ATTACHMENT0 + 5,
		COLOR_ATTACHMENT6 = COLOR_ATTACHMENT0 + 6,
		COLOR_ATTACHMENT7 = COLOR_ATTACHMENT0 + 7,
		COLOR_ATTACHMENT8 = COLOR_ATTACHMENT0 + 8,
		COLOR_ATTACHMENT9 = COLOR_ATTACHMENT0 + 9,
		COLOR_ATTACHMENT10 = COLOR_ATTACHMENT0 + 10,
		COLOR_ATTACHMENT11 = COLOR_ATTACHMENT0 + 11,
		COLOR_ATTACHMENT12 = COLOR_ATTACHMENT0 + 12,
		COLOR_ATTACHMENT13 = COLOR_ATTACHMENT0 + 13,
		COLOR_ATTACHMENT14 = COLOR_ATTACHMENT0 + 14,
		COLOR_ATTACHMENT15 = COLOR_ATTACHMENT0 + 15
	};

	enum LightType : uint8
	{
		LIGHT_POINT,
		LIGHT_DIRECT,
		LIGHT_SPOT
	};

	enum ShaderType : uint16
	{
		FRAGMENT_SHADER = 0x8B30,
		VERTEX_SHADER = 0x8B31
	};
}

#endif