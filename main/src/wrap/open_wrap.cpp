/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.4
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BeginHandle swig_types[0]
#define SWIGTYPE_p_EndHandle swig_types[1]
#define SWIGTYPE_p_GenInstanceHandle swig_types[2]
#define SWIGTYPE_p_RMatrix swig_types[3]
#define SWIGTYPE_p_Real2 swig_types[4]
#define SWIGTYPE_p_Real3 swig_types[5]
#define SWIGTYPE_p_Real4 swig_types[6]
#define SWIGTYPE_p_UnifromHandle swig_types[7]
#define SWIGTYPE_p_bool swig_types[8]
#define SWIGTYPE_p_char swig_types[9]
#define SWIGTYPE_p_float swig_types[10]
#define SWIGTYPE_p_int swig_types[11]
#define SWIGTYPE_p_long_long swig_types[12]
#define SWIGTYPE_p_open__BoundingBoxT_double_t swig_types[13]
#define SWIGTYPE_p_open__BoundingBoxT_float_t swig_types[14]
#define SWIGTYPE_p_open__Config swig_types[15]
#define SWIGTYPE_p_open__DataType swig_types[16]
#define SWIGTYPE_p_open__FrameListener swig_types[17]
#define SWIGTYPE_p_open__GBuffer swig_types[18]
#define SWIGTYPE_p_open__ICamera swig_types[19]
#define SWIGTYPE_p_open__IDrawable swig_types[20]
#define SWIGTYPE_p_open__IDrawableBase swig_types[21]
#define SWIGTYPE_p_open__IEngine swig_types[22]
#define SWIGTYPE_p_open__IFrameBuffer swig_types[23]
#define SWIGTYPE_p_open__IGPUBuffer swig_types[24]
#define SWIGTYPE_p_open__IInputQueue swig_types[25]
#define SWIGTYPE_p_open__ILight swig_types[26]
#define SWIGTYPE_p_open__ILightManager swig_types[27]
#define SWIGTYPE_p_open__IMaterial swig_types[28]
#define SWIGTYPE_p_open__IMesh swig_types[29]
#define SWIGTYPE_p_open__IProgram swig_types[30]
#define SWIGTYPE_p_open__IRenderBuffer swig_types[31]
#define SWIGTYPE_p_open__IRenderEngine swig_types[32]
#define SWIGTYPE_p_open__IRenderPool swig_types[33]
#define SWIGTYPE_p_open__IRenderTarget swig_types[34]
#define SWIGTYPE_p_open__IRenderTechnique swig_types[35]
#define SWIGTYPE_p_open__IRenderWindow swig_types[36]
#define SWIGTYPE_p_open__IRenderWindowFactory swig_types[37]
#define SWIGTYPE_p_open__IShadowData swig_types[38]
#define SWIGTYPE_p_open__ISolidGeometry swig_types[39]
#define SWIGTYPE_p_open__ITexture swig_types[40]
#define SWIGTYPE_p_open__ITextureUnit swig_types[41]
#define SWIGTYPE_p_open__ITextureUnitSet swig_types[42]
#define SWIGTYPE_p_open__IVertexArrayObject swig_types[43]
#define SWIGTYPE_p_open__IVertexIndexObject swig_types[44]
#define SWIGTYPE_p_open__IVertexStream swig_types[45]
#define SWIGTYPE_p_open__IVertextArray swig_types[46]
#define SWIGTYPE_p_open__InputListener swig_types[47]
#define SWIGTYPE_p_open__MatrixT_double_t swig_types[48]
#define SWIGTYPE_p_open__MatrixT_float_t swig_types[49]
#define SWIGTYPE_p_open__OutFrag swig_types[50]
#define SWIGTYPE_p_open__PlaneT_double_t swig_types[51]
#define SWIGTYPE_p_open__PlaneT_float_t swig_types[52]
#define SWIGTYPE_p_open__PreInstancData swig_types[53]
#define SWIGTYPE_p_open__QuatT_double_t swig_types[54]
#define SWIGTYPE_p_open__QuatT_float_t swig_types[55]
#define SWIGTYPE_p_open__RayT_double_t swig_types[56]
#define SWIGTYPE_p_open__RayT_float_t swig_types[57]
#define SWIGTYPE_p_open__RenderScript swig_types[58]
#define SWIGTYPE_p_open__RenderStateSet swig_types[59]
#define SWIGTYPE_p_open__Shader swig_types[60]
#define SWIGTYPE_p_open__Uniform swig_types[61]
#define SWIGTYPE_p_open__UniformDetial swig_types[62]
#define SWIGTYPE_p_open__Value swig_types[63]
#define SWIGTYPE_p_open__Vec2T_double_t swig_types[64]
#define SWIGTYPE_p_open__Vec2T_float_t swig_types[65]
#define SWIGTYPE_p_open__Vec3T_double_t swig_types[66]
#define SWIGTYPE_p_open__Vec3T_float_t swig_types[67]
#define SWIGTYPE_p_open__Vec4T_double_t swig_types[68]
#define SWIGTYPE_p_open__Vec4T_float_t swig_types[69]
#define SWIGTYPE_p_open__WindowTraits swig_types[70]
#define SWIGTYPE_p_short swig_types[71]
#define SWIGTYPE_p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t swig_types[72]
#define SWIGTYPE_p_std__functionT_void_fvoid_pF_t swig_types[73]
#define SWIGTYPE_p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t swig_types[74]
#define SWIGTYPE_p_std__functionT_void_pfvoidF_t swig_types[75]
#define SWIGTYPE_p_unsigned_char swig_types[76]
#define SWIGTYPE_p_unsigned_int swig_types[77]
#define SWIGTYPE_p_unsigned_long_long swig_types[78]
#define SWIGTYPE_p_unsigned_short swig_types[79]
#define SWIGTYPE_p_value_type swig_types[80]
#define SWIGTYPE_p_void swig_types[81]
static swig_type_info *swig_types[83];
static swig_module_info swig_module = {swig_types, 82, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "open_lua"
#define SWIG_init      luaopen_open_lua
#define SWIG_init_user luaopen_open_lua_user

#define SWIG_LUACODE   luaopen_open_lua_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <open/openDef.h>
#include <open/Maths.h>
#include <RenderSystem/RenderEnumeration.h>
#include <RenderSystem/BufferInterface.h>
#include <RenderSystem/RenderStatesInterface.h>
#include <RenderSystem/RenderInterface.h>
#include <RenderSystem/RenderSystemFactoryInterface.h>

#include <Render/DrawableInterface.h>
#include <Render/MaterialInterface.h>
#include <Render/RenderFactoryInterface.h>

#include <Engine/EngineInterface.h>

#include "factory.h"

using namespace open;

SWIGINTERN void open_Vec2_Sl_float_Sg__setX(open::Vec2< float > *self,float x){ self->x() = x;}
SWIGINTERN void open_Vec2_Sl_float_Sg__setY(open::Vec2< float > *self,float y){ self->y() = y;}
SWIGINTERN void open_Vec3_Sl_float_Sg__setX(open::Vec3< float > *self,float x){ self->x() = x;}
SWIGINTERN void open_Vec3_Sl_float_Sg__setY(open::Vec3< float > *self,float y){ self->y() = y;}
SWIGINTERN void open_Vec3_Sl_float_Sg__setZ(open::Vec3< float > *self,float z){ self->z() = z;}
SWIGINTERN void open_Vec4_Sl_float_Sg__setX(open::Vec4< float > *self,float x){ self->x() = x;}
SWIGINTERN void open_Vec4_Sl_float_Sg__setY(open::Vec4< float > *self,float y){ self->y() = y;}
SWIGINTERN void open_Vec4_Sl_float_Sg__setZ(open::Vec4< float > *self,float z){ self->z() = z;}
SWIGINTERN void open_Vec4_Sl_float_Sg__setW(open::Vec4< float > *self,float w){ self->w() = w;}

SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_Vec2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec2< float >::Vec2",0,0)
  result = (open::Vec2< float > *)new open::Vec2< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float >::value_type arg1 ;
  open::Vec2< float >::value_type arg2 ;
  open::Vec2< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec2< float >::Vec2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::Vec2< float >::Vec2",1,"open::Vec2< float >::value_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec2< float >::Vec2",2,"open::Vec2< float >::value_type");
  arg1 = (open::Vec2< float >::value_type)lua_tonumber(L, 1);
  arg2 = (open::Vec2< float >::value_type)lua_tonumber(L, 2);
  result = (open::Vec2< float > *)new open::Vec2< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = 0 ;
  open::Vec2< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec2< float >::Vec2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("open::Vec2< float >::Vec2",1,"open::Vec2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("new_Vec2f",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (open::Vec2< float > *)new open::Vec2< float >((open::Vec2< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec2T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec2f(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec2f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec2T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec2f__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vec2f__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vec2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Vec2< float >::Vec2()\n"
    "    open::Vec2< float >::Vec2(open::Vec2< float >::value_type,open::Vec2< float >::value_type)\n"
    "    open::Vec2< float >::Vec2(open::Vec2< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec2f___eq(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec2< float >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::operator ==",1,"open::Vec2< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec2< float >::operator ==",2,"open::Vec2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___eq",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___eq",2,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (bool)((open::Vec2< float > const *)arg1)->operator ==((open::Vec2< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___lt(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec2< float >::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::operator <",1,"open::Vec2< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec2< float >::operator <",2,"open::Vec2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___lt",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___lt",2,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (bool)((open::Vec2< float > const *)arg1)->operator <((open::Vec2< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_set(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float >::value_type arg2 ;
  open::Vec2< float >::value_type arg3 ;
  
  SWIG_check_num_args("open::Vec2< float >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::set",1,"open::Vec2< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec2< float >::set",2,"open::Vec2< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Vec2< float >::set",3,"open::Vec2< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_set",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  arg2 = (open::Vec2< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Vec2< float >::value_type)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_x(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float >::value_type result;
  
  SWIG_check_num_args("open::Vec2< float >::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::x",1,"open::Vec2< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_x",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (open::Vec2< float >::value_type)((open::Vec2< float > const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_y(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float >::value_type result;
  
  SWIG_check_num_args("open::Vec2< float >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::y",1,"open::Vec2< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_y",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (open::Vec2< float >::value_type)((open::Vec2< float > const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_valid(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec2< float >::valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::valid",1,"open::Vec2< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_valid",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (bool)((open::Vec2< float > const *)arg1)->valid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_isNaN(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec2< float >::isNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::isNaN",1,"open::Vec2< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_isNaN",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (bool)((open::Vec2< float > const *)arg1)->isNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___unm(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float > result;
  
  SWIG_check_num_args("open::Vec2< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::operator -",1,"open::Vec2< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___unm",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = ((open::Vec2< float > const *)arg1)->operator -();
  {
    open::Vec2< float > * resultptr = new open::Vec2< float >((const open::Vec2< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec2T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___add(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float > *arg2 = 0 ;
  open::Vec2< float > result;
  
  SWIG_check_num_args("open::Vec2< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::operator +",1,"open::Vec2< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec2< float >::operator +",2,"open::Vec2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___add",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___add",2,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = ((open::Vec2< float > const *)arg1)->operator +((open::Vec2< float > const &)*arg2);
  {
    open::Vec2< float > * resultptr = new open::Vec2< float >((const open::Vec2< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec2T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___sub(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float > *arg2 = 0 ;
  open::Vec2< float > result;
  
  SWIG_check_num_args("open::Vec2< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::operator -",1,"open::Vec2< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec2< float >::operator -",2,"open::Vec2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___sub",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___sub",2,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = ((open::Vec2< float > const *)arg1)->operator -((open::Vec2< float > const &)*arg2);
  {
    open::Vec2< float > * resultptr = new open::Vec2< float >((const open::Vec2< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec2T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float > *arg2 = 0 ;
  open::Vec2< float >::value_type result;
  
  SWIG_check_num_args("open::Vec2< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::operator *",1,"open::Vec2< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec2< float >::operator *",2,"open::Vec2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___mul",2,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (open::Vec2< float >::value_type)((open::Vec2< float > const *)arg1)->operator *((open::Vec2< float > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float >::value_type arg2 ;
  open::Vec2< float > result;
  
  SWIG_check_num_args("open::Vec2< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::operator *",1,"open::Vec2< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec2< float >::operator *",2,"open::Vec2< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  arg2 = (open::Vec2< float >::value_type)lua_tonumber(L, 2);
  result = ((open::Vec2< float > const *)arg1)->operator *(arg2);
  {
    open::Vec2< float > * resultptr = new open::Vec2< float >((const open::Vec2< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec2T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec2T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec2T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec2f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec2T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec2f___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Vec2< float >::operator *(open::Vec2< float > const &) const\n"
    "    open::Vec2< float >::operator *(open::Vec2< float >::value_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vec2f___div(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float >::value_type arg2 ;
  open::Vec2< float > result;
  
  SWIG_check_num_args("open::Vec2< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::operator /",1,"open::Vec2< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec2< float >::operator /",2,"open::Vec2< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f___div",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  arg2 = (open::Vec2< float >::value_type)lua_tonumber(L, 2);
  result = ((open::Vec2< float > const *)arg1)->operator /(arg2);
  {
    open::Vec2< float > * resultptr = new open::Vec2< float >((const open::Vec2< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec2T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_length(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float >::value_type result;
  
  SWIG_check_num_args("open::Vec2< float >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::length",1,"open::Vec2< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_length",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (open::Vec2< float >::value_type)((open::Vec2< float > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_length2(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float >::value_type result;
  
  SWIG_check_num_args("open::Vec2< float >::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::length2",1,"open::Vec2< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_length2",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (open::Vec2< float >::value_type)((open::Vec2< float > const *)arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  open::Vec2< float >::value_type result;
  
  SWIG_check_num_args("open::Vec2< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::normalize",1,"open::Vec2< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_normalize",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  result = (open::Vec2< float >::value_type)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_setX(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec2< float >::setX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::setX",1,"open::Vec2< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec2< float >::setX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_setX",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec2_Sl_float_Sg__setX(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec2f_setY(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec2< float > *arg1 = (open::Vec2< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec2< float >::setY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec2< float >::setY",1,"open::Vec2< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec2< float >::setY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec2T_float_t,0))){
    SWIG_fail_ptr("Vec2f_setY",1,SWIGTYPE_p_open__Vec2T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec2_Sl_float_Sg__setY(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec2f(void *obj) {
open::Vec2< float > *arg1 = (open::Vec2< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vec2f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vec2f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vec2f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vec2f_methods[]= {
    { "__eq", _wrap_Vec2f___eq},
    { "__lt", _wrap_Vec2f___lt},
    { "set", _wrap_Vec2f_set},
    { "x", _wrap_Vec2f_x},
    { "y", _wrap_Vec2f_y},
    { "valid", _wrap_Vec2f_valid},
    { "isNaN", _wrap_Vec2f_isNaN},
    { "__unm", _wrap_Vec2f___unm},
    { "__add", _wrap_Vec2f___add},
    { "__sub", _wrap_Vec2f___sub},
    { "__mul", _wrap_Vec2f___mul},
    { "__div", _wrap_Vec2f___div},
    { "length", _wrap_Vec2f_length},
    { "length2", _wrap_Vec2f_length2},
    { "normalize", _wrap_Vec2f_normalize},
    { "setX", _wrap_Vec2f_setX},
    { "setY", _wrap_Vec2f_setY},
    {0,0}
};
static swig_lua_method swig_Vec2f_meta[] = {
    { "__eq", _wrap_Vec2f___eq},
    { "__lt", _wrap_Vec2f___lt},
    { "__unm", _wrap_Vec2f___unm},
    { "__add", _wrap_Vec2f___add},
    { "__sub", _wrap_Vec2f___sub},
    { "__mul", _wrap_Vec2f___mul},
    { "__div", _wrap_Vec2f___div},
    {0,0}
};

static swig_lua_attribute swig_Vec2f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vec2f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vec2f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vec2f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vec2f_Sf_SwigStatic = {
    "Vec2f",
    swig_Vec2f_Sf_SwigStatic_methods,
    swig_Vec2f_Sf_SwigStatic_attributes,
    swig_Vec2f_Sf_SwigStatic_constants,
    swig_Vec2f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vec2f_bases[] = {0};
static const char *swig_Vec2f_base_names[] = {0};
static swig_lua_class _wrap_class_Vec2f = { "Vec2f", "Vec2f", &SWIGTYPE_p_open__Vec2T_float_t,_proxy__wrap_new_Vec2f, swig_delete_Vec2f, swig_Vec2f_methods, swig_Vec2f_attributes, &swig_Vec2f_Sf_SwigStatic, swig_Vec2f_meta, swig_Vec2f_bases, swig_Vec2f_base_names };

static int _wrap_new_Vec3f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec3< float >::Vec3",0,0)
  result = (open::Vec3< float > *)new open::Vec3< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = 0 ;
  open::Vec3< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec3< float >::Vec3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("open::Vec3< float >::Vec3",1,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("new_Vec3f",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (open::Vec3< float > *)new open::Vec3< float >((open::Vec3< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float >::value_type arg1 ;
  open::Vec3< float >::value_type arg2 ;
  open::Vec3< float >::value_type arg3 ;
  open::Vec3< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec3< float >::Vec3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::Vec3< float >::Vec3",1,"open::Vec3< float >::value_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec3< float >::Vec3",2,"open::Vec3< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Vec3< float >::Vec3",3,"open::Vec3< float >::value_type");
  arg1 = (open::Vec3< float >::value_type)lua_tonumber(L, 1);
  arg2 = (open::Vec3< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Vec3< float >::value_type)lua_tonumber(L, 3);
  result = (open::Vec3< float > *)new open::Vec3< float >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec3f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec3f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec3f__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vec3f__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vec3f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Vec3< float >::Vec3()\n"
    "    open::Vec3< float >::Vec3(open::Vec3< float > const &)\n"
    "    open::Vec3< float >::Vec3(open::Vec3< float >::value_type,open::Vec3< float >::value_type,open::Vec3< float >::value_type)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f___eq(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec3< float >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::operator ==",1,"open::Vec3< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec3< float >::operator ==",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___eq",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___eq",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (bool)((open::Vec3< float > const *)arg1)->operator ==((open::Vec3< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___lt(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec3< float >::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::operator <",1,"open::Vec3< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec3< float >::operator <",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___lt",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___lt",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (bool)((open::Vec3< float > const *)arg1)->operator <((open::Vec3< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type arg2 ;
  open::Vec3< float >::value_type arg3 ;
  open::Vec3< float >::value_type arg4 ;
  
  SWIG_check_num_args("open::Vec3< float >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::set",1,"open::Vec3< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec3< float >::set",2,"open::Vec3< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Vec3< float >::set",3,"open::Vec3< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Vec3< float >::set",4,"open::Vec3< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_set",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  arg2 = (open::Vec3< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Vec3< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Vec3< float >::value_type)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  
  SWIG_check_num_args("open::Vec3< float >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::set",1,"open::Vec3< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec3< float >::set",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_set",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_set",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  (arg1)->set((open::Vec3< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_set(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f_set__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Vec3f_set__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Vec3< float >::set(open::Vec3< float >::value_type,open::Vec3< float >::value_type,open::Vec3< float >::value_type)\n"
    "    open::Vec3< float >::set(open::Vec3< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f_x(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type result;
  
  SWIG_check_num_args("open::Vec3< float >::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::x",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_x",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (open::Vec3< float >::value_type)((open::Vec3< float > const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_y(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type result;
  
  SWIG_check_num_args("open::Vec3< float >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::y",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_y",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (open::Vec3< float >::value_type)((open::Vec3< float > const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_z(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type result;
  
  SWIG_check_num_args("open::Vec3< float >::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::z",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_z",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (open::Vec3< float >::value_type)((open::Vec3< float > const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_valid(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec3< float >::valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::valid",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_valid",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (bool)((open::Vec3< float > const *)arg1)->valid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_isNaN(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec3< float >::isNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::isNaN",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_isNaN",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (bool)((open::Vec3< float > const *)arg1)->isNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___unm(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Vec3< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::operator -",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___unm",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = ((open::Vec3< float > const *)arg1)->operator -();
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___add(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Vec3< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::operator +",1,"open::Vec3< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec3< float >::operator +",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___add",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___add",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = ((open::Vec3< float > const *)arg1)->operator +((open::Vec3< float > const &)*arg2);
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___sub(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Vec3< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::operator -",1,"open::Vec3< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec3< float >::operator -",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___sub",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___sub",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = ((open::Vec3< float > const *)arg1)->operator -((open::Vec3< float > const &)*arg2);
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  open::Vec3< float >::value_type result;
  
  SWIG_check_num_args("open::Vec3< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::operator *",1,"open::Vec3< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec3< float >::operator *",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___mul",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (open::Vec3< float >::value_type)((open::Vec3< float > const *)arg1)->operator *((open::Vec3< float > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type arg2 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Vec3< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::operator *",1,"open::Vec3< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec3< float >::operator *",2,"open::Vec3< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  arg2 = (open::Vec3< float >::value_type)lua_tonumber(L, 2);
  result = ((open::Vec3< float > const *)arg1)->operator *(arg2);
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec3f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec3f___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Vec3< float >::operator *(open::Vec3< float > const &) const\n"
    "    open::Vec3< float >::operator *(open::Vec3< float >::value_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f___div(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type arg2 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Vec3< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::operator /",1,"open::Vec3< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec3< float >::operator /",2,"open::Vec3< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f___div",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  arg2 = (open::Vec3< float >::value_type)lua_tonumber(L, 2);
  result = ((open::Vec3< float > const *)arg1)->operator /(arg2);
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_length(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type result;
  
  SWIG_check_num_args("open::Vec3< float >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::length",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_length",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (open::Vec3< float >::value_type)((open::Vec3< float > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_length2(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type result;
  
  SWIG_check_num_args("open::Vec3< float >::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::length2",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_length2",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (open::Vec3< float >::value_type)((open::Vec3< float > const *)arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  open::Vec3< float >::value_type result;
  
  SWIG_check_num_args("open::Vec3< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::normalize",1,"open::Vec3< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_normalize",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (open::Vec3< float >::value_type)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_asBGR(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::Vec3< float >::asBGR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::asBGR",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_asBGR",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (uint32)((open::Vec3< float > const *)arg1)->asBGR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_asABGR(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::Vec3< float >::asABGR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::asABGR",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_asABGR",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (uint32)((open::Vec3< float > const *)arg1)->asABGR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_asRGB(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::Vec3< float >::asRGB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::asRGB",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_asRGB",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (uint32)((open::Vec3< float > const *)arg1)->asRGB();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_asRGBA(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::Vec3< float >::asRGBA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::asRGBA",1,"open::Vec3< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_asRGBA",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = (uint32)((open::Vec3< float > const *)arg1)->asRGBA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_fromRGB__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  uint32 arg1 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Vec3< float >::fromRGB",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::Vec3< float >::fromRGB",1,"uint32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (uint32)lua_tonumber(L, 1);
  result = open::Vec3< float >::SWIGTEMPLATEDISAMBIGUATOR fromRGB(arg1);
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_fromRGB__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::Vec3< float >::fromRGB",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("open::Vec3< float >::fromRGB",1,"open::Vec3< float > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec3< float >::fromRGB",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_fromRGB",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  open::Vec3< float >::SWIGTEMPLATEDISAMBIGUATOR fromRGB(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_fromRGB(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_Vec3f_fromRGB__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec3f_fromRGB__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_fromRGB'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Vec3< float >::fromRGB(uint32)\n"
    "    open::Vec3< float >::fromRGB(open::Vec3< float > &,uint32)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec3f_setX(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec3< float >::setX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::setX",1,"open::Vec3< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec3< float >::setX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_setX",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec3_Sl_float_Sg__setX(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_setY(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec3< float >::setY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::setY",1,"open::Vec3< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec3< float >::setY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_setY",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec3_Sl_float_Sg__setY(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec3f_setZ(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = (open::Vec3< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec3< float >::setZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec3< float >::setZ",1,"open::Vec3< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec3< float >::setZ",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Vec3f_setZ",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec3_Sl_float_Sg__setZ(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec3f(void *obj) {
open::Vec3< float > *arg1 = (open::Vec3< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vec3f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vec3f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vec3f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vec3f_methods[]= {
    { "__eq", _wrap_Vec3f___eq},
    { "__lt", _wrap_Vec3f___lt},
    { "set", _wrap_Vec3f_set},
    { "x", _wrap_Vec3f_x},
    { "y", _wrap_Vec3f_y},
    { "z", _wrap_Vec3f_z},
    { "valid", _wrap_Vec3f_valid},
    { "isNaN", _wrap_Vec3f_isNaN},
    { "__unm", _wrap_Vec3f___unm},
    { "__add", _wrap_Vec3f___add},
    { "__sub", _wrap_Vec3f___sub},
    { "__mul", _wrap_Vec3f___mul},
    { "__div", _wrap_Vec3f___div},
    { "length", _wrap_Vec3f_length},
    { "length2", _wrap_Vec3f_length2},
    { "normalize", _wrap_Vec3f_normalize},
    { "asBGR", _wrap_Vec3f_asBGR},
    { "asABGR", _wrap_Vec3f_asABGR},
    { "asRGB", _wrap_Vec3f_asRGB},
    { "asRGBA", _wrap_Vec3f_asRGBA},
    { "setX", _wrap_Vec3f_setX},
    { "setY", _wrap_Vec3f_setY},
    { "setZ", _wrap_Vec3f_setZ},
    {0,0}
};
static swig_lua_method swig_Vec3f_meta[] = {
    { "__eq", _wrap_Vec3f___eq},
    { "__lt", _wrap_Vec3f___lt},
    { "__unm", _wrap_Vec3f___unm},
    { "__add", _wrap_Vec3f___add},
    { "__sub", _wrap_Vec3f___sub},
    { "__mul", _wrap_Vec3f___mul},
    { "__div", _wrap_Vec3f___div},
    {0,0}
};

static swig_lua_attribute swig_Vec3f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vec3f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vec3f_Sf_SwigStatic_methods[]= {
    { "fromRGB", _wrap_Vec3f_fromRGB},
    {0,0}
};
static swig_lua_class* swig_Vec3f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vec3f_Sf_SwigStatic = {
    "Vec3f",
    swig_Vec3f_Sf_SwigStatic_methods,
    swig_Vec3f_Sf_SwigStatic_attributes,
    swig_Vec3f_Sf_SwigStatic_constants,
    swig_Vec3f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vec3f_bases[] = {0};
static const char *swig_Vec3f_base_names[] = {0};
static swig_lua_class _wrap_class_Vec3f = { "Vec3f", "Vec3f", &SWIGTYPE_p_open__Vec3T_float_t,_proxy__wrap_new_Vec3f, swig_delete_Vec3f, swig_Vec3f_methods, swig_Vec3f_attributes, &swig_Vec3f_Sf_SwigStatic, swig_Vec3f_meta, swig_Vec3f_bases, swig_Vec3f_base_names };

static int _wrap_new_Vec4f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec4< float >::Vec4",0,0)
  result = (open::Vec4< float > *)new open::Vec4< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float >::value_type arg1 ;
  open::Vec4< float >::value_type arg2 ;
  open::Vec4< float >::value_type arg3 ;
  open::Vec4< float >::value_type arg4 ;
  open::Vec4< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec4< float >::Vec4",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::Vec4< float >::Vec4",1,"open::Vec4< float >::value_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::Vec4",2,"open::Vec4< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Vec4< float >::Vec4",3,"open::Vec4< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Vec4< float >::Vec4",4,"open::Vec4< float >::value_type");
  arg1 = (open::Vec4< float >::value_type)lua_tonumber(L, 1);
  arg2 = (open::Vec4< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Vec4< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Vec4< float >::value_type)lua_tonumber(L, 4);
  result = (open::Vec4< float > *)new open::Vec4< float >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec3< float > *arg1 = 0 ;
  open::Vec4< float >::value_type arg2 ;
  open::Vec4< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec4< float >::Vec4",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("open::Vec4< float >::Vec4",1,"open::Vec3< float > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::Vec4",2,"open::Vec4< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("new_Vec4f",1,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  arg2 = (open::Vec4< float >::value_type)lua_tonumber(L, 2);
  result = (open::Vec4< float > *)new open::Vec4< float >((open::Vec3< float > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = 0 ;
  open::Vec4< float > *result = 0 ;
  
  SWIG_check_num_args("open::Vec4< float >::Vec4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("open::Vec4< float >::Vec4",1,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("new_Vec4f",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float > *)new open::Vec4< float >((open::Vec4< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vec4f(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vec4f__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vec4f__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vec4f__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Vec4f__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vec4f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Vec4< float >::Vec4()\n"
    "    open::Vec4< float >::Vec4(open::Vec4< float >::value_type,open::Vec4< float >::value_type,open::Vec4< float >::value_type,open::Vec4< float >::value_type)\n"
    "    open::Vec4< float >::Vec4(open::Vec3< float > const &,open::Vec4< float >::value_type)\n"
    "    open::Vec4< float >::Vec4(open::Vec4< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vec4f___eq(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec4< float >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::operator ==",1,"open::Vec4< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec4< float >::operator ==",2,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___eq",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___eq",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (bool)((open::Vec4< float > const *)arg1)->operator ==((open::Vec4< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___lt(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec4< float >::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::operator <",1,"open::Vec4< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec4< float >::operator <",2,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___lt",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___lt",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (bool)((open::Vec4< float > const *)arg1)->operator <((open::Vec4< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_set(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type arg2 ;
  open::Vec4< float >::value_type arg3 ;
  open::Vec4< float >::value_type arg4 ;
  open::Vec4< float >::value_type arg5 ;
  
  SWIG_check_num_args("open::Vec4< float >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::set",1,"open::Vec4< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::set",2,"open::Vec4< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Vec4< float >::set",3,"open::Vec4< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Vec4< float >::set",4,"open::Vec4< float >::value_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::Vec4< float >::set",5,"open::Vec4< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_set",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  arg2 = (open::Vec4< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Vec4< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Vec4< float >::value_type)lua_tonumber(L, 4);
  arg5 = (open::Vec4< float >::value_type)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_x(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type result;
  
  SWIG_check_num_args("open::Vec4< float >::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::x",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_x",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float >::value_type)((open::Vec4< float > const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_y(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type result;
  
  SWIG_check_num_args("open::Vec4< float >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::y",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_y",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float >::value_type)((open::Vec4< float > const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_z(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type result;
  
  SWIG_check_num_args("open::Vec4< float >::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::z",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_z",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float >::value_type)((open::Vec4< float > const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_w(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type result;
  
  SWIG_check_num_args("open::Vec4< float >::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::w",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_w",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float >::value_type)((open::Vec4< float > const *)arg1)->w();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_valid(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec4< float >::valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::valid",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_valid",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (bool)((open::Vec4< float > const *)arg1)->valid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_isNaN(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Vec4< float >::isNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::isNaN",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_isNaN",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (bool)((open::Vec4< float > const *)arg1)->isNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___unm(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float > result;
  
  SWIG_check_num_args("open::Vec4< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::operator -",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___unm",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = ((open::Vec4< float > const *)arg1)->operator -();
  {
    open::Vec4< float > * resultptr = new open::Vec4< float >((const open::Vec4< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___add(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float > *arg2 = 0 ;
  open::Vec4< float > result;
  
  SWIG_check_num_args("open::Vec4< float >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::operator +",1,"open::Vec4< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec4< float >::operator +",2,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___add",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___add",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = ((open::Vec4< float > const *)arg1)->operator +((open::Vec4< float > const &)*arg2);
  {
    open::Vec4< float > * resultptr = new open::Vec4< float >((const open::Vec4< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___sub(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float > *arg2 = 0 ;
  open::Vec4< float > result;
  
  SWIG_check_num_args("open::Vec4< float >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::operator -",1,"open::Vec4< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec4< float >::operator -",2,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___sub",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___sub",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = ((open::Vec4< float > const *)arg1)->operator -((open::Vec4< float > const &)*arg2);
  {
    open::Vec4< float > * resultptr = new open::Vec4< float >((const open::Vec4< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float > *arg2 = 0 ;
  open::Vec4< float >::value_type result;
  
  SWIG_check_num_args("open::Vec4< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::operator *",1,"open::Vec4< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Vec4< float >::operator *",2,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___mul",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float >::value_type)((open::Vec4< float > const *)arg1)->operator *((open::Vec4< float > const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type arg2 ;
  open::Vec4< float > result;
  
  SWIG_check_num_args("open::Vec4< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::operator *",1,"open::Vec4< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::operator *",2,"open::Vec4< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  arg2 = (open::Vec4< float >::value_type)lua_tonumber(L, 2);
  result = ((open::Vec4< float > const *)arg1)->operator *(arg2);
  {
    open::Vec4< float > * resultptr = new open::Vec4< float >((const open::Vec4< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec4T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vec4f___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Vec4T_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vec4f___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec4f___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Vec4< float >::operator *(open::Vec4< float > const &) const\n"
    "    open::Vec4< float >::operator *(open::Vec4< float >::value_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vec4f___div(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type arg2 ;
  open::Vec4< float > result;
  
  SWIG_check_num_args("open::Vec4< float >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::operator /",1,"open::Vec4< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::operator /",2,"open::Vec4< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f___div",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  arg2 = (open::Vec4< float >::value_type)lua_tonumber(L, 2);
  result = ((open::Vec4< float > const *)arg1)->operator /(arg2);
  {
    open::Vec4< float > * resultptr = new open::Vec4< float >((const open::Vec4< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_length(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type result;
  
  SWIG_check_num_args("open::Vec4< float >::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::length",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_length",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float >::value_type)((open::Vec4< float > const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_length2(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type result;
  
  SWIG_check_num_args("open::Vec4< float >::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::length2",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_length2",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float >::value_type)((open::Vec4< float > const *)arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_normalize(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  open::Vec4< float >::value_type result;
  
  SWIG_check_num_args("open::Vec4< float >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::normalize",1,"open::Vec4< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_normalize",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (open::Vec4< float >::value_type)(arg1)->normalize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_asABGR(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::Vec4< float >::asABGR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::asABGR",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_asABGR",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (uint32)((open::Vec4< float > const *)arg1)->asABGR();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_asRGBA(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::Vec4< float >::asRGBA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::asRGBA",1,"open::Vec4< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_asRGBA",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = (uint32)((open::Vec4< float > const *)arg1)->asRGBA();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_setX(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec4< float >::setX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::setX",1,"open::Vec4< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::setX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_setX",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec4_Sl_float_Sg__setX(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_setY(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec4< float >::setY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::setY",1,"open::Vec4< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::setY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_setY",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec4_Sl_float_Sg__setY(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_setZ(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec4< float >::setZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::setZ",1,"open::Vec4< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::setZ",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_setZ",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec4_Sl_float_Sg__setZ(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vec4f_setW(lua_State* L) {
  int SWIG_arg = 0;
  open::Vec4< float > *arg1 = (open::Vec4< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Vec4< float >::setW",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Vec4< float >::setW",1,"open::Vec4< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Vec4< float >::setW",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Vec4f_setW",1,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  open_Vec4_Sl_float_Sg__setW(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vec4f(void *obj) {
open::Vec4< float > *arg1 = (open::Vec4< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vec4f(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vec4f);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vec4f_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vec4f_methods[]= {
    { "__eq", _wrap_Vec4f___eq},
    { "__lt", _wrap_Vec4f___lt},
    { "set", _wrap_Vec4f_set},
    { "x", _wrap_Vec4f_x},
    { "y", _wrap_Vec4f_y},
    { "z", _wrap_Vec4f_z},
    { "w", _wrap_Vec4f_w},
    { "valid", _wrap_Vec4f_valid},
    { "isNaN", _wrap_Vec4f_isNaN},
    { "__unm", _wrap_Vec4f___unm},
    { "__add", _wrap_Vec4f___add},
    { "__sub", _wrap_Vec4f___sub},
    { "__mul", _wrap_Vec4f___mul},
    { "__div", _wrap_Vec4f___div},
    { "length", _wrap_Vec4f_length},
    { "length2", _wrap_Vec4f_length2},
    { "normalize", _wrap_Vec4f_normalize},
    { "asABGR", _wrap_Vec4f_asABGR},
    { "asRGBA", _wrap_Vec4f_asRGBA},
    { "setX", _wrap_Vec4f_setX},
    { "setY", _wrap_Vec4f_setY},
    { "setZ", _wrap_Vec4f_setZ},
    { "setW", _wrap_Vec4f_setW},
    {0,0}
};
static swig_lua_method swig_Vec4f_meta[] = {
    { "__eq", _wrap_Vec4f___eq},
    { "__lt", _wrap_Vec4f___lt},
    { "__unm", _wrap_Vec4f___unm},
    { "__add", _wrap_Vec4f___add},
    { "__sub", _wrap_Vec4f___sub},
    { "__mul", _wrap_Vec4f___mul},
    { "__div", _wrap_Vec4f___div},
    {0,0}
};

static swig_lua_attribute swig_Vec4f_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vec4f_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vec4f_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vec4f_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vec4f_Sf_SwigStatic = {
    "Vec4f",
    swig_Vec4f_Sf_SwigStatic_methods,
    swig_Vec4f_Sf_SwigStatic_attributes,
    swig_Vec4f_Sf_SwigStatic_constants,
    swig_Vec4f_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vec4f_bases[] = {0};
static const char *swig_Vec4f_base_names[] = {0};
static swig_lua_class _wrap_class_Vec4f = { "Vec4f", "Vec4f", &SWIGTYPE_p_open__Vec4T_float_t,_proxy__wrap_new_Vec4f, swig_delete_Vec4f, swig_Vec4f_methods, swig_Vec4f_attributes, &swig_Vec4f_Sf_SwigStatic, swig_Vec4f_meta, swig_Vec4f_bases, swig_Vec4f_base_names };

static int _wrap_new_Matrixf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::Matrix",0,0)
  result = (open::Matrix< float > *)new open::Matrix< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrixf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = 0 ;
  open::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("open::Matrix< float >::Matrix",1,"open::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("new_Matrixf",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = (open::Matrix< float > *)new open::Matrix< float >((open::Matrix< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrixf__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float >::value_type arg1 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  open::Matrix< float >::value_type arg5 ;
  open::Matrix< float >::value_type arg6 ;
  open::Matrix< float >::value_type arg7 ;
  open::Matrix< float >::value_type arg8 ;
  open::Matrix< float >::value_type arg9 ;
  open::Matrix< float >::value_type arg10 ;
  open::Matrix< float >::value_type arg11 ;
  open::Matrix< float >::value_type arg12 ;
  open::Matrix< float >::value_type arg13 ;
  open::Matrix< float >::value_type arg14 ;
  open::Matrix< float >::value_type arg15 ;
  open::Matrix< float >::value_type arg16 ;
  open::Matrix< float > *result = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::Matrix",16,16)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::Matrix< float >::Matrix",1,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::Matrix",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::Matrix",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::Matrix",4,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::Matrix< float >::Matrix",5,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::Matrix< float >::Matrix",6,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("open::Matrix< float >::Matrix",7,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("open::Matrix< float >::Matrix",8,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("open::Matrix< float >::Matrix",9,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("open::Matrix< float >::Matrix",10,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("open::Matrix< float >::Matrix",11,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("open::Matrix< float >::Matrix",12,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("open::Matrix< float >::Matrix",13,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("open::Matrix< float >::Matrix",14,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("open::Matrix< float >::Matrix",15,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("open::Matrix< float >::Matrix",16,"open::Matrix< float >::value_type");
  arg1 = (open::Matrix< float >::value_type)lua_tonumber(L, 1);
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  arg5 = (open::Matrix< float >::value_type)lua_tonumber(L, 5);
  arg6 = (open::Matrix< float >::value_type)lua_tonumber(L, 6);
  arg7 = (open::Matrix< float >::value_type)lua_tonumber(L, 7);
  arg8 = (open::Matrix< float >::value_type)lua_tonumber(L, 8);
  arg9 = (open::Matrix< float >::value_type)lua_tonumber(L, 9);
  arg10 = (open::Matrix< float >::value_type)lua_tonumber(L, 10);
  arg11 = (open::Matrix< float >::value_type)lua_tonumber(L, 11);
  arg12 = (open::Matrix< float >::value_type)lua_tonumber(L, 12);
  arg13 = (open::Matrix< float >::value_type)lua_tonumber(L, 13);
  arg14 = (open::Matrix< float >::value_type)lua_tonumber(L, 14);
  arg15 = (open::Matrix< float >::value_type)lua_tonumber(L, 15);
  arg16 = (open::Matrix< float >::value_type)lua_tonumber(L, 16);
  result = (open::Matrix< float > *)new open::Matrix< float >(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__MatrixT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrixf(lua_State* L) {
  int argc;
  int argv[17]={
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Matrixf__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrixf__SWIG_1(L);
    }
  }
  if (argc == 16) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        {
                          _v = lua_isnumber(L,argv[10]);
                        }
                        if (_v) {
                          {
                            _v = lua_isnumber(L,argv[11]);
                          }
                          if (_v) {
                            {
                              _v = lua_isnumber(L,argv[12]);
                            }
                            if (_v) {
                              {
                                _v = lua_isnumber(L,argv[13]);
                              }
                              if (_v) {
                                {
                                  _v = lua_isnumber(L,argv[14]);
                                }
                                if (_v) {
                                  {
                                    _v = lua_isnumber(L,argv[15]);
                                  }
                                  if (_v) {
                                    return _wrap_new_Matrixf__SWIG_2(L);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Matrixf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Matrix< float >::Matrix()\n"
    "    open::Matrix< float >::Matrix(open::Matrix< float > const &)\n"
    "    open::Matrix< float >::Matrix(open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrixf___call(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  open::Matrix< float >::value_type result;
  
  SWIG_check_num_args("open::Matrix< float >::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::operator ()",1,"open::Matrix< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::operator ()",2,"int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::operator ()",3,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf___call",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  arg3 = (int32)lua_tonumber(L, 3);
  result = (open::Matrix< float >::value_type)((open::Matrix< float > const *)arg1)->operator ()(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_valid(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Matrix< float >::valid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::valid",1,"open::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_valid",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = (bool)((open::Matrix< float > const *)arg1)->valid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_isNaN(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Matrix< float >::isNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::isNaN",1,"open::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_isNaN",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = (bool)((open::Matrix< float > const *)arg1)->isNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_set(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  open::Matrix< float >::value_type arg5 ;
  open::Matrix< float >::value_type arg6 ;
  open::Matrix< float >::value_type arg7 ;
  open::Matrix< float >::value_type arg8 ;
  open::Matrix< float >::value_type arg9 ;
  open::Matrix< float >::value_type arg10 ;
  open::Matrix< float >::value_type arg11 ;
  open::Matrix< float >::value_type arg12 ;
  open::Matrix< float >::value_type arg13 ;
  open::Matrix< float >::value_type arg14 ;
  open::Matrix< float >::value_type arg15 ;
  open::Matrix< float >::value_type arg16 ;
  open::Matrix< float >::value_type arg17 ;
  
  SWIG_check_num_args("open::Matrix< float >::set",17,17)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::set",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::set",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::set",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::set",4,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::Matrix< float >::set",5,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::Matrix< float >::set",6,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("open::Matrix< float >::set",7,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("open::Matrix< float >::set",8,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("open::Matrix< float >::set",9,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("open::Matrix< float >::set",10,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("open::Matrix< float >::set",11,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("open::Matrix< float >::set",12,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("open::Matrix< float >::set",13,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("open::Matrix< float >::set",14,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("open::Matrix< float >::set",15,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("open::Matrix< float >::set",16,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("open::Matrix< float >::set",17,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_set",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  arg5 = (open::Matrix< float >::value_type)lua_tonumber(L, 5);
  arg6 = (open::Matrix< float >::value_type)lua_tonumber(L, 6);
  arg7 = (open::Matrix< float >::value_type)lua_tonumber(L, 7);
  arg8 = (open::Matrix< float >::value_type)lua_tonumber(L, 8);
  arg9 = (open::Matrix< float >::value_type)lua_tonumber(L, 9);
  arg10 = (open::Matrix< float >::value_type)lua_tonumber(L, 10);
  arg11 = (open::Matrix< float >::value_type)lua_tonumber(L, 11);
  arg12 = (open::Matrix< float >::value_type)lua_tonumber(L, 12);
  arg13 = (open::Matrix< float >::value_type)lua_tonumber(L, 13);
  arg14 = (open::Matrix< float >::value_type)lua_tonumber(L, 14);
  arg15 = (open::Matrix< float >::value_type)lua_tonumber(L, 15);
  arg16 = (open::Matrix< float >::value_type)lua_tonumber(L, 16);
  arg17 = (open::Matrix< float >::value_type)lua_tonumber(L, 17);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf___eq(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::Matrix< float >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::operator ==",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::operator ==",2,"open::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf___eq",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf___eq",2,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = (bool)((open::Matrix< float > const *)arg1)->operator ==((open::Matrix< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_isIdentity(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Matrix< float >::isIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::isIdentity",1,"open::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_isIdentity",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = (bool)((open::Matrix< float > const *)arg1)->isIdentity();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeIdentity(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeIdentity",1,"open::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeIdentity",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  (arg1)->makeIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeScale",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeScale",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::makeScale",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::makeScale",4,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeScale",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  (arg1)->makeScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeScale",1,"open::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::makeScale",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeScale",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeScale",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  (arg1)->makeScale((open::Vec3< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf_makeScale__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrixf_makeScale__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrixf_makeScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Matrix< float >::makeScale(open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type)\n"
    "    open::Matrix< float >::makeScale(open::Vec3< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrixf_makeTranslate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeTranslate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeTranslate",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeTranslate",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::makeTranslate",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::makeTranslate",4,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeTranslate",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  (arg1)->makeTranslate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeTranslate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeTranslate",1,"open::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::makeTranslate",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeTranslate",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeTranslate",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  (arg1)->makeTranslate((open::Vec3< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeTranslate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf_makeTranslate__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrixf_makeTranslate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrixf_makeTranslate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Matrix< float >::makeTranslate(open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type)\n"
    "    open::Matrix< float >::makeTranslate(open::Vec3< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrixf_makeRotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  open::Matrix< float >::value_type arg5 ;
  open::Matrix< float >::value_type arg6 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeRotate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeRotate",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeRotate",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::makeRotate",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::makeRotate",4,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::Matrix< float >::makeRotate",5,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::Matrix< float >::makeRotate",6,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotate",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  arg5 = (open::Matrix< float >::value_type)lua_tonumber(L, 5);
  arg6 = (open::Matrix< float >::value_type)lua_tonumber(L, 6);
  (arg1)->makeRotate(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeRotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  open::Matrix< float >::value_type arg5 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeRotate",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeRotate",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::makeRotate",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::makeRotate",4,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::Matrix< float >::makeRotate",5,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotate",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  arg5 = (open::Matrix< float >::value_type)lua_tonumber(L, 5);
  (arg1)->makeRotate(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeRotate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Vec3< float > *arg3 = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeRotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeRotate",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeRotate",2,"open::Matrix< float >::value_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::Matrix< float >::makeRotate",3,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotate",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotate",3,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  (arg1)->makeRotate(arg2,(open::Vec3< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeRotateX(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeRotateX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeRotateX",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeRotateX",2,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotateX",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  (arg1)->makeRotateX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeRotateY(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeRotateY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeRotateY",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeRotateY",2,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotateY",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  (arg1)->makeRotateY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeRotateZ(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeRotateZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeRotateZ",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeRotateZ",2,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotateZ",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  (arg1)->makeRotateZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeRotateXYZ(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeRotateXYZ",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeRotateXYZ",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeRotateXYZ",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::makeRotateXYZ",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::makeRotateXYZ",4,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotateXYZ",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  (arg1)->makeRotateXYZ(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeRotate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Quat< float > *arg2 = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeRotate",1,"open::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::makeRotate",2,"open::Quat< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotate",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__QuatT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeRotate",2,SWIGTYPE_p_open__QuatT_float_t);
  }
  
  (arg1)->makeRotate((open::Quat< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeRotate(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__QuatT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf_makeRotate__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrixf_makeRotate__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Matrixf_makeRotate__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Matrixf_makeRotate__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrixf_makeRotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Matrix< float >::makeRotate(open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type)\n"
    "    open::Matrix< float >::makeRotate(open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type,open::Matrix< float >::value_type)\n"
    "    open::Matrix< float >::makeRotate(open::Matrix< float >::value_type,open::Vec3< float > const &)\n"
    "    open::Matrix< float >::makeRotate(open::Quat< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrixf_getTrans(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::getTrans",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::getTrans",1,"open::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_getTrans",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->getTrans();
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_getScale(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::getScale",1,"open::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_getScale",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->getScale();
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_getRotate(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  SwigValueWrapper< open::Quat< float > > result;
  
  SWIG_check_num_args("open::Matrix< float >::getRotate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::getRotate",1,"open::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_getRotate",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->getRotate();
  {
    open::Quat< float > * resultptr = new open::Quat< float >((const open::Quat< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__QuatT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_getTranspose(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::getTranspose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::getTranspose",1,"open::Matrix< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_getTranspose",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->getTranspose();
  {
    open::Matrix< float > * resultptr = new open::Matrix< float >((const open::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_inverse(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::inverse",1,"open::Matrix< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_inverse",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  (arg1)->inverse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_preMult__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::preMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::preMult",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::preMult",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_preMult",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_preMult",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->preMult((open::Vec3< float > const &)*arg2);
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_postMult__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::postMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::postMult",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::postMult",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_postMult",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_postMult",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->postMult((open::Vec3< float > const &)*arg2);
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_preMult__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec4< float > *arg2 = 0 ;
  open::Vec4< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::preMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::preMult",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::preMult",2,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_preMult",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Matrixf_preMult",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->preMult((open::Vec4< float > const &)*arg2);
  {
    open::Vec4< float > * resultptr = new open::Vec4< float >((const open::Vec4< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_preMult(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf_preMult__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec4T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf_preMult__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrixf_preMult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Matrix< float >::preMult(open::Vec3< float > const &) const\n"
    "    open::Matrix< float >::preMult(open::Vec4< float > const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrixf_postMult__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec4< float > *arg2 = 0 ;
  open::Vec4< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::postMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::postMult",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::postMult",2,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_postMult",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Matrixf_postMult",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->postMult((open::Vec4< float > const &)*arg2);
  {
    open::Vec4< float > * resultptr = new open::Vec4< float >((const open::Vec4< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_postMult(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf_postMult__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec4T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf_postMult__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrixf_postMult'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Matrix< float >::postMult(open::Vec3< float > const &) const\n"
    "    open::Matrix< float >::postMult(open::Vec4< float > const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrixf___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  open::Vec3< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::operator *",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::operator *",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf___mul",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf___mul",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->operator *((open::Vec3< float > const &)*arg2);
  {
    open::Vec3< float > * resultptr = new open::Vec3< float >((const open::Vec3< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec3T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec4< float > *arg2 = 0 ;
  open::Vec4< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::operator *",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::operator *",2,"open::Vec4< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf___mul",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("Matrixf___mul",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->operator *((open::Vec4< float > const &)*arg2);
  {
    open::Vec4< float > * resultptr = new open::Vec4< float >((const open::Vec4< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__Vec4T_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float > *arg2 = 0 ;
  open::Matrix< float > result;
  
  SWIG_check_num_args("open::Matrix< float >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::operator *",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::operator *",2,"open::Matrix< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf___mul",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf___mul",2,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  result = ((open::Matrix< float > const *)arg1)->operator *((open::Matrix< float > const &)*arg2);
  {
    open::Matrix< float > * resultptr = new open::Matrix< float >((const open::Matrix< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_open__MatrixT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec3T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Vec4T_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__MatrixT_float_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrixf___mul__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrixf___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Matrix< float >::operator *(open::Vec3< float > const &) const\n"
    "    open::Matrix< float >::operator *(open::Vec4< float > const &) const\n"
    "    open::Matrix< float >::operator *(open::Matrix< float > const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrixf_preMultTranslate(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::preMultTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::preMultTranslate",1,"open::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::preMultTranslate",2,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_preMultTranslate",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_preMultTranslate",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  (arg1)->preMultTranslate((open::Vec3< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeLookAt(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Vec3< float > *arg2 = 0 ;
  open::Vec3< float > *arg3 = 0 ;
  open::Vec3< float > *arg4 = 0 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeLookAt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeLookAt",1,"open::Matrix< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::makeLookAt",2,"open::Vec3< float > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::Matrix< float >::makeLookAt",3,"open::Vec3< float > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("open::Matrix< float >::makeLookAt",4,"open::Vec3< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeLookAt",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeLookAt",2,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeLookAt",3,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_open__Vec3T_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeLookAt",4,SWIGTYPE_p_open__Vec3T_float_t);
  }
  
  (arg1)->makeLookAt((open::Vec3< float > const &)*arg2,(open::Vec3< float > const &)*arg3,(open::Vec3< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeFrustum(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  open::Matrix< float >::value_type arg5 ;
  open::Matrix< float >::value_type arg6 ;
  open::Matrix< float >::value_type arg7 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeFrustum",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeFrustum",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeFrustum",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::makeFrustum",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::makeFrustum",4,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::Matrix< float >::makeFrustum",5,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::Matrix< float >::makeFrustum",6,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("open::Matrix< float >::makeFrustum",7,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeFrustum",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  arg5 = (open::Matrix< float >::value_type)lua_tonumber(L, 5);
  arg6 = (open::Matrix< float >::value_type)lua_tonumber(L, 6);
  arg7 = (open::Matrix< float >::value_type)lua_tonumber(L, 7);
  (arg1)->makeFrustum(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makePerspective(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  open::Matrix< float >::value_type arg5 ;
  
  SWIG_check_num_args("open::Matrix< float >::makePerspective",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makePerspective",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makePerspective",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::makePerspective",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::makePerspective",4,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::Matrix< float >::makePerspective",5,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makePerspective",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  arg5 = (open::Matrix< float >::value_type)lua_tonumber(L, 5);
  (arg1)->makePerspective(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_makeOrtho(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type arg2 ;
  open::Matrix< float >::value_type arg3 ;
  open::Matrix< float >::value_type arg4 ;
  open::Matrix< float >::value_type arg5 ;
  open::Matrix< float >::value_type arg6 ;
  open::Matrix< float >::value_type arg7 ;
  
  SWIG_check_num_args("open::Matrix< float >::makeOrtho",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::makeOrtho",1,"open::Matrix< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Matrix< float >::makeOrtho",2,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::Matrix< float >::makeOrtho",3,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::Matrix< float >::makeOrtho",4,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::Matrix< float >::makeOrtho",5,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::Matrix< float >::makeOrtho",6,"open::Matrix< float >::value_type");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("open::Matrix< float >::makeOrtho",7,"open::Matrix< float >::value_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_makeOrtho",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  arg2 = (open::Matrix< float >::value_type)lua_tonumber(L, 2);
  arg3 = (open::Matrix< float >::value_type)lua_tonumber(L, 3);
  arg4 = (open::Matrix< float >::value_type)lua_tonumber(L, 4);
  arg5 = (open::Matrix< float >::value_type)lua_tonumber(L, 5);
  arg6 = (open::Matrix< float >::value_type)lua_tonumber(L, 6);
  arg7 = (open::Matrix< float >::value_type)lua_tonumber(L, 7);
  (arg1)->makeOrtho(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrixf_getFrustum(lua_State* L) {
  int SWIG_arg = 0;
  open::Matrix< float > *arg1 = (open::Matrix< float > *) 0 ;
  open::Matrix< float >::value_type *arg2 = 0 ;
  open::Matrix< float >::value_type *arg3 = 0 ;
  open::Matrix< float >::value_type *arg4 = 0 ;
  open::Matrix< float >::value_type *arg5 = 0 ;
  open::Matrix< float >::value_type *arg6 = 0 ;
  open::Matrix< float >::value_type *arg7 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::Matrix< float >::getFrustum",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Matrix< float >::getFrustum",1,"open::Matrix< float > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Matrix< float >::getFrustum",2,"open::Matrix< float >::value_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::Matrix< float >::getFrustum",3,"open::Matrix< float >::value_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("open::Matrix< float >::getFrustum",4,"open::Matrix< float >::value_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("open::Matrix< float >::getFrustum",5,"open::Matrix< float >::value_type &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("open::Matrix< float >::getFrustum",6,"open::Matrix< float >::value_type &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("open::Matrix< float >::getFrustum",7,"open::Matrix< float >::value_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__MatrixT_float_t,0))){
    SWIG_fail_ptr("Matrixf_getFrustum",1,SWIGTYPE_p_open__MatrixT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrixf_getFrustum",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrixf_getFrustum",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrixf_getFrustum",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrixf_getFrustum",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrixf_getFrustum",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Matrixf_getFrustum",7,SWIGTYPE_p_float);
  }
  
  result = (bool)((open::Matrix< float > const *)arg1)->getFrustum(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrixf(void *obj) {
open::Matrix< float > *arg1 = (open::Matrix< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Matrixf(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Matrixf);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Matrixf_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Matrixf_methods[]= {
    { "__call", _wrap_Matrixf___call},
    { "valid", _wrap_Matrixf_valid},
    { "isNaN", _wrap_Matrixf_isNaN},
    { "set", _wrap_Matrixf_set},
    { "__eq", _wrap_Matrixf___eq},
    { "isIdentity", _wrap_Matrixf_isIdentity},
    { "makeIdentity", _wrap_Matrixf_makeIdentity},
    { "makeScale", _wrap_Matrixf_makeScale},
    { "makeTranslate", _wrap_Matrixf_makeTranslate},
    { "makeRotateX", _wrap_Matrixf_makeRotateX},
    { "makeRotateY", _wrap_Matrixf_makeRotateY},
    { "makeRotateZ", _wrap_Matrixf_makeRotateZ},
    { "makeRotateXYZ", _wrap_Matrixf_makeRotateXYZ},
    { "makeRotate", _wrap_Matrixf_makeRotate},
    { "getTrans", _wrap_Matrixf_getTrans},
    { "getScale", _wrap_Matrixf_getScale},
    { "getRotate", _wrap_Matrixf_getRotate},
    { "getTranspose", _wrap_Matrixf_getTranspose},
    { "inverse", _wrap_Matrixf_inverse},
    { "preMult", _wrap_Matrixf_preMult},
    { "postMult", _wrap_Matrixf_postMult},
    { "__mul", _wrap_Matrixf___mul},
    { "preMultTranslate", _wrap_Matrixf_preMultTranslate},
    { "makeLookAt", _wrap_Matrixf_makeLookAt},
    { "makeFrustum", _wrap_Matrixf_makeFrustum},
    { "makePerspective", _wrap_Matrixf_makePerspective},
    { "makeOrtho", _wrap_Matrixf_makeOrtho},
    { "getFrustum", _wrap_Matrixf_getFrustum},
    {0,0}
};
static swig_lua_method swig_Matrixf_meta[] = {
    { "__call", _wrap_Matrixf___call},
    { "__eq", _wrap_Matrixf___eq},
    { "__mul", _wrap_Matrixf___mul},
    {0,0}
};

static swig_lua_attribute swig_Matrixf_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Matrixf_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Matrixf_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Matrixf_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Matrixf_Sf_SwigStatic = {
    "Matrixf",
    swig_Matrixf_Sf_SwigStatic_methods,
    swig_Matrixf_Sf_SwigStatic_attributes,
    swig_Matrixf_Sf_SwigStatic_constants,
    swig_Matrixf_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Matrixf_bases[] = {0};
static const char *swig_Matrixf_base_names[] = {0};
static swig_lua_class _wrap_class_Matrixf = { "Matrixf", "Matrixf", &SWIGTYPE_p_open__MatrixT_float_t,_proxy__wrap_new_Matrixf, swig_delete_Matrixf, swig_Matrixf_methods, swig_Matrixf_attributes, &swig_Matrixf_Sf_SwigStatic, swig_Matrixf_meta, swig_Matrixf_bases, swig_Matrixf_base_names };

static int _wrap_IGPUBuffer_setData(lua_State* L) {
  int SWIG_arg = 0;
  open::IGPUBuffer *arg1 = (open::IGPUBuffer *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32 arg3 ;
  
  SWIG_check_num_args("open::IGPUBuffer::setData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IGPUBuffer::setData",1,"open::IGPUBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IGPUBuffer::setData",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IGPUBuffer::setData",3,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IGPUBuffer,0))){
    SWIG_fail_ptr("IGPUBuffer_setData",1,SWIGTYPE_p_open__IGPUBuffer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"IGPUBuffer_setData");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (uint32)lua_tonumber(L, 3);
  (arg1)->setData(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGPUBuffer_size(lua_State* L) {
  int SWIG_arg = 0;
  open::IGPUBuffer *arg1 = (open::IGPUBuffer *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::IGPUBuffer::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IGPUBuffer::size",1,"open::IGPUBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IGPUBuffer,0))){
    SWIG_fail_ptr("IGPUBuffer_size",1,SWIGTYPE_p_open__IGPUBuffer);
  }
  
  result = (uint32)(arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGPUBuffer_getData(lua_State* L) {
  int SWIG_arg = 0;
  open::IGPUBuffer *arg1 = (open::IGPUBuffer *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("open::IGPUBuffer::getData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IGPUBuffer::getData",1,"open::IGPUBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IGPUBuffer,0))){
    SWIG_fail_ptr("IGPUBuffer_getData",1,SWIGTYPE_p_open__IGPUBuffer);
  }
  
  result = (void *)(arg1)->getData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IGPUBuffer_getUseType(lua_State* L) {
  int SWIG_arg = 0;
  open::IGPUBuffer *arg1 = (open::IGPUBuffer *) 0 ;
  open::BufferUseType result;
  
  SWIG_check_num_args("open::IGPUBuffer::getUseType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IGPUBuffer::getUseType",1,"open::IGPUBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IGPUBuffer,0))){
    SWIG_fail_ptr("IGPUBuffer_getUseType",1,SWIGTYPE_p_open__IGPUBuffer);
  }
  
  result = (open::BufferUseType)(arg1)->getUseType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IGPUBuffer(void *obj) {
open::IGPUBuffer *arg1 = (open::IGPUBuffer *) obj;
delete arg1;
}
static swig_lua_attribute swig_IGPUBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IGPUBuffer_methods[]= {
    { "setData", _wrap_IGPUBuffer_setData},
    { "size", _wrap_IGPUBuffer_size},
    { "getData", _wrap_IGPUBuffer_getData},
    { "getUseType", _wrap_IGPUBuffer_getUseType},
    {0,0}
};
static swig_lua_method swig_IGPUBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IGPUBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IGPUBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IGPUBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IGPUBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IGPUBuffer_Sf_SwigStatic = {
    "IGPUBuffer",
    swig_IGPUBuffer_Sf_SwigStatic_methods,
    swig_IGPUBuffer_Sf_SwigStatic_attributes,
    swig_IGPUBuffer_Sf_SwigStatic_constants,
    swig_IGPUBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IGPUBuffer_bases[] = {0};
static const char *swig_IGPUBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_IGPUBuffer = { "IGPUBuffer", "IGPUBuffer", &SWIGTYPE_p_open__IGPUBuffer,0, swig_delete_IGPUBuffer, swig_IGPUBuffer_methods, swig_IGPUBuffer_attributes, &swig_IGPUBuffer_Sf_SwigStatic, swig_IGPUBuffer_meta, swig_IGPUBuffer_bases, swig_IGPUBuffer_base_names };

static int _wrap_IVertexArrayObject_getGPUBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexArrayObject *arg1 = (open::IVertexArrayObject *) 0 ;
  uint32 arg2 ;
  open::IGPUBuffer *result = 0 ;
  
  SWIG_check_num_args("open::IVertexArrayObject::getGPUBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexArrayObject::getGPUBuffer",1,"open::IVertexArrayObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IVertexArrayObject::getGPUBuffer",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IVertexArrayObject_getGPUBuffer",1,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  result = (open::IGPUBuffer *)(arg1)->getGPUBuffer(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IGPUBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexArrayObject_getGPUBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexArrayObject *arg1 = (open::IVertexArrayObject *) 0 ;
  open::IGPUBuffer *result = 0 ;
  
  SWIG_check_num_args("open::IVertexArrayObject::getGPUBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexArrayObject::getGPUBuffer",1,"open::IVertexArrayObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IVertexArrayObject_getGPUBuffer",1,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  result = (open::IGPUBuffer *)(arg1)->getGPUBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IGPUBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexArrayObject_getGPUBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IVertexArrayObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IVertexArrayObject_getGPUBuffer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IVertexArrayObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IVertexArrayObject_getGPUBuffer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IVertexArrayObject_getGPUBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IVertexArrayObject::getGPUBuffer(uint32)\n"
    "    open::IVertexArrayObject::getGPUBuffer()\n");
  lua_error(L);return 0;
}


static int _wrap_IVertexArrayObject_getVertexLayout(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexArrayObject *arg1 = (open::IVertexArrayObject *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 *arg4 = 0 ;
  open::DataType *arg5 = 0 ;
  uint32 *arg6 = 0 ;
  uint32 *arg7 = 0 ;
  
  SWIG_check_num_args("open::IVertexArrayObject::getVertexLayout",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexArrayObject::getVertexLayout",1,"open::IVertexArrayObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IVertexArrayObject::getVertexLayout",2,"uint32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IVertexArrayObject::getVertexLayout",3,"uint32");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("open::IVertexArrayObject::getVertexLayout",4,"uint32 &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("open::IVertexArrayObject::getVertexLayout",5,"open::DataType &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("open::IVertexArrayObject::getVertexLayout",6,"uint32 &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("open::IVertexArrayObject::getVertexLayout",7,"uint32 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IVertexArrayObject_getVertexLayout",1,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (uint32)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IVertexArrayObject_getVertexLayout",4,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_open__DataType,0))){
    SWIG_fail_ptr("IVertexArrayObject_getVertexLayout",5,SWIGTYPE_p_open__DataType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IVertexArrayObject_getVertexLayout",6,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("IVertexArrayObject_getVertexLayout",7,SWIGTYPE_p_unsigned_int);
  }
  
  (arg1)->getVertexLayout(arg2,arg3,*arg4,*arg5,*arg6,*arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexArrayObject_setVertexLayout(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexArrayObject *arg1 = (open::IVertexArrayObject *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  open::DataType arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  SWIG_check_num_args("open::IVertexArrayObject::setVertexLayout",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexArrayObject::setVertexLayout",1,"open::IVertexArrayObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IVertexArrayObject::setVertexLayout",2,"uint32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IVertexArrayObject::setVertexLayout",3,"uint32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::IVertexArrayObject::setVertexLayout",4,"uint32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::IVertexArrayObject::setVertexLayout",5,"open::DataType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::IVertexArrayObject::setVertexLayout",6,"uint32");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("open::IVertexArrayObject::setVertexLayout",7,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IVertexArrayObject_setVertexLayout",1,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (uint32)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (uint32)lua_tonumber(L, 4);
  arg5 = (open::DataType)(int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (uint32)lua_tonumber(L, 6);
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative")
  arg7 = (uint32)lua_tonumber(L, 7);
  (arg1)->setVertexLayout(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IVertexArrayObject(void *obj) {
open::IVertexArrayObject *arg1 = (open::IVertexArrayObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_IVertexArrayObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IVertexArrayObject_methods[]= {
    { "getGPUBuffer", _wrap_IVertexArrayObject_getGPUBuffer},
    { "getVertexLayout", _wrap_IVertexArrayObject_getVertexLayout},
    { "setVertexLayout", _wrap_IVertexArrayObject_setVertexLayout},
    {0,0}
};
static swig_lua_method swig_IVertexArrayObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IVertexArrayObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IVertexArrayObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IVertexArrayObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IVertexArrayObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IVertexArrayObject_Sf_SwigStatic = {
    "IVertexArrayObject",
    swig_IVertexArrayObject_Sf_SwigStatic_methods,
    swig_IVertexArrayObject_Sf_SwigStatic_attributes,
    swig_IVertexArrayObject_Sf_SwigStatic_constants,
    swig_IVertexArrayObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IVertexArrayObject_bases[] = {0};
static const char *swig_IVertexArrayObject_base_names[] = {0};
static swig_lua_class _wrap_class_IVertexArrayObject = { "IVertexArrayObject", "IVertexArrayObject", &SWIGTYPE_p_open__IVertexArrayObject,0, swig_delete_IVertexArrayObject, swig_IVertexArrayObject_methods, swig_IVertexArrayObject_attributes, &swig_IVertexArrayObject_Sf_SwigStatic, swig_IVertexArrayObject_meta, swig_IVertexArrayObject_bases, swig_IVertexArrayObject_base_names };

static int _wrap_IVertexIndexObject_getGPUBuffer(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexIndexObject *arg1 = (open::IVertexIndexObject *) 0 ;
  open::IGPUBuffer *result = 0 ;
  
  SWIG_check_num_args("open::IVertexIndexObject::getGPUBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexIndexObject::getGPUBuffer",1,"open::IVertexIndexObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexIndexObject,0))){
    SWIG_fail_ptr("IVertexIndexObject_getGPUBuffer",1,SWIGTYPE_p_open__IVertexIndexObject);
  }
  
  result = (open::IGPUBuffer *)(arg1)->getGPUBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IGPUBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexIndexObject_setDataType(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexIndexObject *arg1 = (open::IVertexIndexObject *) 0 ;
  open::DataType arg2 ;
  
  SWIG_check_num_args("open::IVertexIndexObject::setDataType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexIndexObject::setDataType",1,"open::IVertexIndexObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IVertexIndexObject::setDataType",2,"open::DataType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexIndexObject,0))){
    SWIG_fail_ptr("IVertexIndexObject_setDataType",1,SWIGTYPE_p_open__IVertexIndexObject);
  }
  
  arg2 = (open::DataType)(int)lua_tonumber(L, 2);
  (arg1)->setDataType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexIndexObject_getDataType(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexIndexObject *arg1 = (open::IVertexIndexObject *) 0 ;
  open::DataType result;
  
  SWIG_check_num_args("open::IVertexIndexObject::getDataType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexIndexObject::getDataType",1,"open::IVertexIndexObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexIndexObject,0))){
    SWIG_fail_ptr("IVertexIndexObject_getDataType",1,SWIGTYPE_p_open__IVertexIndexObject);
  }
  
  result = (open::DataType)(arg1)->getDataType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IVertexIndexObject(void *obj) {
open::IVertexIndexObject *arg1 = (open::IVertexIndexObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_IVertexIndexObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IVertexIndexObject_methods[]= {
    { "getGPUBuffer", _wrap_IVertexIndexObject_getGPUBuffer},
    { "setDataType", _wrap_IVertexIndexObject_setDataType},
    { "getDataType", _wrap_IVertexIndexObject_getDataType},
    {0,0}
};
static swig_lua_method swig_IVertexIndexObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IVertexIndexObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IVertexIndexObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IVertexIndexObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IVertexIndexObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IVertexIndexObject_Sf_SwigStatic = {
    "IVertexIndexObject",
    swig_IVertexIndexObject_Sf_SwigStatic_methods,
    swig_IVertexIndexObject_Sf_SwigStatic_attributes,
    swig_IVertexIndexObject_Sf_SwigStatic_constants,
    swig_IVertexIndexObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IVertexIndexObject_bases[] = {0};
static const char *swig_IVertexIndexObject_base_names[] = {0};
static swig_lua_class _wrap_class_IVertexIndexObject = { "IVertexIndexObject", "IVertexIndexObject", &SWIGTYPE_p_open__IVertexIndexObject,0, swig_delete_IVertexIndexObject, swig_IVertexIndexObject_methods, swig_IVertexIndexObject_attributes, &swig_IVertexIndexObject_Sf_SwigStatic, swig_IVertexIndexObject_meta, swig_IVertexIndexObject_bases, swig_IVertexIndexObject_base_names };

static int _wrap_IVertexStream_genVertexType(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexStream::VerxtexDataType arg1 ;
  open::IVertexStream::VertexUsage arg2 ;
  uint64 result;
  
  SWIG_check_num_args("open::IVertexStream::genVertexType",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::IVertexStream::genVertexType",1,"open::IVertexStream::VerxtexDataType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IVertexStream::genVertexType",2,"open::IVertexStream::VertexUsage");
  arg1 = (open::IVertexStream::VerxtexDataType)(int)lua_tonumber(L, 1);
  arg2 = (open::IVertexStream::VertexUsage)(int)lua_tonumber(L, 2);
  result = (uint64)open::IVertexStream::genVertexType(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexStream_reset(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexStream *arg1 = (open::IVertexStream *) 0 ;
  
  SWIG_check_num_args("open::IVertexStream::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexStream::reset",1,"open::IVertexStream *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexStream,0))){
    SWIG_fail_ptr("IVertexStream_reset",1,SWIGTYPE_p_open__IVertexStream);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexStream_add(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexStream *arg1 = (open::IVertexStream *) 0 ;
  uint64 *arg2 = (uint64 *) 0 ;
  uint32 arg3 ;
  
  SWIG_check_num_args("open::IVertexStream::add",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexStream::add",1,"open::IVertexStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IVertexStream::add",2,"uint64 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IVertexStream::add",3,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexStream,0))){
    SWIG_fail_ptr("IVertexStream_add",1,SWIGTYPE_p_open__IVertexStream);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_long_long,0))){
    SWIG_fail_ptr("IVertexStream_add",2,SWIGTYPE_p_unsigned_long_long);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (uint32)lua_tonumber(L, 3);
  (arg1)->add((uint64 const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexStream_addVerxtxData(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexStream *arg1 = (open::IVertexStream *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32 arg3 ;
  
  SWIG_check_num_args("open::IVertexStream::addVerxtxData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexStream::addVerxtxData",1,"open::IVertexStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IVertexStream::addVerxtxData",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IVertexStream::addVerxtxData",3,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexStream,0))){
    SWIG_fail_ptr("IVertexStream_addVerxtxData",1,SWIGTYPE_p_open__IVertexStream);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"IVertexStream_addVerxtxData");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (uint32)lua_tonumber(L, 3);
  (arg1)->addVerxtxData((void const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexStream_setSize(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexStream *arg1 = (open::IVertexStream *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::IVertexStream::setSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexStream::setSize",1,"open::IVertexStream *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IVertexStream::setSize",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexStream,0))){
    SWIG_fail_ptr("IVertexStream_setSize",1,SWIGTYPE_p_open__IVertexStream);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setSize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexStream_getSize(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexStream *arg1 = (open::IVertexStream *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::IVertexStream::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexStream::getSize",1,"open::IVertexStream *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexStream,0))){
    SWIG_fail_ptr("IVertexStream_getSize",1,SWIGTYPE_p_open__IVertexStream);
  }
  
  result = (uint32)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertexStream_accept(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexStream *arg1 = (open::IVertexStream *) 0 ;
  open::IVertexArrayObject *arg2 = (open::IVertexArrayObject *) 0 ;
  uint32 arg3 ;
  
  SWIG_check_num_args("open::IVertexStream::accept",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertexStream::accept",1,"open::IVertexStream const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IVertexStream::accept",2,"open::IVertexArrayObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IVertexStream::accept",3,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertexStream,0))){
    SWIG_fail_ptr("IVertexStream_accept",1,SWIGTYPE_p_open__IVertexStream);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IVertexStream_accept",2,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (uint32)lua_tonumber(L, 3);
  ((open::IVertexStream const *)arg1)->accept(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IVertexStream(void *obj) {
open::IVertexStream *arg1 = (open::IVertexStream *) obj;
delete arg1;
}
static swig_lua_attribute swig_IVertexStream_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IVertexStream_methods[]= {
    { "reset", _wrap_IVertexStream_reset},
    { "add", _wrap_IVertexStream_add},
    { "addVerxtxData", _wrap_IVertexStream_addVerxtxData},
    { "setSize", _wrap_IVertexStream_setSize},
    { "getSize", _wrap_IVertexStream_getSize},
    { "accept", _wrap_IVertexStream_accept},
    {0,0}
};
static swig_lua_method swig_IVertexStream_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IVertexStream_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IVertexStream_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_UNSIGNED_BYTE", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_BYTE)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_UNSIGNED_SHORT", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_SHORT)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_UNSIGNED_INT", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_INT)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_INT", open::IVertexStream::VERXTEXDATATYPE_INT)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_FLOAT", open::IVertexStream::VERXTEXDATATYPE_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_UNSIGNED_INT2", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_INT2)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_UNSIGNED_INT3", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_INT3)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_UNSIGNED_INT4", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_INT4)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_INT2", open::IVertexStream::VERXTEXDATATYPE_INT2)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_INT3", open::IVertexStream::VERXTEXDATATYPE_INT3)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_INT4", open::IVertexStream::VERXTEXDATATYPE_INT4)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_FLOAT2", open::IVertexStream::VERXTEXDATATYPE_FLOAT2)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_FLOAT3", open::IVertexStream::VERXTEXDATATYPE_FLOAT3)},
    {SWIG_LUA_CONSTTAB_INT("VERXTEXDATATYPE_FLOAT4", open::IVertexStream::VERXTEXDATATYPE_FLOAT4)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_POSITOIN", open::IVertexStream::VERXT_POSITOIN)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_NORMAL", open::IVertexStream::VERXT_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_COOR", open::IVertexStream::VERXT_COOR)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_TEXTURECOORD0", open::IVertexStream::VERXT_TEXTURECOORD0)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_TEXTURECOORD1", open::IVertexStream::VERXT_TEXTURECOORD1)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_TEXTURECOORD2", open::IVertexStream::VERXT_TEXTURECOORD2)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_TEXTURECOORD3", open::IVertexStream::VERXT_TEXTURECOORD3)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_INSTANCE0", open::IVertexStream::VERXT_INSTANCE0)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_INSTANCE1", open::IVertexStream::VERXT_INSTANCE1)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_INSTANCE2", open::IVertexStream::VERXT_INSTANCE2)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_INSTANCE3", open::IVertexStream::VERXT_INSTANCE3)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_INSTANCE4", open::IVertexStream::VERXT_INSTANCE4)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_INSTANCE5", open::IVertexStream::VERXT_INSTANCE5)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_INSTANCE6", open::IVertexStream::VERXT_INSTANCE6)},
    {SWIG_LUA_CONSTTAB_INT("VERXT_INSTANCE7", open::IVertexStream::VERXT_INSTANCE7)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IVertexStream_Sf_SwigStatic_methods[]= {
    { "genVertexType", _wrap_IVertexStream_genVertexType},
    {0,0}
};
static swig_lua_class* swig_IVertexStream_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IVertexStream_Sf_SwigStatic = {
    "IVertexStream",
    swig_IVertexStream_Sf_SwigStatic_methods,
    swig_IVertexStream_Sf_SwigStatic_attributes,
    swig_IVertexStream_Sf_SwigStatic_constants,
    swig_IVertexStream_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IVertexStream_bases[] = {0};
static const char *swig_IVertexStream_base_names[] = {0};
static swig_lua_class _wrap_class_IVertexStream = { "IVertexStream", "IVertexStream", &SWIGTYPE_p_open__IVertexStream,0, swig_delete_IVertexStream, swig_IVertexStream_methods, swig_IVertexStream_attributes, &swig_IVertexStream_Sf_SwigStatic, swig_IVertexStream_meta, swig_IVertexStream_bases, swig_IVertexStream_base_names };

static int _wrap_IVertextArray_reset(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertextArray *arg1 = (open::IVertextArray *) 0 ;
  
  SWIG_check_num_args("open::IVertextArray::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertextArray::reset",1,"open::IVertextArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertextArray,0))){
    SWIG_fail_ptr("IVertextArray_reset",1,SWIGTYPE_p_open__IVertextArray);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertextArray_resetVertexNum(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertextArray *arg1 = (open::IVertextArray *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::IVertextArray::resetVertexNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertextArray::resetVertexNum",1,"open::IVertextArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IVertextArray::resetVertexNum",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertextArray,0))){
    SWIG_fail_ptr("IVertextArray_resetVertexNum",1,SWIGTYPE_p_open__IVertextArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->resetVertexNum(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertextArray_getVertexStream(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertextArray *arg1 = (open::IVertextArray *) 0 ;
  uint32 arg2 ;
  open::IVertexStream *result = 0 ;
  
  SWIG_check_num_args("open::IVertextArray::getVertexStream",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertextArray::getVertexStream",1,"open::IVertextArray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IVertextArray::getVertexStream",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertextArray,0))){
    SWIG_fail_ptr("IVertextArray_getVertexStream",1,SWIGTYPE_p_open__IVertextArray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  result = (open::IVertexStream *)(arg1)->getVertexStream(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IVertexStream,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertextArray_getInstanceStream(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertextArray *arg1 = (open::IVertextArray *) 0 ;
  open::IVertexStream *result = 0 ;
  
  SWIG_check_num_args("open::IVertextArray::getInstanceStream",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertextArray::getInstanceStream",1,"open::IVertextArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertextArray,0))){
    SWIG_fail_ptr("IVertextArray_getInstanceStream",1,SWIGTYPE_p_open__IVertextArray);
  }
  
  result = (open::IVertexStream *)(arg1)->getInstanceStream();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IVertexStream,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IVertextArray_accept(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertextArray *arg1 = (open::IVertextArray *) 0 ;
  open::IVertexArrayObject *arg2 = (open::IVertexArrayObject *) 0 ;
  
  SWIG_check_num_args("open::IVertextArray::accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IVertextArray::accept",1,"open::IVertextArray const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IVertextArray::accept",2,"open::IVertexArrayObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IVertextArray,0))){
    SWIG_fail_ptr("IVertextArray_accept",1,SWIGTYPE_p_open__IVertextArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IVertextArray_accept",2,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  ((open::IVertextArray const *)arg1)->accept(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IVertextArray(void *obj) {
open::IVertextArray *arg1 = (open::IVertextArray *) obj;
delete arg1;
}
static swig_lua_attribute swig_IVertextArray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IVertextArray_methods[]= {
    { "reset", _wrap_IVertextArray_reset},
    { "resetVertexNum", _wrap_IVertextArray_resetVertexNum},
    { "getVertexStream", _wrap_IVertextArray_getVertexStream},
    { "getInstanceStream", _wrap_IVertextArray_getInstanceStream},
    { "accept", _wrap_IVertextArray_accept},
    {0,0}
};
static swig_lua_method swig_IVertextArray_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IVertextArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IVertextArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IVertextArray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IVertextArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IVertextArray_Sf_SwigStatic = {
    "IVertextArray",
    swig_IVertextArray_Sf_SwigStatic_methods,
    swig_IVertextArray_Sf_SwigStatic_attributes,
    swig_IVertextArray_Sf_SwigStatic_constants,
    swig_IVertextArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IVertextArray_bases[] = {0};
static const char *swig_IVertextArray_base_names[] = {0};
static swig_lua_class _wrap_class_IVertextArray = { "IVertextArray", "IVertextArray", &SWIGTYPE_p_open__IVertextArray,0, swig_delete_IVertextArray, swig_IVertextArray_methods, swig_IVertextArray_attributes, &swig_IVertextArray_Sf_SwigStatic, swig_IVertextArray_meta, swig_IVertextArray_bases, swig_IVertextArray_base_names };

static int _wrap_IProgram_loadFromFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::IProgram::loadFromFile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::loadFromFile",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::loadFromFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::IProgram::loadFromFile",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("open::IProgram::loadFromFile",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("open::IProgram::loadFromFile",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_loadFromFile",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)(arg1)->loadFromFile((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_loadFromFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::IProgram::loadFromFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::loadFromFile",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::loadFromFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::IProgram::loadFromFile",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("open::IProgram::loadFromFile",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_loadFromFile",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (bool)(arg1)->loadFromFile((char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_loadFromFile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::IProgram::loadFromFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::loadFromFile",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::loadFromFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::IProgram::loadFromFile",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_loadFromFile",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->loadFromFile((char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_loadFromFile(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IProgram_loadFromFile__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_IProgram_loadFromFile__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_IProgram_loadFromFile__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IProgram_loadFromFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IProgram::loadFromFile(char const *,char const *,char const *,char const *)\n"
    "    open::IProgram::loadFromFile(char const *,char const *,char const *)\n"
    "    open::IProgram::loadFromFile(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_IProgram_loadProgramFromBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::IProgram::loadProgramFromBuffer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",4,"char const *");
  if(!SWIG_lua_isnilstring(L,5)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",5,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_loadProgramFromBuffer",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (char *)lua_tostring(L, 5);
  result = (bool)(arg1)->loadProgramFromBuffer((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_loadProgramFromBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::IProgram::loadProgramFromBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",3,"char const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_loadProgramFromBuffer",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  result = (bool)(arg1)->loadProgramFromBuffer((char const *)arg2,(char const *)arg3,(char const *)arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_loadProgramFromBuffer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::IProgram::loadProgramFromBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::IProgram::loadProgramFromBuffer",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_loadProgramFromBuffer",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->loadProgramFromBuffer((char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_loadProgramFromBuffer(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_IProgram_loadProgramFromBuffer__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_IProgram_loadProgramFromBuffer__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = SWIG_lua_isnilstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_IProgram_loadProgramFromBuffer__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IProgram_loadProgramFromBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IProgram::loadProgramFromBuffer(char const *,char const *,char const *,char const *)\n"
    "    open::IProgram::loadProgramFromBuffer(char const *,char const *,char const *)\n"
    "    open::IProgram::loadProgramFromBuffer(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_IProgram_setFragDataLocation(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  int32 arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("open::IProgram::setFragDataLocation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setFragDataLocation",1,"open::IProgram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IProgram::setFragDataLocation",2,"int32");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::IProgram::setFragDataLocation",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setFragDataLocation",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setFragDataLocation(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_getUniformID(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::IProgram::getUniformID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::getUniformID",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::getUniformID",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_getUniformID",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int32)(arg1)->getUniformID((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniformi__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  
  SWIG_check_num_args("open::IProgram::setUniformi",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniformi",1,"open::IProgram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IProgram::setUniformi",2,"int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IProgram::setUniformi",3,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniformi",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  arg3 = (int32)lua_tonumber(L, 3);
  (arg1)->setUniformi(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniformf__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  int32 arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("open::IProgram::setUniformf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniformf",1,"open::IProgram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IProgram::setUniformf",2,"int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IProgram::setUniformf",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniformf",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setUniformf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniform2f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  int32 arg2 ;
  Real2 *arg3 = 0 ;
  
  SWIG_check_num_args("open::IProgram::setUniform2f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniform2f",1,"open::IProgram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IProgram::setUniform2f",2,"int32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::IProgram::setUniform2f",3,"Real2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniform2f",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Real2,0))){
    SWIG_fail_ptr("IProgram_setUniform2f",3,SWIGTYPE_p_Real2);
  }
  
  (arg1)->setUniform2f(arg2,(Real2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniform3f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  int32 arg2 ;
  Real3 *arg3 = 0 ;
  
  SWIG_check_num_args("open::IProgram::setUniform3f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniform3f",1,"open::IProgram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IProgram::setUniform3f",2,"int32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::IProgram::setUniform3f",3,"Real3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniform3f",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Real3,0))){
    SWIG_fail_ptr("IProgram_setUniform3f",3,SWIGTYPE_p_Real3);
  }
  
  (arg1)->setUniform3f(arg2,(Real3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniform4f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  int32 arg2 ;
  Real4 *arg3 = 0 ;
  
  SWIG_check_num_args("open::IProgram::setUniform4f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniform4f",1,"open::IProgram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IProgram::setUniform4f",2,"int32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::IProgram::setUniform4f",3,"Real4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniform4f",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Real4,0))){
    SWIG_fail_ptr("IProgram_setUniform4f",3,SWIGTYPE_p_Real4);
  }
  
  (arg1)->setUniform4f(arg2,(Real4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniform16f__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  int32 arg2 ;
  RMatrix *arg3 = 0 ;
  
  SWIG_check_num_args("open::IProgram::setUniform16f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniform16f",1,"open::IProgram *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IProgram::setUniform16f",2,"int32");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::IProgram::setUniform16f",3,"RMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniform16f",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_RMatrix,0))){
    SWIG_fail_ptr("IProgram_setUniform16f",3,SWIGTYPE_p_RMatrix);
  }
  
  (arg1)->setUniform16f(arg2,(RMatrix const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniformi__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  int32 arg3 ;
  
  SWIG_check_num_args("open::IProgram::setUniformi",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniformi",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::setUniformi",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IProgram::setUniformi",3,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniformi",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int32)lua_tonumber(L, 3);
  (arg1)->setUniformi((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniformi(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IProgram_setUniformi__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IProgram_setUniformi__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IProgram_setUniformi'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IProgram::setUniformi(int32,int32)\n"
    "    open::IProgram::setUniformi(char const *,int32)\n");
  lua_error(L);return 0;
}


static int _wrap_IProgram_setUniformf__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("open::IProgram::setUniformf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniformf",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::setUniformf",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IProgram::setUniformf",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniformf",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setUniformf((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniformf(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IProgram_setUniformf__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IProgram_setUniformf__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IProgram_setUniformf'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IProgram::setUniformf(int32,float)\n"
    "    open::IProgram::setUniformf(char const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_IProgram_setUniform2f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  Real2 *arg3 = 0 ;
  
  SWIG_check_num_args("open::IProgram::setUniform2f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniform2f",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::setUniform2f",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::IProgram::setUniform2f",3,"Real2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniform2f",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Real2,0))){
    SWIG_fail_ptr("IProgram_setUniform2f",3,SWIGTYPE_p_Real2);
  }
  
  (arg1)->setUniform2f((char const *)arg2,(Real2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniform2f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Real2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IProgram_setUniform2f__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Real2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IProgram_setUniform2f__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IProgram_setUniform2f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IProgram::setUniform2f(int32,Real2 const &)\n"
    "    open::IProgram::setUniform2f(char const *,Real2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IProgram_setUniform3f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  Real3 *arg3 = 0 ;
  
  SWIG_check_num_args("open::IProgram::setUniform3f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniform3f",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::setUniform3f",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::IProgram::setUniform3f",3,"Real3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniform3f",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Real3,0))){
    SWIG_fail_ptr("IProgram_setUniform3f",3,SWIGTYPE_p_Real3);
  }
  
  (arg1)->setUniform3f((char const *)arg2,(Real3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniform3f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Real3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IProgram_setUniform3f__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Real3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IProgram_setUniform3f__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IProgram_setUniform3f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IProgram::setUniform3f(int32,Real3 const &)\n"
    "    open::IProgram::setUniform3f(char const *,Real3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IProgram_setUniform4f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  Real4 *arg3 = 0 ;
  
  SWIG_check_num_args("open::IProgram::setUniform4f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniform4f",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::setUniform4f",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::IProgram::setUniform4f",3,"Real4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniform4f",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Real4,0))){
    SWIG_fail_ptr("IProgram_setUniform4f",3,SWIGTYPE_p_Real4);
  }
  
  (arg1)->setUniform4f((char const *)arg2,(Real4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniform4f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Real4, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IProgram_setUniform4f__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Real4, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IProgram_setUniform4f__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IProgram_setUniform4f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IProgram::setUniform4f(int32,Real4 const &)\n"
    "    open::IProgram::setUniform4f(char const *,Real4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IProgram_setUniform16f__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *arg1 = (open::IProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  RMatrix *arg3 = 0 ;
  
  SWIG_check_num_args("open::IProgram::setUniform16f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IProgram::setUniform16f",1,"open::IProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IProgram::setUniform16f",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::IProgram::setUniform16f",3,"RMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IProgram_setUniform16f",1,SWIGTYPE_p_open__IProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_RMatrix,0))){
    SWIG_fail_ptr("IProgram_setUniform16f",3,SWIGTYPE_p_RMatrix);
  }
  
  (arg1)->setUniform16f((char const *)arg2,(RMatrix const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IProgram_setUniform16f(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_RMatrix, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IProgram_setUniform16f__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_RMatrix, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IProgram_setUniform16f__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IProgram_setUniform16f'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IProgram::setUniform16f(int32,RMatrix const &)\n"
    "    open::IProgram::setUniform16f(char const *,RMatrix const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_IProgram(void *obj) {
open::IProgram *arg1 = (open::IProgram *) obj;
delete arg1;
}
static swig_lua_attribute swig_IProgram_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IProgram_methods[]= {
    { "loadFromFile", _wrap_IProgram_loadFromFile},
    { "loadProgramFromBuffer", _wrap_IProgram_loadProgramFromBuffer},
    { "setFragDataLocation", _wrap_IProgram_setFragDataLocation},
    { "getUniformID", _wrap_IProgram_getUniformID},
    { "setUniformi", _wrap_IProgram_setUniformi},
    { "setUniformf", _wrap_IProgram_setUniformf},
    { "setUniform2f", _wrap_IProgram_setUniform2f},
    { "setUniform3f", _wrap_IProgram_setUniform3f},
    { "setUniform4f", _wrap_IProgram_setUniform4f},
    { "setUniform16f", _wrap_IProgram_setUniform16f},
    {0,0}
};
static swig_lua_method swig_IProgram_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IProgram_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IProgram_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IProgram_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IProgram_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IProgram_Sf_SwigStatic = {
    "IProgram",
    swig_IProgram_Sf_SwigStatic_methods,
    swig_IProgram_Sf_SwigStatic_attributes,
    swig_IProgram_Sf_SwigStatic_constants,
    swig_IProgram_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IProgram_bases[] = {0};
static const char *swig_IProgram_base_names[] = {0};
static swig_lua_class _wrap_class_IProgram = { "IProgram", "IProgram", &SWIGTYPE_p_open__IProgram,0, swig_delete_IProgram, swig_IProgram_methods, swig_IProgram_attributes, &swig_IProgram_Sf_SwigStatic, swig_IProgram_meta, swig_IProgram_bases, swig_IProgram_base_names };

static int _wrap_new_Uniform(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  open::IProgram *arg2 = (open::IProgram *) 0 ;
  open::Uniform *result = 0 ;
  
  SWIG_check_num_args("open::Uniform::Uniform",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::Uniform::Uniform",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::Uniform::Uniform",2,"open::IProgram *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("new_Uniform",2,SWIGTYPE_p_open__IProgram);
  }
  
  result = (open::Uniform *)new open::Uniform((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Uniform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Uniform(void *obj) {
open::Uniform *arg1 = (open::Uniform *) obj;
delete arg1;
}
static int _proxy__wrap_new_Uniform(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Uniform);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Uniform_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Uniform_methods[]= {
    {0,0}
};
static swig_lua_method swig_Uniform_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Uniform_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Uniform_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Uniform_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Uniform_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Uniform_Sf_SwigStatic = {
    "Uniform",
    swig_Uniform_Sf_SwigStatic_methods,
    swig_Uniform_Sf_SwigStatic_attributes,
    swig_Uniform_Sf_SwigStatic_constants,
    swig_Uniform_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Uniform_bases[] = {0};
static const char *swig_Uniform_base_names[] = {0};
static swig_lua_class _wrap_class_Uniform = { "Uniform", "Uniform", &SWIGTYPE_p_open__Uniform,_proxy__wrap_new_Uniform, swig_delete_Uniform, swig_Uniform_methods, swig_Uniform_attributes, &swig_Uniform_Sf_SwigStatic, swig_Uniform_meta, swig_Uniform_bases, swig_Uniform_base_names };

static int _wrap_ITexture_addRef(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::ITexture::addRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::addRef",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_addRef",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (int32)(arg1)->addRef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_release(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::ITexture::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::release",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_release",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (int32)(arg1)->release();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_releaseRefCountOnly(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  
  SWIG_check_num_args("open::ITexture::releaseRefCountOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::releaseRefCountOnly",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_releaseRefCountOnly",1,SWIGTYPE_p_open__ITexture);
  }
  
  (arg1)->releaseRefCountOnly();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::ITexture::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::getWidth",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_getWidth",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (int32)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::ITexture::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::getHeight",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_getHeight",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (int32)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_getDepth(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::ITexture::getDepth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::getDepth",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_getDepth",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (int32)(arg1)->getDepth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_getDataType(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  open::DataType result;
  
  SWIG_check_num_args("open::ITexture::getDataType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::getDataType",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_getDataType",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (open::DataType)(arg1)->getDataType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_getPixelInternalFormat(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  open::PixelInternalFormat result;
  
  SWIG_check_num_args("open::ITexture::getPixelInternalFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::getPixelInternalFormat",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_getPixelInternalFormat",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (open::PixelInternalFormat)(arg1)->getPixelInternalFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_getPixeFormat(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  open::PixelFormat result;
  
  SWIG_check_num_args("open::ITexture::getPixeFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::getPixeFormat",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_getPixeFormat",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (open::PixelFormat)(arg1)->getPixeFormat();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_alloc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  open::PixelInternalFormat arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  open::PixelFormat arg6 ;
  open::DataType arg7 ;
  void *arg8 = (void *) 0 ;
  int32 arg9 ;
  
  SWIG_check_num_args("open::ITexture::alloc",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::alloc",1,"open::ITexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITexture::alloc",2,"open::PixelInternalFormat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::ITexture::alloc",3,"int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::ITexture::alloc",4,"int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::ITexture::alloc",5,"int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::ITexture::alloc",6,"open::PixelFormat");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("open::ITexture::alloc",7,"open::DataType");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("open::ITexture::alloc",8,"void *");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("open::ITexture::alloc",9,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_alloc",1,SWIGTYPE_p_open__ITexture);
  }
  
  arg2 = (open::PixelInternalFormat)(int)lua_tonumber(L, 2);
  arg3 = (int32)lua_tonumber(L, 3);
  arg4 = (int32)lua_tonumber(L, 4);
  arg5 = (int32)lua_tonumber(L, 5);
  arg6 = (open::PixelFormat)(int)lua_tonumber(L, 6);
  arg7 = (open::DataType)(int)lua_tonumber(L, 7);
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"ITexture_alloc");
  arg9 = (int32)lua_tonumber(L, 9);
  (arg1)->alloc(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_alloc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  open::PixelInternalFormat arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  open::PixelFormat arg6 ;
  open::DataType arg7 ;
  void *arg8 = (void *) 0 ;
  
  SWIG_check_num_args("open::ITexture::alloc",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::alloc",1,"open::ITexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITexture::alloc",2,"open::PixelInternalFormat");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::ITexture::alloc",3,"int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::ITexture::alloc",4,"int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::ITexture::alloc",5,"int32");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::ITexture::alloc",6,"open::PixelFormat");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("open::ITexture::alloc",7,"open::DataType");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("open::ITexture::alloc",8,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_alloc",1,SWIGTYPE_p_open__ITexture);
  }
  
  arg2 = (open::PixelInternalFormat)(int)lua_tonumber(L, 2);
  arg3 = (int32)lua_tonumber(L, 3);
  arg4 = (int32)lua_tonumber(L, 4);
  arg5 = (int32)lua_tonumber(L, 5);
  arg6 = (open::PixelFormat)(int)lua_tonumber(L, 6);
  arg7 = (open::DataType)(int)lua_tonumber(L, 7);
  arg8=(void *)SWIG_MustGetPtr(L,8,0,0,8,"ITexture_alloc");
  (arg1)->alloc(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_alloc(lua_State* L) {
  int argc;
  int argv[10]={
    1,2,3,4,5,6,7,8,9,10
  };
  
  argc = lua_gettop(L);
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__ITexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, 0, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_ITexture_alloc__SWIG_1(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__ITexture, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, 0, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_ITexture_alloc__SWIG_0(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ITexture_alloc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::ITexture::alloc(open::PixelInternalFormat,int32,int32,int32,open::PixelFormat,open::DataType,void *,int32)\n"
    "    open::ITexture::alloc(open::PixelInternalFormat,int32,int32,int32,open::PixelFormat,open::DataType,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_ITexture_subLoad(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  void *arg6 = (void *) 0 ;
  
  SWIG_check_num_args("open::ITexture::subLoad",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::subLoad",1,"open::ITexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITexture::subLoad",2,"int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::ITexture::subLoad",3,"int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::ITexture::subLoad",4,"int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::ITexture::subLoad",5,"int32");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("open::ITexture::subLoad",6,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_subLoad",1,SWIGTYPE_p_open__ITexture);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  arg3 = (int32)lua_tonumber(L, 3);
  arg4 = (int32)lua_tonumber(L, 4);
  arg5 = (int32)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"ITexture_subLoad");
  (arg1)->subLoad(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_bind(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  uint32 arg2 ;
  bool result;
  
  SWIG_check_num_args("open::ITexture::bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::bind",1,"open::ITexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITexture::bind",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_bind",1,SWIGTYPE_p_open__ITexture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  result = (bool)(arg1)->bind(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_apply(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::ITexture::apply",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::apply",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_apply",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (bool)(arg1)->apply();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITexture_getHandle(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *arg1 = (open::ITexture *) 0 ;
  Handle result;
  
  SWIG_check_num_args("open::ITexture::getHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITexture::getHandle",1,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITexture_getHandle",1,SWIGTYPE_p_open__ITexture);
  }
  
  result = (Handle)(arg1)->getHandle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ITexture(void *obj) {
open::ITexture *arg1 = (open::ITexture *) obj;
delete arg1;
}
static swig_lua_attribute swig_ITexture_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ITexture_methods[]= {
    { "addRef", _wrap_ITexture_addRef},
    { "release", _wrap_ITexture_release},
    { "releaseRefCountOnly", _wrap_ITexture_releaseRefCountOnly},
    { "getWidth", _wrap_ITexture_getWidth},
    { "getHeight", _wrap_ITexture_getHeight},
    { "getDepth", _wrap_ITexture_getDepth},
    { "getDataType", _wrap_ITexture_getDataType},
    { "getPixelInternalFormat", _wrap_ITexture_getPixelInternalFormat},
    { "getPixeFormat", _wrap_ITexture_getPixeFormat},
    { "alloc", _wrap_ITexture_alloc},
    { "subLoad", _wrap_ITexture_subLoad},
    { "bind", _wrap_ITexture_bind},
    { "apply", _wrap_ITexture_apply},
    { "getHandle", _wrap_ITexture_getHandle},
    {0,0}
};
static swig_lua_method swig_ITexture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ITexture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ITexture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ITexture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ITexture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ITexture_Sf_SwigStatic = {
    "ITexture",
    swig_ITexture_Sf_SwigStatic_methods,
    swig_ITexture_Sf_SwigStatic_attributes,
    swig_ITexture_Sf_SwigStatic_constants,
    swig_ITexture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ITexture_bases[] = {0};
static const char *swig_ITexture_base_names[] = {0};
static swig_lua_class _wrap_class_ITexture = { "ITexture", "ITexture", &SWIGTYPE_p_open__ITexture,0, swig_delete_ITexture, swig_ITexture_methods, swig_ITexture_attributes, &swig_ITexture_Sf_SwigStatic, swig_ITexture_meta, swig_ITexture_bases, swig_ITexture_base_names };

static int _wrap_ITextureUnit_addRef(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::ITextureUnit::addRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::addRef",1,"open::ITextureUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_addRef",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  result = (int32)(arg1)->addRef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_release(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::ITextureUnit::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::release",1,"open::ITextureUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_release",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  result = (int32)(arg1)->release();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_releaseRefCountOnly(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  
  SWIG_check_num_args("open::ITextureUnit::releaseRefCountOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::releaseRefCountOnly",1,"open::ITextureUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_releaseRefCountOnly",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  (arg1)->releaseRefCountOnly();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_setTexture(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  open::ITexture *arg2 = (open::ITexture *) 0 ;
  
  SWIG_check_num_args("open::ITextureUnit::setTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::setTexture",1,"open::ITextureUnit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::ITextureUnit::setTexture",2,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_setTexture",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("ITextureUnit_setTexture",2,SWIGTYPE_p_open__ITexture);
  }
  
  (arg1)->setTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_setWrap(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  open::TextureWrapParameter arg2 ;
  open::TextureWrapMode arg3 ;
  
  SWIG_check_num_args("open::ITextureUnit::setWrap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::setWrap",1,"open::ITextureUnit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnit::setWrap",2,"open::TextureWrapParameter");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::ITextureUnit::setWrap",3,"open::TextureWrapMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_setWrap",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  arg2 = (open::TextureWrapParameter)(int)lua_tonumber(L, 2);
  arg3 = (open::TextureWrapMode)(int)lua_tonumber(L, 3);
  (arg1)->setWrap(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_setFilter(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  open::TextureFilterParameter arg2 ;
  open::TextureFilterMode arg3 ;
  
  SWIG_check_num_args("open::ITextureUnit::setFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::setFilter",1,"open::ITextureUnit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnit::setFilter",2,"open::TextureFilterParameter");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::ITextureUnit::setFilter",3,"open::TextureFilterMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_setFilter",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  arg2 = (open::TextureFilterParameter)(int)lua_tonumber(L, 2);
  arg3 = (open::TextureFilterMode)(int)lua_tonumber(L, 3);
  (arg1)->setFilter(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_setBorderColor(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  Real4 *arg2 = 0 ;
  
  SWIG_check_num_args("open::ITextureUnit::setBorderColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::setBorderColor",1,"open::ITextureUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::ITextureUnit::setBorderColor",2,"Real4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_setBorderColor",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Real4,0))){
    SWIG_fail_ptr("ITextureUnit_setBorderColor",2,SWIGTYPE_p_Real4);
  }
  
  (arg1)->setBorderColor((Real4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_setMatrix(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  RMatrix *arg2 = 0 ;
  
  SWIG_check_num_args("open::ITextureUnit::setMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::setMatrix",1,"open::ITextureUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::ITextureUnit::setMatrix",2,"RMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_setMatrix",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RMatrix,0))){
    SWIG_fail_ptr("ITextureUnit_setMatrix",2,SWIGTYPE_p_RMatrix);
  }
  
  (arg1)->setMatrix((RMatrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_enable(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("open::ITextureUnit::enable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::enable",1,"open::ITextureUnit *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("open::ITextureUnit::enable",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_enable",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->enable(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_getEnable(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::ITextureUnit::getEnable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::getEnable",1,"open::ITextureUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_getEnable",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  result = (bool)(arg1)->getEnable();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_getTexture(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  open::ITexture *result = 0 ;
  
  SWIG_check_num_args("open::ITextureUnit::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::getTexture",1,"open::ITextureUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_getTexture",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  result = (open::ITexture *)(arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITexture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_getWrap(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  open::TextureWrapParameter arg2 ;
  open::TextureWrapMode result;
  
  SWIG_check_num_args("open::ITextureUnit::getWrap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::getWrap",1,"open::ITextureUnit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnit::getWrap",2,"open::TextureWrapParameter");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_getWrap",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  arg2 = (open::TextureWrapParameter)(int)lua_tonumber(L, 2);
  result = (open::TextureWrapMode)(arg1)->getWrap(arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_getFilter(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  open::TextureFilterParameter arg2 ;
  open::TextureFilterMode result;
  
  SWIG_check_num_args("open::ITextureUnit::getFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::getFilter",1,"open::ITextureUnit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnit::getFilter",2,"open::TextureFilterParameter");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_getFilter",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  arg2 = (open::TextureFilterParameter)(int)lua_tonumber(L, 2);
  result = (open::TextureFilterMode)(arg1)->getFilter(arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_getBorderColor(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  Real4 *result = 0 ;
  
  SWIG_check_num_args("open::ITextureUnit::getBorderColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::getBorderColor",1,"open::ITextureUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_getBorderColor",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  result = (Real4 *) &(arg1)->getBorderColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Real4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnit_getMatrix(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *arg1 = (open::ITextureUnit *) 0 ;
  RMatrix *result = 0 ;
  
  SWIG_check_num_args("open::ITextureUnit::getMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnit::getMatrix",1,"open::ITextureUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnit_getMatrix",1,SWIGTYPE_p_open__ITextureUnit);
  }
  
  result = (RMatrix *) &(arg1)->getMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ITextureUnit(void *obj) {
open::ITextureUnit *arg1 = (open::ITextureUnit *) obj;
delete arg1;
}
static swig_lua_attribute swig_ITextureUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ITextureUnit_methods[]= {
    { "addRef", _wrap_ITextureUnit_addRef},
    { "release", _wrap_ITextureUnit_release},
    { "releaseRefCountOnly", _wrap_ITextureUnit_releaseRefCountOnly},
    { "setTexture", _wrap_ITextureUnit_setTexture},
    { "setWrap", _wrap_ITextureUnit_setWrap},
    { "setFilter", _wrap_ITextureUnit_setFilter},
    { "setBorderColor", _wrap_ITextureUnit_setBorderColor},
    { "setMatrix", _wrap_ITextureUnit_setMatrix},
    { "enable", _wrap_ITextureUnit_enable},
    { "getEnable", _wrap_ITextureUnit_getEnable},
    { "getTexture", _wrap_ITextureUnit_getTexture},
    { "getWrap", _wrap_ITextureUnit_getWrap},
    { "getFilter", _wrap_ITextureUnit_getFilter},
    { "getBorderColor", _wrap_ITextureUnit_getBorderColor},
    { "getMatrix", _wrap_ITextureUnit_getMatrix},
    {0,0}
};
static swig_lua_method swig_ITextureUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ITextureUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ITextureUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ITextureUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ITextureUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ITextureUnit_Sf_SwigStatic = {
    "ITextureUnit",
    swig_ITextureUnit_Sf_SwigStatic_methods,
    swig_ITextureUnit_Sf_SwigStatic_attributes,
    swig_ITextureUnit_Sf_SwigStatic_constants,
    swig_ITextureUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ITextureUnit_bases[] = {0};
static const char *swig_ITextureUnit_base_names[] = {0};
static swig_lua_class _wrap_class_ITextureUnit = { "ITextureUnit", "ITextureUnit", &SWIGTYPE_p_open__ITextureUnit,0, swig_delete_ITextureUnit, swig_ITextureUnit_methods, swig_ITextureUnit_attributes, &swig_ITextureUnit_Sf_SwigStatic, swig_ITextureUnit_meta, swig_ITextureUnit_bases, swig_ITextureUnit_base_names };

static int _wrap_ITextureUnitSet_createTextureUnit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  open::ITextureUnit *result = 0 ;
  
  SWIG_check_num_args("open::ITextureUnitSet::createTextureUnit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnitSet::createTextureUnit",1,"open::ITextureUnitSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnitSet::createTextureUnit",2,"uint8");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::ITextureUnitSet::createTextureUnit",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("ITextureUnitSet_createTextureUnit",1,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (open::ITextureUnit *)(arg1)->createTextureUnit(arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITextureUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnitSet_createTextureUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) 0 ;
  uint8 arg2 ;
  open::ITextureUnit *result = 0 ;
  
  SWIG_check_num_args("open::ITextureUnitSet::createTextureUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnitSet::createTextureUnit",1,"open::ITextureUnitSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnitSet::createTextureUnit",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("ITextureUnitSet_createTextureUnit",1,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  result = (open::ITextureUnit *)(arg1)->createTextureUnit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITextureUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnitSet_createTextureUnit(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__ITextureUnitSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ITextureUnitSet_createTextureUnit__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__ITextureUnitSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_ITextureUnitSet_createTextureUnit__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ITextureUnitSet_createTextureUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::ITextureUnitSet::createTextureUnit(uint8,char const *)\n"
    "    open::ITextureUnitSet::createTextureUnit(uint8)\n");
  lua_error(L);return 0;
}


static int _wrap_ITextureUnitSet_getTextureUnit(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) 0 ;
  uint8 arg2 ;
  open::ITextureUnit *result = 0 ;
  
  SWIG_check_num_args("open::ITextureUnitSet::getTextureUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnitSet::getTextureUnit",1,"open::ITextureUnitSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnitSet::getTextureUnit",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("ITextureUnitSet_getTextureUnit",1,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  result = (open::ITextureUnit *)(arg1)->getTextureUnit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITextureUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnitSet_hasTextureUnit(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) 0 ;
  uint8 arg2 ;
  bool result;
  
  SWIG_check_num_args("open::ITextureUnitSet::hasTextureUnit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnitSet::hasTextureUnit",1,"open::ITextureUnitSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnitSet::hasTextureUnit",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("ITextureUnitSet_hasTextureUnit",1,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  result = (bool)(arg1)->hasTextureUnit(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnitSet_setTextureUnitNam(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("open::ITextureUnitSet::setTextureUnitNam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnitSet::setTextureUnitNam",1,"open::ITextureUnitSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnitSet::setTextureUnitNam",2,"uint8");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::ITextureUnitSet::setTextureUnitNam",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("ITextureUnitSet_setTextureUnitNam",1,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  (arg1)->setTextureUnitNam(arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnitSet_getTextureUnitNam(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) 0 ;
  uint8 arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("open::ITextureUnitSet::getTextureUnitNam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnitSet::getTextureUnitNam",1,"open::ITextureUnitSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnitSet::getTextureUnitNam",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("ITextureUnitSet_getTextureUnitNam",1,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  result = (char *)(arg1)->getTextureUnitNam(arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnitSet_replace(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) 0 ;
  uint8 arg2 ;
  open::ITextureUnit *arg3 = (open::ITextureUnit *) 0 ;
  
  SWIG_check_num_args("open::ITextureUnitSet::replace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnitSet::replace",1,"open::ITextureUnitSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ITextureUnitSet::replace",2,"uint8");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("open::ITextureUnitSet::replace",3,"open::ITextureUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("ITextureUnitSet_replace",1,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_open__ITextureUnit,0))){
    SWIG_fail_ptr("ITextureUnitSet_replace",3,SWIGTYPE_p_open__ITextureUnit);
  }
  
  (arg1)->replace(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ITextureUnitSet_getVaildUnitNum(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::ITextureUnitSet::getVaildUnitNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ITextureUnitSet::getVaildUnitNum",1,"open::ITextureUnitSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("ITextureUnitSet_getVaildUnitNum",1,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  result = (int32)(arg1)->getVaildUnitNum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ITextureUnitSet(void *obj) {
open::ITextureUnitSet *arg1 = (open::ITextureUnitSet *) obj;
delete arg1;
}
static swig_lua_attribute swig_ITextureUnitSet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ITextureUnitSet_methods[]= {
    { "createTextureUnit", _wrap_ITextureUnitSet_createTextureUnit},
    { "getTextureUnit", _wrap_ITextureUnitSet_getTextureUnit},
    { "hasTextureUnit", _wrap_ITextureUnitSet_hasTextureUnit},
    { "setTextureUnitNam", _wrap_ITextureUnitSet_setTextureUnitNam},
    { "getTextureUnitNam", _wrap_ITextureUnitSet_getTextureUnitNam},
    { "replace", _wrap_ITextureUnitSet_replace},
    { "getVaildUnitNum", _wrap_ITextureUnitSet_getVaildUnitNum},
    {0,0}
};
static swig_lua_method swig_ITextureUnitSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ITextureUnitSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ITextureUnitSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ITextureUnitSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ITextureUnitSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ITextureUnitSet_Sf_SwigStatic = {
    "ITextureUnitSet",
    swig_ITextureUnitSet_Sf_SwigStatic_methods,
    swig_ITextureUnitSet_Sf_SwigStatic_attributes,
    swig_ITextureUnitSet_Sf_SwigStatic_constants,
    swig_ITextureUnitSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ITextureUnitSet_bases[] = {0};
static const char *swig_ITextureUnitSet_base_names[] = {0};
static swig_lua_class _wrap_class_ITextureUnitSet = { "ITextureUnitSet", "ITextureUnitSet", &SWIGTYPE_p_open__ITextureUnitSet,0, swig_delete_ITextureUnitSet, swig_ITextureUnitSet_methods, swig_ITextureUnitSet_attributes, &swig_ITextureUnitSet_Sf_SwigStatic, swig_ITextureUnitSet_meta, swig_ITextureUnitSet_bases, swig_ITextureUnitSet_base_names };

static int _wrap_new_RenderStateSet(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *result = 0 ;
  
  SWIG_check_num_args("open::RenderStateSet::RenderStateSet",0,0)
  result = (open::RenderStateSet *)new open::RenderStateSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__RenderStateSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setMode(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StateMode arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("open::RenderStateSet::setMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setMode",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setMode",2,"open::StateMode");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("open::RenderStateSet::setMode",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setMode",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StateMode)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setMode(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_getMode(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StateMode arg2 ;
  bool result;
  
  SWIG_check_num_args("open::RenderStateSet::getMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::getMode",1,"open::RenderStateSet const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::getMode",2,"open::StateMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_getMode",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StateMode)(int)lua_tonumber(L, 2);
  result = (bool)((open::RenderStateSet const *)arg1)->getMode(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setColorMask(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setColorMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setColorMask",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setColorMask",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setColorMask",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  (arg1)->setColorMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setCullFace(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::Face arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setCullFace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setCullFace",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setCullFace",2,"open::Face");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setCullFace",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::Face)(int)lua_tonumber(L, 2);
  (arg1)->setCullFace(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setFrontFace(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::FrontFace arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setFrontFace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setFrontFace",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setFrontFace",2,"open::FrontFace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setFrontFace",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::FrontFace)(int)lua_tonumber(L, 2);
  (arg1)->setFrontFace(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setPolygonMode(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::Face arg2 ;
  open::PolygonMode arg3 ;
  
  SWIG_check_num_args("open::RenderStateSet::setPolygonMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setPolygonMode",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setPolygonMode",2,"open::Face");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::RenderStateSet::setPolygonMode",3,"open::PolygonMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setPolygonMode",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::Face)(int)lua_tonumber(L, 2);
  arg3 = (open::PolygonMode)(int)lua_tonumber(L, 3);
  (arg1)->setPolygonMode(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setDepthMask(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setDepthMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setDepthMask",1,"open::RenderStateSet *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("open::RenderStateSet::setDepthMask",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setDepthMask",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDepthMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setDepthFunction(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::CompareFunction arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setDepthFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setDepthFunction",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setDepthFunction",2,"open::CompareFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setDepthFunction",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::CompareFunction)(int)lua_tonumber(L, 2);
  (arg1)->setDepthFunction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setStencilFunction(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::CompareFunction arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setStencilFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setStencilFunction",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setStencilFunction",2,"open::CompareFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setStencilFunction",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::CompareFunction)(int)lua_tonumber(L, 2);
  (arg1)->setStencilFunction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setStencilFunRef(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setStencilFunRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setStencilFunRef",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setStencilFunRef",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setStencilFunRef",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setStencilFunRef(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setStencilFunMask(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setStencilFunMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setStencilFunMask",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setStencilFunMask",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setStencilFunMask",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setStencilFunMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setStencilMask(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setStencilMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setStencilMask",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setStencilMask",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setStencilMask",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setStencilMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setStencilOperation(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation arg2 ;
  open::StencilOperation arg3 ;
  open::StencilOperation arg4 ;
  open::Face arg5 ;
  
  SWIG_check_num_args("open::RenderStateSet::setStencilOperation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setStencilOperation",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setStencilOperation",2,"open::StencilOperation");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::RenderStateSet::setStencilOperation",3,"open::StencilOperation");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::RenderStateSet::setStencilOperation",4,"open::StencilOperation");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::RenderStateSet::setStencilOperation",5,"open::Face");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setStencilOperation",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StencilOperation)(int)lua_tonumber(L, 2);
  arg3 = (open::StencilOperation)(int)lua_tonumber(L, 3);
  arg4 = (open::StencilOperation)(int)lua_tonumber(L, 4);
  arg5 = (open::Face)(int)lua_tonumber(L, 5);
  (arg1)->setStencilOperation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setShininess(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  int32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setShininess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setShininess",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setShininess",2,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setShininess",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  (arg1)->setShininess(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_getShininess(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::RenderStateSet::getShininess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::getShininess",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_getShininess",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (int32)(arg1)->getShininess();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_getAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::getAmbientColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::getAmbientColor",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_getAmbientColor",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32)(arg1)->getAmbientColor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setAmbientColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setAmbientColor",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setAmbientColor",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setAmbientColor",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setAmbientColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_getDiffuseColor(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::getDiffuseColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::getDiffuseColor",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_getDiffuseColor",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32)(arg1)->getDiffuseColor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setDiffuseColor(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setDiffuseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setDiffuseColor",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setDiffuseColor",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setDiffuseColor",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setDiffuseColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_getEmissiveColor(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::getEmissiveColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::getEmissiveColor",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_getEmissiveColor",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32)(arg1)->getEmissiveColor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setEmissiveColor(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::setEmissiveColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setEmissiveColor",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setEmissiveColor",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setEmissiveColor",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setEmissiveColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setBlendEquationSeparate(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendEquation arg2 ;
  open::BlendEquation arg3 ;
  
  SWIG_check_num_args("open::RenderStateSet::setBlendEquationSeparate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setBlendEquationSeparate",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setBlendEquationSeparate",2,"open::BlendEquation");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::RenderStateSet::setBlendEquationSeparate",3,"open::BlendEquation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setBlendEquationSeparate",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::BlendEquation)(int)lua_tonumber(L, 2);
  arg3 = (open::BlendEquation)(int)lua_tonumber(L, 3);
  (arg1)->setBlendEquationSeparate(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_setBlendFunSeparate(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun arg2 ;
  open::BlendFun arg3 ;
  open::BlendFun arg4 ;
  open::BlendFun arg5 ;
  
  SWIG_check_num_args("open::RenderStateSet::setBlendFunSeparate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::setBlendFunSeparate",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::setBlendFunSeparate",2,"open::BlendFun");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::RenderStateSet::setBlendFunSeparate",3,"open::BlendFun");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::RenderStateSet::setBlendFunSeparate",4,"open::BlendFun");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::RenderStateSet::setBlendFunSeparate",5,"open::BlendFun");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_setBlendFunSeparate",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::BlendFun)(int)lua_tonumber(L, 2);
  arg3 = (open::BlendFun)(int)lua_tonumber(L, 3);
  arg4 = (open::BlendFun)(int)lua_tonumber(L, 4);
  arg5 = (open::BlendFun)(int)lua_tonumber(L, 5);
  (arg1)->setBlendFunSeparate(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_isTransparence(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::RenderStateSet::isTransparence",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::isTransparence",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_isTransparence",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (bool)(arg1)->isTransparence();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_mode_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  bool *arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::mode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::mode",1,"open::RenderStateSet *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::RenderStateSet::mode",2,"bool [5]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_mode_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("RenderStateSet_mode_set",2,SWIGTYPE_p_bool);
  }
  
  {
    size_t ii;
    bool *b = (bool *) arg1->mode;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_mode_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  bool *result = 0 ;
  
  SWIG_check_num_args("open::RenderStateSet::mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::mode",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_mode_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (bool *)(bool *) ((arg1)->mode);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_bool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_colorMask_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::colorMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::colorMask",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::colorMask",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_colorMask_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  if (arg1) (arg1)->colorMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_colorMask_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("open::RenderStateSet::colorMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::colorMask",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_colorMask_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint8) ((arg1)->colorMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_cullFace_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::Face arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::cullFace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::cullFace",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::cullFace",2,"open::Face");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_cullFace_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::Face)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->cullFace = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_cullFace_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::Face result;
  
  SWIG_check_num_args("open::RenderStateSet::cullFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::cullFace",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_cullFace_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::Face) ((arg1)->cullFace);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_cullFrontFace_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::FrontFace arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::cullFrontFace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::cullFrontFace",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::cullFrontFace",2,"open::FrontFace");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_cullFrontFace_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::FrontFace)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->cullFrontFace = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_cullFrontFace_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::FrontFace result;
  
  SWIG_check_num_args("open::RenderStateSet::cullFrontFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::cullFrontFace",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_cullFrontFace_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::FrontFace) ((arg1)->cullFrontFace);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_polygonMode_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::PolygonMode arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::polygonMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::polygonMode",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::polygonMode",2,"open::PolygonMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_polygonMode_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::PolygonMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->polygonMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_polygonMode_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::PolygonMode result;
  
  SWIG_check_num_args("open::RenderStateSet::polygonMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::polygonMode",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_polygonMode_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::PolygonMode) ((arg1)->polygonMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_polygonModeFace_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::Face arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::polygonModeFace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::polygonModeFace",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::polygonModeFace",2,"open::Face");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_polygonModeFace_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::Face)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->polygonModeFace = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_polygonModeFace_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::Face result;
  
  SWIG_check_num_args("open::RenderStateSet::polygonModeFace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::polygonModeFace",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_polygonModeFace_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::Face) ((arg1)->polygonModeFace);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_depthMask_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::depthMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::depthMask",1,"open::RenderStateSet *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("open::RenderStateSet::depthMask",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_depthMask_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->depthMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_depthMask_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::RenderStateSet::depthMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::depthMask",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_depthMask_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (bool) ((arg1)->depthMask);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_depthFunction_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::CompareFunction arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::depthFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::depthFunction",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::depthFunction",2,"open::CompareFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_depthFunction_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::CompareFunction)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->depthFunction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_depthFunction_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::CompareFunction result;
  
  SWIG_check_num_args("open::RenderStateSet::depthFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::depthFunction",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_depthFunction_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::CompareFunction) ((arg1)->depthFunction);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_stencilFunction_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::CompareFunction arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::stencilFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::stencilFunction",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::stencilFunction",2,"open::CompareFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_stencilFunction_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::CompareFunction)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->stencilFunction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_stencilFunction_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::CompareFunction result;
  
  SWIG_check_num_args("open::RenderStateSet::stencilFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::stencilFunction",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_stencilFunction_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::CompareFunction) ((arg1)->stencilFunction);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_stencilRef_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::stencilRef",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::stencilRef",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::stencilRef",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_stencilRef_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  if (arg1) (arg1)->stencilRef = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_stencilRef_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::stencilRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::stencilRef",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_stencilRef_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32) ((arg1)->stencilRef);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_stencilFunMask_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::stencilFunMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::stencilFunMask",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::stencilFunMask",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_stencilFunMask_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  if (arg1) (arg1)->stencilFunMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_stencilFunMask_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::stencilFunMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::stencilFunMask",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_stencilFunMask_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32) ((arg1)->stencilFunMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_stencilMask_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::stencilMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::stencilMask",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::stencilMask",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_stencilMask_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  if (arg1) (arg1)->stencilMask = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_stencilMask_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::stencilMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::stencilMask",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_stencilMask_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32) ((arg1)->stencilMask);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_sfail_front_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::sfail_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::sfail_front",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::sfail_front",2,"open::StencilOperation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_sfail_front_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StencilOperation)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sfail_front = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_sfail_front_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation result;
  
  SWIG_check_num_args("open::RenderStateSet::sfail_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::sfail_front",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_sfail_front_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::StencilOperation) ((arg1)->sfail_front);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_zfail_front_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::zfail_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::zfail_front",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::zfail_front",2,"open::StencilOperation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_zfail_front_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StencilOperation)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->zfail_front = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_zfail_front_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation result;
  
  SWIG_check_num_args("open::RenderStateSet::zfail_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::zfail_front",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_zfail_front_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::StencilOperation) ((arg1)->zfail_front);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_zpass_front_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::zpass_front",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::zpass_front",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::zpass_front",2,"open::StencilOperation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_zpass_front_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StencilOperation)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->zpass_front = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_zpass_front_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation result;
  
  SWIG_check_num_args("open::RenderStateSet::zpass_front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::zpass_front",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_zpass_front_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::StencilOperation) ((arg1)->zpass_front);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_sfail_back_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::sfail_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::sfail_back",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::sfail_back",2,"open::StencilOperation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_sfail_back_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StencilOperation)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sfail_back = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_sfail_back_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation result;
  
  SWIG_check_num_args("open::RenderStateSet::sfail_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::sfail_back",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_sfail_back_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::StencilOperation) ((arg1)->sfail_back);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_zfail_back_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::zfail_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::zfail_back",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::zfail_back",2,"open::StencilOperation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_zfail_back_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StencilOperation)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->zfail_back = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_zfail_back_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation result;
  
  SWIG_check_num_args("open::RenderStateSet::zfail_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::zfail_back",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_zfail_back_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::StencilOperation) ((arg1)->zfail_back);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_zpass_back_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::zpass_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::zpass_back",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::zpass_back",2,"open::StencilOperation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_zpass_back_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::StencilOperation)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->zpass_back = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_zpass_back_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::StencilOperation result;
  
  SWIG_check_num_args("open::RenderStateSet::zpass_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::zpass_back",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_zpass_back_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::StencilOperation) ((arg1)->zpass_back);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_rgbBlendEquation_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendEquation arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::rgbBlendEquation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::rgbBlendEquation",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::rgbBlendEquation",2,"open::BlendEquation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_rgbBlendEquation_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::BlendEquation)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rgbBlendEquation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_rgbBlendEquation_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendEquation result;
  
  SWIG_check_num_args("open::RenderStateSet::rgbBlendEquation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::rgbBlendEquation",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_rgbBlendEquation_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::BlendEquation) ((arg1)->rgbBlendEquation);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_alphaBlendEquation_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendEquation arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::alphaBlendEquation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::alphaBlendEquation",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::alphaBlendEquation",2,"open::BlendEquation");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_alphaBlendEquation_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::BlendEquation)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->alphaBlendEquation = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_alphaBlendEquation_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendEquation result;
  
  SWIG_check_num_args("open::RenderStateSet::alphaBlendEquation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::alphaBlendEquation",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_alphaBlendEquation_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::BlendEquation) ((arg1)->alphaBlendEquation);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_srcRGB_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::srcRGB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::srcRGB",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::srcRGB",2,"open::BlendFun");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_srcRGB_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::BlendFun)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->srcRGB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_srcRGB_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun result;
  
  SWIG_check_num_args("open::RenderStateSet::srcRGB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::srcRGB",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_srcRGB_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::BlendFun) ((arg1)->srcRGB);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_srcAlpha_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::srcAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::srcAlpha",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::srcAlpha",2,"open::BlendFun");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_srcAlpha_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::BlendFun)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->srcAlpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_srcAlpha_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun result;
  
  SWIG_check_num_args("open::RenderStateSet::srcAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::srcAlpha",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_srcAlpha_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::BlendFun) ((arg1)->srcAlpha);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_destRGB_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::destRGB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::destRGB",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::destRGB",2,"open::BlendFun");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_destRGB_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::BlendFun)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->destRGB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_destRGB_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun result;
  
  SWIG_check_num_args("open::RenderStateSet::destRGB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::destRGB",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_destRGB_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::BlendFun) ((arg1)->destRGB);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_destAlpha_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::destAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::destAlpha",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::destAlpha",2,"open::BlendFun");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_destAlpha_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  arg2 = (open::BlendFun)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->destAlpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_destAlpha_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  open::BlendFun result;
  
  SWIG_check_num_args("open::RenderStateSet::destAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::destAlpha",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_destAlpha_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (open::BlendFun) ((arg1)->destAlpha);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_shininess_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::shininess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::shininess",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::shininess",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_shininess_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  if (arg1) (arg1)->shininess = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_shininess_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("open::RenderStateSet::shininess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::shininess",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_shininess_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint8) ((arg1)->shininess);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_diffuseColor_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::diffuseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::diffuseColor",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::diffuseColor",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_diffuseColor_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  if (arg1) (arg1)->diffuseColor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_diffuseColor_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::diffuseColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::diffuseColor",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_diffuseColor_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32) ((arg1)->diffuseColor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_emissiveColor_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::emissiveColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::emissiveColor",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::emissiveColor",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_emissiveColor_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  if (arg1) (arg1)->emissiveColor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_emissiveColor_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::emissiveColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::emissiveColor",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_emissiveColor_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32) ((arg1)->emissiveColor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_ambientColor_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::RenderStateSet::ambientColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::ambientColor",1,"open::RenderStateSet *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::RenderStateSet::ambientColor",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_ambientColor_set",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  if (arg1) (arg1)->ambientColor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderStateSet_ambientColor_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderStateSet *arg1 = (open::RenderStateSet *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::RenderStateSet::ambientColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderStateSet::ambientColor",1,"open::RenderStateSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("RenderStateSet_ambientColor_get",1,SWIGTYPE_p_open__RenderStateSet);
  }
  
  result = (uint32) ((arg1)->ambientColor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderStateSet(void *obj) {
open::RenderStateSet *arg1 = (open::RenderStateSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_RenderStateSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RenderStateSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RenderStateSet_attributes[] = {
    { "mode", _wrap_RenderStateSet_mode_get, _wrap_RenderStateSet_mode_set },
    { "colorMask", _wrap_RenderStateSet_colorMask_get, _wrap_RenderStateSet_colorMask_set },
    { "cullFace", _wrap_RenderStateSet_cullFace_get, _wrap_RenderStateSet_cullFace_set },
    { "cullFrontFace", _wrap_RenderStateSet_cullFrontFace_get, _wrap_RenderStateSet_cullFrontFace_set },
    { "polygonMode", _wrap_RenderStateSet_polygonMode_get, _wrap_RenderStateSet_polygonMode_set },
    { "polygonModeFace", _wrap_RenderStateSet_polygonModeFace_get, _wrap_RenderStateSet_polygonModeFace_set },
    { "depthMask", _wrap_RenderStateSet_depthMask_get, _wrap_RenderStateSet_depthMask_set },
    { "depthFunction", _wrap_RenderStateSet_depthFunction_get, _wrap_RenderStateSet_depthFunction_set },
    { "stencilFunction", _wrap_RenderStateSet_stencilFunction_get, _wrap_RenderStateSet_stencilFunction_set },
    { "stencilRef", _wrap_RenderStateSet_stencilRef_get, _wrap_RenderStateSet_stencilRef_set },
    { "stencilFunMask", _wrap_RenderStateSet_stencilFunMask_get, _wrap_RenderStateSet_stencilFunMask_set },
    { "stencilMask", _wrap_RenderStateSet_stencilMask_get, _wrap_RenderStateSet_stencilMask_set },
    { "sfail_front", _wrap_RenderStateSet_sfail_front_get, _wrap_RenderStateSet_sfail_front_set },
    { "zfail_front", _wrap_RenderStateSet_zfail_front_get, _wrap_RenderStateSet_zfail_front_set },
    { "zpass_front", _wrap_RenderStateSet_zpass_front_get, _wrap_RenderStateSet_zpass_front_set },
    { "sfail_back", _wrap_RenderStateSet_sfail_back_get, _wrap_RenderStateSet_sfail_back_set },
    { "zfail_back", _wrap_RenderStateSet_zfail_back_get, _wrap_RenderStateSet_zfail_back_set },
    { "zpass_back", _wrap_RenderStateSet_zpass_back_get, _wrap_RenderStateSet_zpass_back_set },
    { "rgbBlendEquation", _wrap_RenderStateSet_rgbBlendEquation_get, _wrap_RenderStateSet_rgbBlendEquation_set },
    { "alphaBlendEquation", _wrap_RenderStateSet_alphaBlendEquation_get, _wrap_RenderStateSet_alphaBlendEquation_set },
    { "srcRGB", _wrap_RenderStateSet_srcRGB_get, _wrap_RenderStateSet_srcRGB_set },
    { "srcAlpha", _wrap_RenderStateSet_srcAlpha_get, _wrap_RenderStateSet_srcAlpha_set },
    { "destRGB", _wrap_RenderStateSet_destRGB_get, _wrap_RenderStateSet_destRGB_set },
    { "destAlpha", _wrap_RenderStateSet_destAlpha_get, _wrap_RenderStateSet_destAlpha_set },
    { "shininess", _wrap_RenderStateSet_shininess_get, _wrap_RenderStateSet_shininess_set },
    { "diffuseColor", _wrap_RenderStateSet_diffuseColor_get, _wrap_RenderStateSet_diffuseColor_set },
    { "emissiveColor", _wrap_RenderStateSet_emissiveColor_get, _wrap_RenderStateSet_emissiveColor_set },
    { "ambientColor", _wrap_RenderStateSet_ambientColor_get, _wrap_RenderStateSet_ambientColor_set },
    {0,0,0}
};
static swig_lua_method swig_RenderStateSet_methods[]= {
    { "setMode", _wrap_RenderStateSet_setMode},
    { "getMode", _wrap_RenderStateSet_getMode},
    { "setColorMask", _wrap_RenderStateSet_setColorMask},
    { "setCullFace", _wrap_RenderStateSet_setCullFace},
    { "setFrontFace", _wrap_RenderStateSet_setFrontFace},
    { "setPolygonMode", _wrap_RenderStateSet_setPolygonMode},
    { "setDepthMask", _wrap_RenderStateSet_setDepthMask},
    { "setDepthFunction", _wrap_RenderStateSet_setDepthFunction},
    { "setStencilFunction", _wrap_RenderStateSet_setStencilFunction},
    { "setStencilFunRef", _wrap_RenderStateSet_setStencilFunRef},
    { "setStencilFunMask", _wrap_RenderStateSet_setStencilFunMask},
    { "setStencilMask", _wrap_RenderStateSet_setStencilMask},
    { "setStencilOperation", _wrap_RenderStateSet_setStencilOperation},
    { "setShininess", _wrap_RenderStateSet_setShininess},
    { "getShininess", _wrap_RenderStateSet_getShininess},
    { "getAmbientColor", _wrap_RenderStateSet_getAmbientColor},
    { "setAmbientColor", _wrap_RenderStateSet_setAmbientColor},
    { "getDiffuseColor", _wrap_RenderStateSet_getDiffuseColor},
    { "setDiffuseColor", _wrap_RenderStateSet_setDiffuseColor},
    { "getEmissiveColor", _wrap_RenderStateSet_getEmissiveColor},
    { "setEmissiveColor", _wrap_RenderStateSet_setEmissiveColor},
    { "setBlendEquationSeparate", _wrap_RenderStateSet_setBlendEquationSeparate},
    { "setBlendFunSeparate", _wrap_RenderStateSet_setBlendFunSeparate},
    { "isTransparence", _wrap_RenderStateSet_isTransparence},
    {0,0}
};
static swig_lua_method swig_RenderStateSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RenderStateSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RenderStateSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RenderStateSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RenderStateSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RenderStateSet_Sf_SwigStatic = {
    "RenderStateSet",
    swig_RenderStateSet_Sf_SwigStatic_methods,
    swig_RenderStateSet_Sf_SwigStatic_attributes,
    swig_RenderStateSet_Sf_SwigStatic_constants,
    swig_RenderStateSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RenderStateSet_bases[] = {0};
static const char *swig_RenderStateSet_base_names[] = {0};
static swig_lua_class _wrap_class_RenderStateSet = { "RenderStateSet", "RenderStateSet", &SWIGTYPE_p_open__RenderStateSet,_proxy__wrap_new_RenderStateSet, swig_delete_RenderStateSet, swig_RenderStateSet_methods, swig_RenderStateSet_attributes, &swig_RenderStateSet_Sf_SwigStatic, swig_RenderStateSet_meta, swig_RenderStateSet_bases, swig_RenderStateSet_base_names };

static int _wrap_new_IShadowData(lua_State* L) {
  int SWIG_arg = 0;
  open::IShadowData *result = 0 ;
  
  SWIG_check_num_args("open::IShadowData::IShadowData",0,0)
  result = (open::IShadowData *)new open::IShadowData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IShadowData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IShadowData(void *obj) {
open::IShadowData *arg1 = (open::IShadowData *) obj;
delete arg1;
}
static int _proxy__wrap_new_IShadowData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IShadowData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IShadowData_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IShadowData_methods[]= {
    {0,0}
};
static swig_lua_method swig_IShadowData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IShadowData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IShadowData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IShadowData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IShadowData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IShadowData_Sf_SwigStatic = {
    "IShadowData",
    swig_IShadowData_Sf_SwigStatic_methods,
    swig_IShadowData_Sf_SwigStatic_attributes,
    swig_IShadowData_Sf_SwigStatic_constants,
    swig_IShadowData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IShadowData_bases[] = {0};
static const char *swig_IShadowData_base_names[] = {0};
static swig_lua_class _wrap_class_IShadowData = { "IShadowData", "IShadowData", &SWIGTYPE_p_open__IShadowData,_proxy__wrap_new_IShadowData, swig_delete_IShadowData, swig_IShadowData_methods, swig_IShadowData_attributes, &swig_IShadowData_Sf_SwigStatic, swig_IShadowData_meta, swig_IShadowData_bases, swig_IShadowData_base_names };

static int _wrap_ILight_setLightType(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  open::LightType arg2 ;
  
  SWIG_check_num_args("open::ILight::setLightType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::setLightType",1,"open::ILight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ILight::setLightType",2,"open::LightType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_setLightType",1,SWIGTYPE_p_open__ILight);
  }
  
  arg2 = (open::LightType)(int)lua_tonumber(L, 2);
  (arg1)->setLightType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_getLightType(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  open::LightType result;
  
  SWIG_check_num_args("open::ILight::getLightType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::getLightType",1,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_getLightType",1,SWIGTYPE_p_open__ILight);
  }
  
  result = (open::LightType)(arg1)->getLightType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_setLightRange(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("open::ILight::setLightRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::setLightRange",1,"open::ILight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ILight::setLightRange",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::ILight::setLightRange",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_setLightRange",1,SWIGTYPE_p_open__ILight);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setLightRange(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_getLightRange(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  
  SWIG_check_num_args("open::ILight::getLightRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::getLightRange",1,"open::ILight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::ILight::getLightRange",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::ILight::getLightRange",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_getLightRange",1,SWIGTYPE_p_open__ILight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ILight_getLightRange",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ILight_getLightRange",3,SWIGTYPE_p_float);
  }
  
  (arg1)->getLightRange(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_setLightPosition(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  Real3 *arg2 = 0 ;
  
  SWIG_check_num_args("open::ILight::setLightPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::setLightPosition",1,"open::ILight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::ILight::setLightPosition",2,"Real3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_setLightPosition",1,SWIGTYPE_p_open__ILight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Real3,0))){
    SWIG_fail_ptr("ILight_setLightPosition",2,SWIGTYPE_p_Real3);
  }
  
  (arg1)->setLightPosition((Real3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_getLightPosition(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  Real3 *result = 0 ;
  
  SWIG_check_num_args("open::ILight::getLightPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::getLightPosition",1,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_getLightPosition",1,SWIGTYPE_p_open__ILight);
  }
  
  result = (Real3 *) &(arg1)->getLightPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Real3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_setLightDirection(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  Real3 *arg2 = 0 ;
  
  SWIG_check_num_args("open::ILight::setLightDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::setLightDirection",1,"open::ILight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::ILight::setLightDirection",2,"Real3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_setLightDirection",1,SWIGTYPE_p_open__ILight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Real3,0))){
    SWIG_fail_ptr("ILight_setLightDirection",2,SWIGTYPE_p_Real3);
  }
  
  (arg1)->setLightDirection((Real3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_getLightDirection(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  Real3 *result = 0 ;
  
  SWIG_check_num_args("open::ILight::getLightDirection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::getLightDirection",1,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_getLightDirection",1,SWIGTYPE_p_open__ILight);
  }
  
  result = (Real3 *) &(arg1)->getLightDirection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Real3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_setAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  Real3 *arg2 = 0 ;
  
  SWIG_check_num_args("open::ILight::setAmbientColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::setAmbientColor",1,"open::ILight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::ILight::setAmbientColor",2,"Real3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_setAmbientColor",1,SWIGTYPE_p_open__ILight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Real3,0))){
    SWIG_fail_ptr("ILight_setAmbientColor",2,SWIGTYPE_p_Real3);
  }
  
  (arg1)->setAmbientColor((Real3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_getAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  Real3 *result = 0 ;
  
  SWIG_check_num_args("open::ILight::getAmbientColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::getAmbientColor",1,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_getAmbientColor",1,SWIGTYPE_p_open__ILight);
  }
  
  result = (Real3 *) &(arg1)->getAmbientColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Real3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_setDiffuseColor(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  Real3 *arg2 = 0 ;
  
  SWIG_check_num_args("open::ILight::setDiffuseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::setDiffuseColor",1,"open::ILight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::ILight::setDiffuseColor",2,"Real3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_setDiffuseColor",1,SWIGTYPE_p_open__ILight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Real3,0))){
    SWIG_fail_ptr("ILight_setDiffuseColor",2,SWIGTYPE_p_Real3);
  }
  
  (arg1)->setDiffuseColor((Real3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_getDiffuseColor(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  Real3 *result = 0 ;
  
  SWIG_check_num_args("open::ILight::getDiffuseColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::getDiffuseColor",1,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_getDiffuseColor",1,SWIGTYPE_p_open__ILight);
  }
  
  result = (Real3 *) &(arg1)->getDiffuseColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Real3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_setRenderMask(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::ILight::setRenderMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::setRenderMask",1,"open::ILight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::ILight::setRenderMask",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_setRenderMask",1,SWIGTYPE_p_open__ILight);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setRenderMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_getRenderMask(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  uint32 result;
  
  SWIG_check_num_args("open::ILight::getRenderMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::getRenderMask",1,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_getRenderMask",1,SWIGTYPE_p_open__ILight);
  }
  
  result = (uint32)(arg1)->getRenderMask();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_getShadowData(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  open::IShadowData *result = 0 ;
  
  SWIG_check_num_args("open::ILight::getShadowData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::getShadowData",1,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_getShadowData",1,SWIGTYPE_p_open__ILight);
  }
  
  result = (open::IShadowData *)(arg1)->getShadowData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IShadowData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILight_setShadowData(lua_State* L) {
  int SWIG_arg = 0;
  open::ILight *arg1 = (open::ILight *) 0 ;
  open::IShadowData *arg2 = (open::IShadowData *) 0 ;
  
  SWIG_check_num_args("open::ILight::setShadowData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILight::setShadowData",1,"open::ILight *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::ILight::setShadowData",2,"open::IShadowData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILight_setShadowData",1,SWIGTYPE_p_open__ILight);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IShadowData,0))){
    SWIG_fail_ptr("ILight_setShadowData",2,SWIGTYPE_p_open__IShadowData);
  }
  
  (arg1)->setShadowData(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ILight(void *obj) {
open::ILight *arg1 = (open::ILight *) obj;
delete arg1;
}
static swig_lua_attribute swig_ILight_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ILight_methods[]= {
    { "setLightType", _wrap_ILight_setLightType},
    { "getLightType", _wrap_ILight_getLightType},
    { "setLightRange", _wrap_ILight_setLightRange},
    { "getLightRange", _wrap_ILight_getLightRange},
    { "setLightPosition", _wrap_ILight_setLightPosition},
    { "getLightPosition", _wrap_ILight_getLightPosition},
    { "setLightDirection", _wrap_ILight_setLightDirection},
    { "getLightDirection", _wrap_ILight_getLightDirection},
    { "setAmbientColor", _wrap_ILight_setAmbientColor},
    { "getAmbientColor", _wrap_ILight_getAmbientColor},
    { "setDiffuseColor", _wrap_ILight_setDiffuseColor},
    { "getDiffuseColor", _wrap_ILight_getDiffuseColor},
    { "setRenderMask", _wrap_ILight_setRenderMask},
    { "getRenderMask", _wrap_ILight_getRenderMask},
    { "getShadowData", _wrap_ILight_getShadowData},
    { "setShadowData", _wrap_ILight_setShadowData},
    {0,0}
};
static swig_lua_method swig_ILight_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ILight_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ILight_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ILight_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ILight_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ILight_Sf_SwigStatic = {
    "ILight",
    swig_ILight_Sf_SwigStatic_methods,
    swig_ILight_Sf_SwigStatic_attributes,
    swig_ILight_Sf_SwigStatic_constants,
    swig_ILight_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ILight_bases[] = {0};
static const char *swig_ILight_base_names[] = {0};
static swig_lua_class _wrap_class_ILight = { "ILight", "ILight", &SWIGTYPE_p_open__ILight,0, swig_delete_ILight, swig_ILight_methods, swig_ILight_attributes, &swig_ILight_Sf_SwigStatic, swig_ILight_meta, swig_ILight_bases, swig_ILight_base_names };

static int _wrap_ILightManager_createLight(lua_State* L) {
  int SWIG_arg = 0;
  open::ILightManager *arg1 = (open::ILightManager *) 0 ;
  open::ILight *result = 0 ;
  
  SWIG_check_num_args("open::ILightManager::createLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILightManager::createLight",1,"open::ILightManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILightManager,0))){
    SWIG_fail_ptr("ILightManager_createLight",1,SWIGTYPE_p_open__ILightManager);
  }
  
  result = (open::ILight *)(arg1)->createLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ILight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILightManager_addLight(lua_State* L) {
  int SWIG_arg = 0;
  open::ILightManager *arg1 = (open::ILightManager *) 0 ;
  open::ILight *arg2 = (open::ILight *) 0 ;
  
  SWIG_check_num_args("open::ILightManager::addLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILightManager::addLight",1,"open::ILightManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::ILightManager::addLight",2,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILightManager,0))){
    SWIG_fail_ptr("ILightManager_addLight",1,SWIGTYPE_p_open__ILightManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILightManager_addLight",2,SWIGTYPE_p_open__ILight);
  }
  
  (arg1)->addLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILightManager_removeLight(lua_State* L) {
  int SWIG_arg = 0;
  open::ILightManager *arg1 = (open::ILightManager *) 0 ;
  open::ILight *arg2 = (open::ILight *) 0 ;
  
  SWIG_check_num_args("open::ILightManager::removeLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILightManager::removeLight",1,"open::ILightManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::ILightManager::removeLight",2,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILightManager,0))){
    SWIG_fail_ptr("ILightManager_removeLight",1,SWIGTYPE_p_open__ILightManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILightManager_removeLight",2,SWIGTYPE_p_open__ILight);
  }
  
  (arg1)->removeLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILightManager_setMainLight(lua_State* L) {
  int SWIG_arg = 0;
  open::ILightManager *arg1 = (open::ILightManager *) 0 ;
  open::ILight *arg2 = (open::ILight *) 0 ;
  
  SWIG_check_num_args("open::ILightManager::setMainLight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILightManager::setMainLight",1,"open::ILightManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::ILightManager::setMainLight",2,"open::ILight *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILightManager,0))){
    SWIG_fail_ptr("ILightManager_setMainLight",1,SWIGTYPE_p_open__ILightManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ILight,0))){
    SWIG_fail_ptr("ILightManager_setMainLight",2,SWIGTYPE_p_open__ILight);
  }
  
  (arg1)->setMainLight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILightManager_getMainLight(lua_State* L) {
  int SWIG_arg = 0;
  open::ILightManager *arg1 = (open::ILightManager *) 0 ;
  open::ILight *result = 0 ;
  
  SWIG_check_num_args("open::ILightManager::getMainLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILightManager::getMainLight",1,"open::ILightManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILightManager,0))){
    SWIG_fail_ptr("ILightManager_getMainLight",1,SWIGTYPE_p_open__ILightManager);
  }
  
  result = (open::ILight *)(arg1)->getMainLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ILight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILightManager_begin(lua_State* L) {
  int SWIG_arg = 0;
  open::ILightManager *arg1 = (open::ILightManager *) 0 ;
  
  SWIG_check_num_args("open::ILightManager::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILightManager::begin",1,"open::ILightManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILightManager,0))){
    SWIG_fail_ptr("ILightManager_begin",1,SWIGTYPE_p_open__ILightManager);
  }
  
  (arg1)->begin();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ILightManager_nextIterator(lua_State* L) {
  int SWIG_arg = 0;
  open::ILightManager *arg1 = (open::ILightManager *) 0 ;
  open::ILight *result = 0 ;
  
  SWIG_check_num_args("open::ILightManager::nextIterator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::ILightManager::nextIterator",1,"open::ILightManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__ILightManager,0))){
    SWIG_fail_ptr("ILightManager_nextIterator",1,SWIGTYPE_p_open__ILightManager);
  }
  
  result = (open::ILight *)(arg1)->nextIterator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ILight,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ILightManager(void *obj) {
open::ILightManager *arg1 = (open::ILightManager *) obj;
delete arg1;
}
static swig_lua_attribute swig_ILightManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ILightManager_methods[]= {
    { "createLight", _wrap_ILightManager_createLight},
    { "addLight", _wrap_ILightManager_addLight},
    { "removeLight", _wrap_ILightManager_removeLight},
    { "setMainLight", _wrap_ILightManager_setMainLight},
    { "getMainLight", _wrap_ILightManager_getMainLight},
    { "begin", _wrap_ILightManager_begin},
    { "nextIterator", _wrap_ILightManager_nextIterator},
    {0,0}
};
static swig_lua_method swig_ILightManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ILightManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ILightManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ILightManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ILightManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ILightManager_Sf_SwigStatic = {
    "ILightManager",
    swig_ILightManager_Sf_SwigStatic_methods,
    swig_ILightManager_Sf_SwigStatic_attributes,
    swig_ILightManager_Sf_SwigStatic_constants,
    swig_ILightManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ILightManager_bases[] = {0};
static const char *swig_ILightManager_base_names[] = {0};
static swig_lua_class _wrap_class_ILightManager = { "ILightManager", "ILightManager", &SWIGTYPE_p_open__ILightManager,0, swig_delete_ILightManager, swig_ILightManager_methods, swig_ILightManager_attributes, &swig_ILightManager_Sf_SwigStatic, swig_ILightManager_meta, swig_ILightManager_bases, swig_ILightManager_base_names };

static int _wrap_IRenderTarget_apply(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTarget *arg1 = (open::IRenderTarget *) 0 ;
  
  SWIG_check_num_args("open::IRenderTarget::apply",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTarget::apply",1,"open::IRenderTarget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTarget,0))){
    SWIG_fail_ptr("IRenderTarget_apply",1,SWIGTYPE_p_open__IRenderTarget);
  }
  
  (arg1)->apply();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTarget_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTarget *arg1 = (open::IRenderTarget *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::IRenderTarget::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTarget::getWidth",1,"open::IRenderTarget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTarget,0))){
    SWIG_fail_ptr("IRenderTarget_getWidth",1,SWIGTYPE_p_open__IRenderTarget);
  }
  
  result = (int32)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTarget_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTarget *arg1 = (open::IRenderTarget *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::IRenderTarget::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTarget::getHeight",1,"open::IRenderTarget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTarget,0))){
    SWIG_fail_ptr("IRenderTarget_getHeight",1,SWIGTYPE_p_open__IRenderTarget);
  }
  
  result = (int32)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTarget_asRenderWindow(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTarget *arg1 = (open::IRenderTarget *) 0 ;
  open::IRenderWindow *result = 0 ;
  
  SWIG_check_num_args("open::IRenderTarget::asRenderWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTarget::asRenderWindow",1,"open::IRenderTarget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTarget,0))){
    SWIG_fail_ptr("IRenderTarget_asRenderWindow",1,SWIGTYPE_p_open__IRenderTarget);
  }
  
  result = (open::IRenderWindow *)(arg1)->asRenderWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTarget_asFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTarget *arg1 = (open::IRenderTarget *) 0 ;
  open::IFrameBuffer *result = 0 ;
  
  SWIG_check_num_args("open::IRenderTarget::asFrameBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTarget::asFrameBuffer",1,"open::IRenderTarget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTarget,0))){
    SWIG_fail_ptr("IRenderTarget_asFrameBuffer",1,SWIGTYPE_p_open__IRenderTarget);
  }
  
  result = (open::IFrameBuffer *)(arg1)->asFrameBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IFrameBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IRenderTarget(void *obj) {
open::IRenderTarget *arg1 = (open::IRenderTarget *) obj;
delete arg1;
}
static swig_lua_attribute swig_IRenderTarget_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IRenderTarget_methods[]= {
    { "apply", _wrap_IRenderTarget_apply},
    { "getWidth", _wrap_IRenderTarget_getWidth},
    { "getHeight", _wrap_IRenderTarget_getHeight},
    { "asRenderWindow", _wrap_IRenderTarget_asRenderWindow},
    { "asFrameBuffer", _wrap_IRenderTarget_asFrameBuffer},
    {0,0}
};
static swig_lua_method swig_IRenderTarget_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IRenderTarget_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IRenderTarget_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IRenderTarget_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IRenderTarget_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IRenderTarget_Sf_SwigStatic = {
    "IRenderTarget",
    swig_IRenderTarget_Sf_SwigStatic_methods,
    swig_IRenderTarget_Sf_SwigStatic_attributes,
    swig_IRenderTarget_Sf_SwigStatic_constants,
    swig_IRenderTarget_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IRenderTarget_bases[] = {0};
static const char *swig_IRenderTarget_base_names[] = {0};
static swig_lua_class _wrap_class_IRenderTarget = { "IRenderTarget", "IRenderTarget", &SWIGTYPE_p_open__IRenderTarget,0, swig_delete_IRenderTarget, swig_IRenderTarget_methods, swig_IRenderTarget_attributes, &swig_IRenderTarget_Sf_SwigStatic, swig_IRenderTarget_meta, swig_IRenderTarget_bases, swig_IRenderTarget_base_names };

static int _wrap_WindowTraits_x_set(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  int32 arg2 ;
  
  SWIG_check_num_args("open::WindowTraits::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::x",1,"open::WindowTraits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::WindowTraits::x",2,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_x_set",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_x_get(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::WindowTraits::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::x",1,"open::WindowTraits *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_x_get",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  result = (int32) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_y_set(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  int32 arg2 ;
  
  SWIG_check_num_args("open::WindowTraits::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::y",1,"open::WindowTraits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::WindowTraits::y",2,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_y_set",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_y_get(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::WindowTraits::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::y",1,"open::WindowTraits *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_y_get",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  result = (int32) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_width_set(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  int32 arg2 ;
  
  SWIG_check_num_args("open::WindowTraits::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::width",1,"open::WindowTraits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::WindowTraits::width",2,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_width_set",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_width_get(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::WindowTraits::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::width",1,"open::WindowTraits *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_width_get",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  result = (int32) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_height_set(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  int32 arg2 ;
  
  SWIG_check_num_args("open::WindowTraits::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::height",1,"open::WindowTraits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::WindowTraits::height",2,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_height_set",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_height_get(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::WindowTraits::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::height",1,"open::WindowTraits *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_height_get",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  result = (int32) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_parentHandle_set(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  Handle arg2 ;
  
  SWIG_check_num_args("open::WindowTraits::parentHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::parentHandle",1,"open::WindowTraits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::WindowTraits::parentHandle",2,"Handle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_parentHandle_set",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Handle)lua_tonumber(L, 2);
  if (arg1) (arg1)->parentHandle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowTraits_parentHandle_get(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *arg1 = (open::WindowTraits *) 0 ;
  Handle result;
  
  SWIG_check_num_args("open::WindowTraits::parentHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::WindowTraits::parentHandle",1,"open::WindowTraits *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("WindowTraits_parentHandle_get",1,SWIGTYPE_p_open__WindowTraits);
  }
  
  result = (Handle) ((arg1)->parentHandle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WindowTraits(lua_State* L) {
  int SWIG_arg = 0;
  open::WindowTraits *result = 0 ;
  
  SWIG_check_num_args("open::WindowTraits::WindowTraits",0,0)
  result = (open::WindowTraits *)new open::WindowTraits();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__WindowTraits,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WindowTraits(void *obj) {
open::WindowTraits *arg1 = (open::WindowTraits *) obj;
delete arg1;
}
static int _proxy__wrap_new_WindowTraits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WindowTraits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WindowTraits_attributes[] = {
    { "x", _wrap_WindowTraits_x_get, _wrap_WindowTraits_x_set },
    { "y", _wrap_WindowTraits_y_get, _wrap_WindowTraits_y_set },
    { "width", _wrap_WindowTraits_width_get, _wrap_WindowTraits_width_set },
    { "height", _wrap_WindowTraits_height_get, _wrap_WindowTraits_height_set },
    { "parentHandle", _wrap_WindowTraits_parentHandle_get, _wrap_WindowTraits_parentHandle_set },
    {0,0,0}
};
static swig_lua_method swig_WindowTraits_methods[]= {
    {0,0}
};
static swig_lua_method swig_WindowTraits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WindowTraits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WindowTraits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WindowTraits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WindowTraits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WindowTraits_Sf_SwigStatic = {
    "WindowTraits",
    swig_WindowTraits_Sf_SwigStatic_methods,
    swig_WindowTraits_Sf_SwigStatic_attributes,
    swig_WindowTraits_Sf_SwigStatic_constants,
    swig_WindowTraits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WindowTraits_bases[] = {0};
static const char *swig_WindowTraits_base_names[] = {0};
static swig_lua_class _wrap_class_WindowTraits = { "WindowTraits", "WindowTraits", &SWIGTYPE_p_open__WindowTraits,_proxy__wrap_new_WindowTraits, swig_delete_WindowTraits, swig_WindowTraits_methods, swig_WindowTraits_attributes, &swig_WindowTraits_Sf_SwigStatic, swig_WindowTraits_meta, swig_WindowTraits_bases, swig_WindowTraits_base_names };

static int _wrap_IRenderWindow_setupWindow(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderWindow *arg1 = (open::IRenderWindow *) 0 ;
  open::WindowTraits *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("open::IRenderWindow::setupWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderWindow::setupWindow",1,"open::IRenderWindow *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::IRenderWindow::setupWindow",2,"open::WindowTraits const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderWindow,0))){
    SWIG_fail_ptr("IRenderWindow_setupWindow",1,SWIGTYPE_p_open__IRenderWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__WindowTraits,0))){
    SWIG_fail_ptr("IRenderWindow_setupWindow",2,SWIGTYPE_p_open__WindowTraits);
  }
  
  result = (bool)(arg1)->setupWindow((open::WindowTraits const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderWindow_getInputQueue(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderWindow *arg1 = (open::IRenderWindow *) 0 ;
  open::IInputQueue *result = 0 ;
  
  SWIG_check_num_args("open::IRenderWindow::getInputQueue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderWindow::getInputQueue",1,"open::IRenderWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderWindow,0))){
    SWIG_fail_ptr("IRenderWindow_getInputQueue",1,SWIGTYPE_p_open__IRenderWindow);
  }
  
  result = (open::IInputQueue *)(arg1)->getInputQueue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IInputQueue,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderWindow_getWindowHandle(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderWindow *arg1 = (open::IRenderWindow *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("open::IRenderWindow::getWindowHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderWindow::getWindowHandle",1,"open::IRenderWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderWindow,0))){
    SWIG_fail_ptr("IRenderWindow_getWindowHandle",1,SWIGTYPE_p_open__IRenderWindow);
  }
  
  result = (void *)(arg1)->getWindowHandle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderWindow_swapBuffer(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderWindow *arg1 = (open::IRenderWindow *) 0 ;
  
  SWIG_check_num_args("open::IRenderWindow::swapBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderWindow::swapBuffer",1,"open::IRenderWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderWindow,0))){
    SWIG_fail_ptr("IRenderWindow_swapBuffer",1,SWIGTYPE_p_open__IRenderWindow);
  }
  
  (arg1)->swapBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderWindow_asRenderWindow(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderWindow *arg1 = (open::IRenderWindow *) 0 ;
  open::IRenderWindow *result = 0 ;
  
  SWIG_check_num_args("open::IRenderWindow::asRenderWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderWindow::asRenderWindow",1,"open::IRenderWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderWindow,0))){
    SWIG_fail_ptr("IRenderWindow_asRenderWindow",1,SWIGTYPE_p_open__IRenderWindow);
  }
  
  result = (open::IRenderWindow *)(arg1)->asRenderWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IRenderWindow(void *obj) {
open::IRenderWindow *arg1 = (open::IRenderWindow *) obj;
delete arg1;
}
static swig_lua_attribute swig_IRenderWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IRenderWindow_methods[]= {
    { "setupWindow", _wrap_IRenderWindow_setupWindow},
    { "getInputQueue", _wrap_IRenderWindow_getInputQueue},
    { "getWindowHandle", _wrap_IRenderWindow_getWindowHandle},
    { "swapBuffer", _wrap_IRenderWindow_swapBuffer},
    { "asRenderWindow", _wrap_IRenderWindow_asRenderWindow},
    {0,0}
};
static swig_lua_method swig_IRenderWindow_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IRenderWindow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IRenderWindow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IRenderWindow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IRenderWindow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IRenderWindow_Sf_SwigStatic = {
    "IRenderWindow",
    swig_IRenderWindow_Sf_SwigStatic_methods,
    swig_IRenderWindow_Sf_SwigStatic_attributes,
    swig_IRenderWindow_Sf_SwigStatic_constants,
    swig_IRenderWindow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IRenderWindow_bases[] = {0,0};
static const char *swig_IRenderWindow_base_names[] = {"open::IRenderTarget *",0};
static swig_lua_class _wrap_class_IRenderWindow = { "IRenderWindow", "IRenderWindow", &SWIGTYPE_p_open__IRenderWindow,0, swig_delete_IRenderWindow, swig_IRenderWindow_methods, swig_IRenderWindow_attributes, &swig_IRenderWindow_Sf_SwigStatic, swig_IRenderWindow_meta, swig_IRenderWindow_bases, swig_IRenderWindow_base_names };

static int _wrap_IRenderWindowFactory_createRenderWindow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderWindowFactory *arg1 = (open::IRenderWindowFactory *) 0 ;
  char *arg2 = (char *) 0 ;
  open::IRenderWindow *result = 0 ;
  
  SWIG_check_num_args("open::IRenderWindowFactory::createRenderWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderWindowFactory::createRenderWindow",1,"open::IRenderWindowFactory *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IRenderWindowFactory::createRenderWindow",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderWindowFactory,0))){
    SWIG_fail_ptr("IRenderWindowFactory_createRenderWindow",1,SWIGTYPE_p_open__IRenderWindowFactory);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (open::IRenderWindow *)(arg1)->createRenderWindow((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderWindowFactory_createRenderWindow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderWindowFactory *arg1 = (open::IRenderWindowFactory *) 0 ;
  open::IRenderWindow *result = 0 ;
  
  SWIG_check_num_args("open::IRenderWindowFactory::createRenderWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderWindowFactory::createRenderWindow",1,"open::IRenderWindowFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderWindowFactory,0))){
    SWIG_fail_ptr("IRenderWindowFactory_createRenderWindow",1,SWIGTYPE_p_open__IRenderWindowFactory);
  }
  
  result = (open::IRenderWindow *)(arg1)->createRenderWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderWindowFactory_createRenderWindow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IRenderWindowFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IRenderWindowFactory_createRenderWindow__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IRenderWindowFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_IRenderWindowFactory_createRenderWindow__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IRenderWindowFactory_createRenderWindow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IRenderWindowFactory::createRenderWindow(char const *)\n"
    "    open::IRenderWindowFactory::createRenderWindow()\n");
  lua_error(L);return 0;
}


static void swig_delete_IRenderWindowFactory(void *obj) {
open::IRenderWindowFactory *arg1 = (open::IRenderWindowFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_IRenderWindowFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IRenderWindowFactory_methods[]= {
    { "createRenderWindow", _wrap_IRenderWindowFactory_createRenderWindow},
    {0,0}
};
static swig_lua_method swig_IRenderWindowFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IRenderWindowFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IRenderWindowFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IRenderWindowFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IRenderWindowFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IRenderWindowFactory_Sf_SwigStatic = {
    "IRenderWindowFactory",
    swig_IRenderWindowFactory_Sf_SwigStatic_methods,
    swig_IRenderWindowFactory_Sf_SwigStatic_attributes,
    swig_IRenderWindowFactory_Sf_SwigStatic_constants,
    swig_IRenderWindowFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IRenderWindowFactory_bases[] = {0};
static const char *swig_IRenderWindowFactory_base_names[] = {0};
static swig_lua_class _wrap_class_IRenderWindowFactory = { "IRenderWindowFactory", "IRenderWindowFactory", &SWIGTYPE_p_open__IRenderWindowFactory,0, swig_delete_IRenderWindowFactory, swig_IRenderWindowFactory_methods, swig_IRenderWindowFactory_attributes, &swig_IRenderWindowFactory_Sf_SwigStatic, swig_IRenderWindowFactory_meta, swig_IRenderWindowFactory_bases, swig_IRenderWindowFactory_base_names };

static int _wrap_IRenderBuffer_alloc(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderBuffer *arg1 = (open::IRenderBuffer *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  open::PixelInternalFormat arg4 ;
  
  SWIG_check_num_args("open::IRenderBuffer::alloc",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderBuffer::alloc",1,"open::IRenderBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IRenderBuffer::alloc",2,"int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IRenderBuffer::alloc",3,"int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::IRenderBuffer::alloc",4,"open::PixelInternalFormat");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderBuffer,0))){
    SWIG_fail_ptr("IRenderBuffer_alloc",1,SWIGTYPE_p_open__IRenderBuffer);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  arg3 = (int32)lua_tonumber(L, 3);
  arg4 = (open::PixelInternalFormat)(int)lua_tonumber(L, 4);
  (arg1)->alloc(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderBuffer_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderBuffer *arg1 = (open::IRenderBuffer *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::IRenderBuffer::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderBuffer::getWidth",1,"open::IRenderBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderBuffer,0))){
    SWIG_fail_ptr("IRenderBuffer_getWidth",1,SWIGTYPE_p_open__IRenderBuffer);
  }
  
  result = (int32)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderBuffer_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderBuffer *arg1 = (open::IRenderBuffer *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::IRenderBuffer::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderBuffer::getHeight",1,"open::IRenderBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderBuffer,0))){
    SWIG_fail_ptr("IRenderBuffer_getHeight",1,SWIGTYPE_p_open__IRenderBuffer);
  }
  
  result = (int32)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IRenderBuffer(void *obj) {
open::IRenderBuffer *arg1 = (open::IRenderBuffer *) obj;
delete arg1;
}
static swig_lua_attribute swig_IRenderBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IRenderBuffer_methods[]= {
    { "alloc", _wrap_IRenderBuffer_alloc},
    { "getWidth", _wrap_IRenderBuffer_getWidth},
    { "getHeight", _wrap_IRenderBuffer_getHeight},
    {0,0}
};
static swig_lua_method swig_IRenderBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IRenderBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IRenderBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IRenderBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IRenderBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IRenderBuffer_Sf_SwigStatic = {
    "IRenderBuffer",
    swig_IRenderBuffer_Sf_SwigStatic_methods,
    swig_IRenderBuffer_Sf_SwigStatic_attributes,
    swig_IRenderBuffer_Sf_SwigStatic_constants,
    swig_IRenderBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IRenderBuffer_bases[] = {0};
static const char *swig_IRenderBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_IRenderBuffer = { "IRenderBuffer", "IRenderBuffer", &SWIGTYPE_p_open__IRenderBuffer,0, swig_delete_IRenderBuffer, swig_IRenderBuffer_methods, swig_IRenderBuffer_attributes, &swig_IRenderBuffer_Sf_SwigStatic, swig_IRenderBuffer_meta, swig_IRenderBuffer_bases, swig_IRenderBuffer_base_names };

static int _wrap_IFrameBuffer_attach__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IFrameBuffer *arg1 = (open::IFrameBuffer *) 0 ;
  open::FrameBufferAttachment arg2 ;
  open::IRenderBuffer *arg3 = (open::IRenderBuffer *) 0 ;
  
  SWIG_check_num_args("open::IFrameBuffer::attach",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IFrameBuffer::attach",1,"open::IFrameBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IFrameBuffer::attach",2,"open::FrameBufferAttachment");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("open::IFrameBuffer::attach",3,"open::IRenderBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IFrameBuffer,0))){
    SWIG_fail_ptr("IFrameBuffer_attach",1,SWIGTYPE_p_open__IFrameBuffer);
  }
  
  arg2 = (open::FrameBufferAttachment)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_open__IRenderBuffer,0))){
    SWIG_fail_ptr("IFrameBuffer_attach",3,SWIGTYPE_p_open__IRenderBuffer);
  }
  
  (arg1)->attach(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameBuffer_attach__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IFrameBuffer *arg1 = (open::IFrameBuffer *) 0 ;
  open::FrameBufferAttachment arg2 ;
  open::ITexture *arg3 = (open::ITexture *) 0 ;
  
  SWIG_check_num_args("open::IFrameBuffer::attach",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IFrameBuffer::attach",1,"open::IFrameBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IFrameBuffer::attach",2,"open::FrameBufferAttachment");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("open::IFrameBuffer::attach",3,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IFrameBuffer,0))){
    SWIG_fail_ptr("IFrameBuffer_attach",1,SWIGTYPE_p_open__IFrameBuffer);
  }
  
  arg2 = (open::FrameBufferAttachment)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_open__ITexture,0))){
    SWIG_fail_ptr("IFrameBuffer_attach",3,SWIGTYPE_p_open__ITexture);
  }
  
  (arg1)->attach(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameBuffer_attach(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IFrameBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_open__IRenderBuffer, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IFrameBuffer_attach__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IFrameBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_open__ITexture, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_IFrameBuffer_attach__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IFrameBuffer_attach'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IFrameBuffer::attach(open::FrameBufferAttachment,open::IRenderBuffer *)\n"
    "    open::IFrameBuffer::attach(open::FrameBufferAttachment,open::ITexture *)\n");
  lua_error(L);return 0;
}


static int _wrap_IFrameBuffer_detach__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IFrameBuffer *arg1 = (open::IFrameBuffer *) 0 ;
  open::FrameBufferAttachment arg2 ;
  
  SWIG_check_num_args("open::IFrameBuffer::detach",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IFrameBuffer::detach",1,"open::IFrameBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IFrameBuffer::detach",2,"open::FrameBufferAttachment");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IFrameBuffer,0))){
    SWIG_fail_ptr("IFrameBuffer_detach",1,SWIGTYPE_p_open__IFrameBuffer);
  }
  
  arg2 = (open::FrameBufferAttachment)(int)lua_tonumber(L, 2);
  (arg1)->detach(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameBuffer_detach__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IFrameBuffer *arg1 = (open::IFrameBuffer *) 0 ;
  
  SWIG_check_num_args("open::IFrameBuffer::detach",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IFrameBuffer::detach",1,"open::IFrameBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IFrameBuffer,0))){
    SWIG_fail_ptr("IFrameBuffer_detach",1,SWIGTYPE_p_open__IFrameBuffer);
  }
  
  (arg1)->detach();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFrameBuffer_detach(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IFrameBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_IFrameBuffer_detach__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IFrameBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IFrameBuffer_detach__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IFrameBuffer_detach'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IFrameBuffer::detach(open::FrameBufferAttachment)\n"
    "    open::IFrameBuffer::detach()\n");
  lua_error(L);return 0;
}


static int _wrap_IFrameBuffer_asFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  open::IFrameBuffer *arg1 = (open::IFrameBuffer *) 0 ;
  open::IFrameBuffer *result = 0 ;
  
  SWIG_check_num_args("open::IFrameBuffer::asFrameBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IFrameBuffer::asFrameBuffer",1,"open::IFrameBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IFrameBuffer,0))){
    SWIG_fail_ptr("IFrameBuffer_asFrameBuffer",1,SWIGTYPE_p_open__IFrameBuffer);
  }
  
  result = (open::IFrameBuffer *)(arg1)->asFrameBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IFrameBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IFrameBuffer(void *obj) {
open::IFrameBuffer *arg1 = (open::IFrameBuffer *) obj;
delete arg1;
}
static swig_lua_attribute swig_IFrameBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IFrameBuffer_methods[]= {
    { "attach", _wrap_IFrameBuffer_attach},
    { "detach", _wrap_IFrameBuffer_detach},
    { "asFrameBuffer", _wrap_IFrameBuffer_asFrameBuffer},
    {0,0}
};
static swig_lua_method swig_IFrameBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IFrameBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IFrameBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IFrameBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IFrameBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IFrameBuffer_Sf_SwigStatic = {
    "IFrameBuffer",
    swig_IFrameBuffer_Sf_SwigStatic_methods,
    swig_IFrameBuffer_Sf_SwigStatic_attributes,
    swig_IFrameBuffer_Sf_SwigStatic_constants,
    swig_IFrameBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IFrameBuffer_bases[] = {0,0};
static const char *swig_IFrameBuffer_base_names[] = {"open::IRenderTarget *",0};
static swig_lua_class _wrap_class_IFrameBuffer = { "IFrameBuffer", "IFrameBuffer", &SWIGTYPE_p_open__IFrameBuffer,0, swig_delete_IFrameBuffer, swig_IFrameBuffer_methods, swig_IFrameBuffer_attributes, &swig_IFrameBuffer_Sf_SwigStatic, swig_IFrameBuffer_meta, swig_IFrameBuffer_bases, swig_IFrameBuffer_base_names };

static int _wrap_IRenderPool_setViewMatrix(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  RMatrix *arg2 = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::setViewMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::setViewMatrix",1,"open::IRenderPool *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::IRenderPool::setViewMatrix",2,"RMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_setViewMatrix",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RMatrix,0))){
    SWIG_fail_ptr("IRenderPool_setViewMatrix",2,SWIGTYPE_p_RMatrix);
  }
  
  (arg1)->setViewMatrix((RMatrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_setProjectMatrix(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  RMatrix *arg2 = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::setProjectMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::setProjectMatrix",1,"open::IRenderPool *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::IRenderPool::setProjectMatrix",2,"RMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_setProjectMatrix",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RMatrix,0))){
    SWIG_fail_ptr("IRenderPool_setProjectMatrix",2,SWIGTYPE_p_RMatrix);
  }
  
  (arg1)->setProjectMatrix((RMatrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_getViewMatrix(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  RMatrix *result = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::getViewMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::getViewMatrix",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_getViewMatrix",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  result = (RMatrix *) &(arg1)->getViewMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_getProjectMatrix(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  RMatrix *result = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::getProjectMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::getProjectMatrix",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_getProjectMatrix",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  result = (RMatrix *) &(arg1)->getProjectMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_getRenderTarget(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IRenderTarget *result = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::getRenderTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::getRenderTarget",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_getRenderTarget",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  result = (open::IRenderTarget *)(arg1)->getRenderTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderTarget,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_applyRenderTarget(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IRenderTarget *arg2 = (open::IRenderTarget *) 0 ;
  
  SWIG_check_num_args("open::IRenderPool::applyRenderTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::applyRenderTarget",1,"open::IRenderPool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderPool::applyRenderTarget",2,"open::IRenderTarget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_applyRenderTarget",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IRenderTarget,0))){
    SWIG_fail_ptr("IRenderPool_applyRenderTarget",2,SWIGTYPE_p_open__IRenderTarget);
  }
  
  (arg1)->applyRenderTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_getDefaultRenderTarget(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IRenderTarget *result = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::getDefaultRenderTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::getDefaultRenderTarget",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_getDefaultRenderTarget",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  result = (open::IRenderTarget *)(arg1)->getDefaultRenderTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderTarget,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_setDefaultRenderTarget(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IRenderTarget *arg2 = (open::IRenderTarget *) 0 ;
  
  SWIG_check_num_args("open::IRenderPool::setDefaultRenderTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::setDefaultRenderTarget",1,"open::IRenderPool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderPool::setDefaultRenderTarget",2,"open::IRenderTarget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_setDefaultRenderTarget",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IRenderTarget,0))){
    SWIG_fail_ptr("IRenderPool_setDefaultRenderTarget",2,SWIGTYPE_p_open__IRenderTarget);
  }
  
  (arg1)->setDefaultRenderTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_getLightManager(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::ILightManager *result = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::getLightManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::getLightManager",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_getLightManager",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  result = (open::ILightManager *)(arg1)->getLightManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ILightManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_resetRenderState(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  
  SWIG_check_num_args("open::IRenderPool::resetRenderState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::resetRenderState",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_resetRenderState",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  (arg1)->resetRenderState();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_setClearColor(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::Vec4f *arg2 = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::setClearColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::setClearColor",1,"open::IRenderPool *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::IRenderPool::setClearColor",2,"open::Vec4f const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_setClearColor",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Vec4T_float_t,0))){
    SWIG_fail_ptr("IRenderPool_setClearColor",2,SWIGTYPE_p_open__Vec4T_float_t);
  }
  
  (arg1)->setClearColor((open::Vec4f const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_setClearDepth(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::IRenderPool::setClearDepth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::setClearDepth",1,"open::IRenderPool *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IRenderPool::setClearDepth",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_setClearDepth",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setClearDepth(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_setClearStencil(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::IRenderPool::setClearStencil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::setClearStencil",1,"open::IRenderPool *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IRenderPool::setClearStencil",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_setClearStencil",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->setClearStencil(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_clear(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  uint32 arg2 ;
  
  SWIG_check_num_args("open::IRenderPool::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::clear",1,"open::IRenderPool *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IRenderPool::clear",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_clear",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_applyViewport(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  
  SWIG_check_num_args("open::IRenderPool::applyViewport",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::applyViewport",1,"open::IRenderPool *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::IRenderPool::applyViewport",2,"int32");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IRenderPool::applyViewport",3,"int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::IRenderPool::applyViewport",4,"int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::IRenderPool::applyViewport",5,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_applyViewport",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  arg3 = (int32)lua_tonumber(L, 3);
  arg4 = (int32)lua_tonumber(L, 4);
  arg5 = (int32)lua_tonumber(L, 5);
  (arg1)->applyViewport(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_applyProgram(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IProgram *arg2 = (open::IProgram *) 0 ;
  
  SWIG_check_num_args("open::IRenderPool::applyProgram",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::applyProgram",1,"open::IRenderPool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderPool::applyProgram",2,"open::IProgram *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_applyProgram",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IProgram,0))){
    SWIG_fail_ptr("IRenderPool_applyProgram",2,SWIGTYPE_p_open__IProgram);
  }
  
  (arg1)->applyProgram(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_applyRenderStateSet(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::RenderStateSet *arg2 = 0 ;
  
  SWIG_check_num_args("open::IRenderPool::applyRenderStateSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::applyRenderStateSet",1,"open::IRenderPool *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::IRenderPool::applyRenderStateSet",2,"open::RenderStateSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_applyRenderStateSet",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__RenderStateSet,0))){
    SWIG_fail_ptr("IRenderPool_applyRenderStateSet",2,SWIGTYPE_p_open__RenderStateSet);
  }
  
  (arg1)->applyRenderStateSet((open::RenderStateSet const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_applyTextureUnits(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::ITextureUnitSet *arg2 = (open::ITextureUnitSet *) 0 ;
  
  SWIG_check_num_args("open::IRenderPool::applyTextureUnits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::applyTextureUnits",1,"open::IRenderPool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderPool::applyTextureUnits",2,"open::ITextureUnitSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_applyTextureUnits",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ITextureUnitSet,0))){
    SWIG_fail_ptr("IRenderPool_applyTextureUnits",2,SWIGTYPE_p_open__ITextureUnitSet);
  }
  
  (arg1)->applyTextureUnits(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_beginStatisticsBatch(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  
  SWIG_check_num_args("open::IRenderPool::beginStatisticsBatch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::beginStatisticsBatch",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_beginStatisticsBatch",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  (arg1)->beginStatisticsBatch();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_endStatisticsBatch(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::IRenderPool::endStatisticsBatch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::endStatisticsBatch",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_endStatisticsBatch",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  result = (int32)(arg1)->endStatisticsBatch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IVertexArrayObject *arg2 = (open::IVertexArrayObject *) 0 ;
  open::IVertexIndexObject *arg3 = (open::IVertexIndexObject *) 0 ;
  open::DrawMode arg4 ;
  int32 arg5 ;
  
  SWIG_check_num_args("open::IRenderPool::apply",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::apply",1,"open::IRenderPool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderPool::apply",2,"open::IVertexArrayObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("open::IRenderPool::apply",3,"open::IVertexIndexObject *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::IRenderPool::apply",4,"open::DrawMode");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::IRenderPool::apply",5,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_apply",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IRenderPool_apply",2,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_open__IVertexIndexObject,0))){
    SWIG_fail_ptr("IRenderPool_apply",3,SWIGTYPE_p_open__IVertexIndexObject);
  }
  
  arg4 = (open::DrawMode)(int)lua_tonumber(L, 4);
  arg5 = (int32)lua_tonumber(L, 5);
  (arg1)->apply(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IVertexArrayObject *arg2 = (open::IVertexArrayObject *) 0 ;
  open::IVertexIndexObject *arg3 = (open::IVertexIndexObject *) 0 ;
  open::DrawMode arg4 ;
  
  SWIG_check_num_args("open::IRenderPool::apply",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::apply",1,"open::IRenderPool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderPool::apply",2,"open::IVertexArrayObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("open::IRenderPool::apply",3,"open::IVertexIndexObject *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::IRenderPool::apply",4,"open::DrawMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_apply",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IRenderPool_apply",2,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_open__IVertexIndexObject,0))){
    SWIG_fail_ptr("IRenderPool_apply",3,SWIGTYPE_p_open__IVertexIndexObject);
  }
  
  arg4 = (open::DrawMode)(int)lua_tonumber(L, 4);
  (arg1)->apply(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_apply__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IVertexArrayObject *arg2 = (open::IVertexArrayObject *) 0 ;
  int32 arg3 ;
  int32 arg4 ;
  open::DrawMode arg5 ;
  int32 arg6 ;
  
  SWIG_check_num_args("open::IRenderPool::apply",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::apply",1,"open::IRenderPool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderPool::apply",2,"open::IVertexArrayObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IRenderPool::apply",3,"int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::IRenderPool::apply",4,"int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::IRenderPool::apply",5,"open::DrawMode");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("open::IRenderPool::apply",6,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_apply",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IRenderPool_apply",2,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  arg3 = (int32)lua_tonumber(L, 3);
  arg4 = (int32)lua_tonumber(L, 4);
  arg5 = (open::DrawMode)(int)lua_tonumber(L, 5);
  arg6 = (int32)lua_tonumber(L, 6);
  (arg1)->apply(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_apply__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  open::IVertexArrayObject *arg2 = (open::IVertexArrayObject *) 0 ;
  int32 arg3 ;
  int32 arg4 ;
  open::DrawMode arg5 ;
  
  SWIG_check_num_args("open::IRenderPool::apply",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::apply",1,"open::IRenderPool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderPool::apply",2,"open::IVertexArrayObject *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("open::IRenderPool::apply",3,"int32");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("open::IRenderPool::apply",4,"int32");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("open::IRenderPool::apply",5,"open::DrawMode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_apply",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IVertexArrayObject,0))){
    SWIG_fail_ptr("IRenderPool_apply",2,SWIGTYPE_p_open__IVertexArrayObject);
  }
  
  arg3 = (int32)lua_tonumber(L, 3);
  arg4 = (int32)lua_tonumber(L, 4);
  arg5 = (open::DrawMode)(int)lua_tonumber(L, 5);
  (arg1)->apply(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderPool_apply(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IRenderPool, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__IVertexArrayObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_open__IVertexIndexObject, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IRenderPool_apply__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IRenderPool, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__IVertexArrayObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_open__IVertexIndexObject, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IRenderPool_apply__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IRenderPool, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__IVertexArrayObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IRenderPool_apply__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__IRenderPool, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__IVertexArrayObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_IRenderPool_apply__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IRenderPool_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::IRenderPool::apply(open::IVertexArrayObject *,open::IVertexIndexObject *,open::DrawMode,int32)\n"
    "    open::IRenderPool::apply(open::IVertexArrayObject *,open::IVertexIndexObject *,open::DrawMode)\n"
    "    open::IRenderPool::apply(open::IVertexArrayObject *,int32,int32,open::DrawMode,int32)\n"
    "    open::IRenderPool::apply(open::IVertexArrayObject *,int32,int32,open::DrawMode)\n");
  lua_error(L);return 0;
}


static int _wrap_IRenderPool_garbageResource(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *arg1 = (open::IRenderPool *) 0 ;
  
  SWIG_check_num_args("open::IRenderPool::garbageResource",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderPool::garbageResource",1,"open::IRenderPool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderPool,0))){
    SWIG_fail_ptr("IRenderPool_garbageResource",1,SWIGTYPE_p_open__IRenderPool);
  }
  
  (arg1)->garbageResource();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IRenderPool(void *obj) {
open::IRenderPool *arg1 = (open::IRenderPool *) obj;
delete arg1;
}
static swig_lua_attribute swig_IRenderPool_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IRenderPool_methods[]= {
    { "setViewMatrix", _wrap_IRenderPool_setViewMatrix},
    { "setProjectMatrix", _wrap_IRenderPool_setProjectMatrix},
    { "getViewMatrix", _wrap_IRenderPool_getViewMatrix},
    { "getProjectMatrix", _wrap_IRenderPool_getProjectMatrix},
    { "getRenderTarget", _wrap_IRenderPool_getRenderTarget},
    { "applyRenderTarget", _wrap_IRenderPool_applyRenderTarget},
    { "getDefaultRenderTarget", _wrap_IRenderPool_getDefaultRenderTarget},
    { "setDefaultRenderTarget", _wrap_IRenderPool_setDefaultRenderTarget},
    { "getLightManager", _wrap_IRenderPool_getLightManager},
    { "resetRenderState", _wrap_IRenderPool_resetRenderState},
    { "setClearColor", _wrap_IRenderPool_setClearColor},
    { "setClearDepth", _wrap_IRenderPool_setClearDepth},
    { "setClearStencil", _wrap_IRenderPool_setClearStencil},
    { "clear", _wrap_IRenderPool_clear},
    { "applyViewport", _wrap_IRenderPool_applyViewport},
    { "applyProgram", _wrap_IRenderPool_applyProgram},
    { "applyRenderStateSet", _wrap_IRenderPool_applyRenderStateSet},
    { "applyTextureUnits", _wrap_IRenderPool_applyTextureUnits},
    { "beginStatisticsBatch", _wrap_IRenderPool_beginStatisticsBatch},
    { "endStatisticsBatch", _wrap_IRenderPool_endStatisticsBatch},
    { "apply", _wrap_IRenderPool_apply},
    { "garbageResource", _wrap_IRenderPool_garbageResource},
    {0,0}
};
static swig_lua_method swig_IRenderPool_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IRenderPool_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IRenderPool_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IRenderPool_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IRenderPool_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IRenderPool_Sf_SwigStatic = {
    "IRenderPool",
    swig_IRenderPool_Sf_SwigStatic_methods,
    swig_IRenderPool_Sf_SwigStatic_attributes,
    swig_IRenderPool_Sf_SwigStatic_constants,
    swig_IRenderPool_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IRenderPool_bases[] = {0};
static const char *swig_IRenderPool_base_names[] = {0};
static swig_lua_class _wrap_class_IRenderPool = { "IRenderPool", "IRenderPool", &SWIGTYPE_p_open__IRenderPool,0, swig_delete_IRenderPool, swig_IRenderPool_methods, swig_IRenderPool_attributes, &swig_IRenderPool_Sf_SwigStatic, swig_IRenderPool_meta, swig_IRenderPool_bases, swig_IRenderPool_base_names };

static int _wrap_GBuffer_depthTexture_set(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *arg1 = (open::GBuffer *) 0 ;
  open::ITexture *arg2 = (open::ITexture *) 0 ;
  
  SWIG_check_num_args("open::GBuffer::depthTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::GBuffer::depthTexture",1,"open::GBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::GBuffer::depthTexture",2,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__GBuffer,0))){
    SWIG_fail_ptr("GBuffer_depthTexture_set",1,SWIGTYPE_p_open__GBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ITexture,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("GBuffer_depthTexture_set",2,SWIGTYPE_p_open__ITexture);
  }
  
  if (arg1) (arg1)->depthTexture = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GBuffer_depthTexture_get(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *arg1 = (open::GBuffer *) 0 ;
  open::ITexture *result = 0 ;
  
  SWIG_check_num_args("open::GBuffer::depthTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::GBuffer::depthTexture",1,"open::GBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__GBuffer,0))){
    SWIG_fail_ptr("GBuffer_depthTexture_get",1,SWIGTYPE_p_open__GBuffer);
  }
  
  result = (open::ITexture *) ((arg1)->depthTexture);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITexture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GBuffer_normal_shininessTexture_set(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *arg1 = (open::GBuffer *) 0 ;
  open::ITexture *arg2 = (open::ITexture *) 0 ;
  
  SWIG_check_num_args("open::GBuffer::normal_shininessTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::GBuffer::normal_shininessTexture",1,"open::GBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::GBuffer::normal_shininessTexture",2,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__GBuffer,0))){
    SWIG_fail_ptr("GBuffer_normal_shininessTexture_set",1,SWIGTYPE_p_open__GBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ITexture,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("GBuffer_normal_shininessTexture_set",2,SWIGTYPE_p_open__ITexture);
  }
  
  if (arg1) (arg1)->normal_shininessTexture = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GBuffer_normal_shininessTexture_get(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *arg1 = (open::GBuffer *) 0 ;
  open::ITexture *result = 0 ;
  
  SWIG_check_num_args("open::GBuffer::normal_shininessTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::GBuffer::normal_shininessTexture",1,"open::GBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__GBuffer,0))){
    SWIG_fail_ptr("GBuffer_normal_shininessTexture_get",1,SWIGTYPE_p_open__GBuffer);
  }
  
  result = (open::ITexture *) ((arg1)->normal_shininessTexture);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITexture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GBuffer_diffuse_specularTexture_set(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *arg1 = (open::GBuffer *) 0 ;
  open::ITexture *arg2 = (open::ITexture *) 0 ;
  
  SWIG_check_num_args("open::GBuffer::diffuse_specularTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::GBuffer::diffuse_specularTexture",1,"open::GBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::GBuffer::diffuse_specularTexture",2,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__GBuffer,0))){
    SWIG_fail_ptr("GBuffer_diffuse_specularTexture_set",1,SWIGTYPE_p_open__GBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ITexture,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("GBuffer_diffuse_specularTexture_set",2,SWIGTYPE_p_open__ITexture);
  }
  
  if (arg1) (arg1)->diffuse_specularTexture = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GBuffer_diffuse_specularTexture_get(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *arg1 = (open::GBuffer *) 0 ;
  open::ITexture *result = 0 ;
  
  SWIG_check_num_args("open::GBuffer::diffuse_specularTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::GBuffer::diffuse_specularTexture",1,"open::GBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__GBuffer,0))){
    SWIG_fail_ptr("GBuffer_diffuse_specularTexture_get",1,SWIGTYPE_p_open__GBuffer);
  }
  
  result = (open::ITexture *) ((arg1)->diffuse_specularTexture);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITexture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GBuffer_emissive_materialTexture_set(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *arg1 = (open::GBuffer *) 0 ;
  open::ITexture *arg2 = (open::ITexture *) 0 ;
  
  SWIG_check_num_args("open::GBuffer::emissive_materialTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::GBuffer::emissive_materialTexture",1,"open::GBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::GBuffer::emissive_materialTexture",2,"open::ITexture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__GBuffer,0))){
    SWIG_fail_ptr("GBuffer_emissive_materialTexture_set",1,SWIGTYPE_p_open__GBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ITexture,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("GBuffer_emissive_materialTexture_set",2,SWIGTYPE_p_open__ITexture);
  }
  
  if (arg1) (arg1)->emissive_materialTexture = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GBuffer_emissive_materialTexture_get(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *arg1 = (open::GBuffer *) 0 ;
  open::ITexture *result = 0 ;
  
  SWIG_check_num_args("open::GBuffer::emissive_materialTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::GBuffer::emissive_materialTexture",1,"open::GBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__GBuffer,0))){
    SWIG_fail_ptr("GBuffer_emissive_materialTexture_get",1,SWIGTYPE_p_open__GBuffer);
  }
  
  result = (open::ITexture *) ((arg1)->emissive_materialTexture);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITexture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GBuffer(lua_State* L) {
  int SWIG_arg = 0;
  open::GBuffer *result = 0 ;
  
  SWIG_check_num_args("open::GBuffer::GBuffer",0,0)
  result = (open::GBuffer *)new open::GBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__GBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GBuffer(void *obj) {
open::GBuffer *arg1 = (open::GBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_GBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GBuffer_attributes[] = {
    { "depthTexture", _wrap_GBuffer_depthTexture_get, _wrap_GBuffer_depthTexture_set },
    { "normal_shininessTexture", _wrap_GBuffer_normal_shininessTexture_get, _wrap_GBuffer_normal_shininessTexture_set },
    { "diffuse_specularTexture", _wrap_GBuffer_diffuse_specularTexture_get, _wrap_GBuffer_diffuse_specularTexture_set },
    { "emissive_materialTexture", _wrap_GBuffer_emissive_materialTexture_get, _wrap_GBuffer_emissive_materialTexture_set },
    {0,0,0}
};
static swig_lua_method swig_GBuffer_methods[]= {
    {0,0}
};
static swig_lua_method swig_GBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GBuffer_Sf_SwigStatic = {
    "GBuffer",
    swig_GBuffer_Sf_SwigStatic_methods,
    swig_GBuffer_Sf_SwigStatic_attributes,
    swig_GBuffer_Sf_SwigStatic_constants,
    swig_GBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GBuffer_bases[] = {0};
static const char *swig_GBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_GBuffer = { "GBuffer", "GBuffer", &SWIGTYPE_p_open__GBuffer,_proxy__wrap_new_GBuffer, swig_delete_GBuffer, swig_GBuffer_methods, swig_GBuffer_attributes, &swig_GBuffer_Sf_SwigStatic, swig_GBuffer_meta, swig_GBuffer_bases, swig_GBuffer_base_names };

static int _wrap_Value_data_set(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  uint8 *arg2 ;
  
  SWIG_check_num_args("open::Value::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::data",1,"open::Value *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::Value::data",2,"uint8 [64]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_data_set",1,SWIGTYPE_p_open__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Value_data_set",2,SWIGTYPE_p_unsigned_char);
  }
  
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->data;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_data_get(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  uint8 *result = 0 ;
  
  SWIG_check_num_args("open::Value::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::data",1,"open::Value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_data_get",1,SWIGTYPE_p_open__Value);
  }
  
  result = (uint8 *)(uint8 *) ((arg1)->data);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_toInt32(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  int32 *result = 0 ;
  
  SWIG_check_num_args("open::Value::toInt32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::toInt32",1,"open::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_toInt32",1,SWIGTYPE_p_open__Value);
  }
  
  result = (int32 *) &((open::Value const *)arg1)->toInt32();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_toReal(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("open::Value::toReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::toReal",1,"open::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_toReal",1,SWIGTYPE_p_open__Value);
  }
  
  result = (float *) &((open::Value const *)arg1)->toReal();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_toReal2(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  Real2 *result = 0 ;
  
  SWIG_check_num_args("open::Value::toReal2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::toReal2",1,"open::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_toReal2",1,SWIGTYPE_p_open__Value);
  }
  
  result = (Real2 *) &((open::Value const *)arg1)->toReal2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Real2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_toReal3(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  Real3 *result = 0 ;
  
  SWIG_check_num_args("open::Value::toReal3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::toReal3",1,"open::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_toReal3",1,SWIGTYPE_p_open__Value);
  }
  
  result = (Real3 *) &((open::Value const *)arg1)->toReal3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Real3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_toReal4(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  Real4 *result = 0 ;
  
  SWIG_check_num_args("open::Value::toReal4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::toReal4",1,"open::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_toReal4",1,SWIGTYPE_p_open__Value);
  }
  
  result = (Real4 *) &((open::Value const *)arg1)->toReal4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Real4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_toReal16(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  RMatrix *result = 0 ;
  
  SWIG_check_num_args("open::Value::toReal16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::toReal16",1,"open::Value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_toReal16",1,SWIGTYPE_p_open__Value);
  }
  
  result = (RMatrix *) &((open::Value const *)arg1)->toReal16();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  int32 arg2 ;
  
  SWIG_check_num_args("open::Value::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::set",1,"open::Value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Value::set",2,"int32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_set",1,SWIGTYPE_p_open__Value);
  }
  
  arg2 = (int32)lua_tonumber(L, 2);
  (arg1)->set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("open::Value::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::set",1,"open::Value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::Value::set",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_set",1,SWIGTYPE_p_open__Value);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->set(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  Real2 *arg2 = 0 ;
  
  SWIG_check_num_args("open::Value::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::set",1,"open::Value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Value::set",2,"Real2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_set",1,SWIGTYPE_p_open__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Real2,0))){
    SWIG_fail_ptr("Value_set",2,SWIGTYPE_p_Real2);
  }
  
  (arg1)->set((Real2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  Real3 *arg2 = 0 ;
  
  SWIG_check_num_args("open::Value::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::set",1,"open::Value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Value::set",2,"Real3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_set",1,SWIGTYPE_p_open__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Real3,0))){
    SWIG_fail_ptr("Value_set",2,SWIGTYPE_p_Real3);
  }
  
  (arg1)->set((Real3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_set__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  Real4 *arg2 = 0 ;
  
  SWIG_check_num_args("open::Value::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::set",1,"open::Value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Value::set",2,"Real4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_set",1,SWIGTYPE_p_open__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Real4,0))){
    SWIG_fail_ptr("Value_set",2,SWIGTYPE_p_Real4);
  }
  
  (arg1)->set((Real4 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_set__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *arg1 = (open::Value *) 0 ;
  RMatrix *arg2 = 0 ;
  
  SWIG_check_num_args("open::Value::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Value::set",1,"open::Value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::Value::set",2,"RMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Value,0))){
    SWIG_fail_ptr("Value_set",1,SWIGTYPE_p_open__Value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RMatrix,0))){
    SWIG_fail_ptr("Value_set",2,SWIGTYPE_p_RMatrix);
  }
  
  (arg1)->set((RMatrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Value_set(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Real2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Value_set__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Real3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Value_set__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Real4, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Value_set__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RMatrix, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Value_set__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value_set__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_open__Value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Value_set__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Value_set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Value::set(int32)\n"
    "    open::Value::set(float)\n"
    "    open::Value::set(Real2 const &)\n"
    "    open::Value::set(Real3 const &)\n"
    "    open::Value::set(Real4 const &)\n"
    "    open::Value::set(RMatrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Value(lua_State* L) {
  int SWIG_arg = 0;
  open::Value *result = 0 ;
  
  SWIG_check_num_args("open::Value::Value",0,0)
  result = (open::Value *)new open::Value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Value(void *obj) {
open::Value *arg1 = (open::Value *) obj;
delete arg1;
}
static int _proxy__wrap_new_Value(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Value);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Value_attributes[] = {
    { "data", _wrap_Value_data_get, _wrap_Value_data_set },
    {0,0,0}
};
static swig_lua_method swig_Value_methods[]= {
    { "toInt32", _wrap_Value_toInt32},
    { "toReal", _wrap_Value_toReal},
    { "toReal2", _wrap_Value_toReal2},
    { "toReal3", _wrap_Value_toReal3},
    { "toReal4", _wrap_Value_toReal4},
    { "toReal16", _wrap_Value_toReal16},
    { "set", _wrap_Value_set},
    {0,0}
};
static swig_lua_method swig_Value_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Value_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Value_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Value_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Value_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Value_Sf_SwigStatic = {
    "Value",
    swig_Value_Sf_SwigStatic_methods,
    swig_Value_Sf_SwigStatic_attributes,
    swig_Value_Sf_SwigStatic_constants,
    swig_Value_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Value_bases[] = {0};
static const char *swig_Value_base_names[] = {0};
static swig_lua_class _wrap_class_Value = { "Value", "Value", &SWIGTYPE_p_open__Value,_proxy__wrap_new_Value, swig_delete_Value, swig_Value_methods, swig_Value_attributes, &swig_Value_Sf_SwigStatic, swig_Value_meta, swig_Value_bases, swig_Value_base_names };

static int _wrap_PreInstancData_matrix_set(lua_State* L) {
  int SWIG_arg = 0;
  open::PreInstancData *arg1 = (open::PreInstancData *) 0 ;
  RMatrix arg2 ;
  RMatrix *argp2 ;
  
  SWIG_check_num_args("open::PreInstancData::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::PreInstancData::matrix",1,"open::PreInstancData *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::PreInstancData::matrix",2,"RMatrix");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__PreInstancData,0))){
    SWIG_fail_ptr("PreInstancData_matrix_set",1,SWIGTYPE_p_open__PreInstancData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_RMatrix,0))){
    SWIG_fail_ptr("PreInstancData_matrix_set",2,SWIGTYPE_p_RMatrix);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->matrix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreInstancData_matrix_get(lua_State* L) {
  int SWIG_arg = 0;
  open::PreInstancData *arg1 = (open::PreInstancData *) 0 ;
  RMatrix result;
  
  SWIG_check_num_args("open::PreInstancData::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::PreInstancData::matrix",1,"open::PreInstancData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__PreInstancData,0))){
    SWIG_fail_ptr("PreInstancData_matrix_get",1,SWIGTYPE_p_open__PreInstancData);
  }
  
  result =  ((arg1)->matrix);
  {
    RMatrix * resultptr = new RMatrix((const RMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreInstancData_userData_set(lua_State* L) {
  int SWIG_arg = 0;
  open::PreInstancData *arg1 = (open::PreInstancData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("open::PreInstancData::userData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::PreInstancData::userData",1,"open::PreInstancData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::PreInstancData::userData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__PreInstancData,0))){
    SWIG_fail_ptr("PreInstancData_userData_set",1,SWIGTYPE_p_open__PreInstancData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PreInstancData_userData_set");
  if (arg1) (arg1)->userData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreInstancData_userData_get(lua_State* L) {
  int SWIG_arg = 0;
  open::PreInstancData *arg1 = (open::PreInstancData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("open::PreInstancData::userData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::PreInstancData::userData",1,"open::PreInstancData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__PreInstancData,0))){
    SWIG_fail_ptr("PreInstancData_userData_get",1,SWIGTYPE_p_open__PreInstancData);
  }
  
  result = (void *) ((arg1)->userData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PreInstancData(lua_State* L) {
  int SWIG_arg = 0;
  open::PreInstancData *result = 0 ;
  
  SWIG_check_num_args("open::PreInstancData::PreInstancData",0,0)
  result = (open::PreInstancData *)new open::PreInstancData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__PreInstancData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PreInstancData(void *obj) {
open::PreInstancData *arg1 = (open::PreInstancData *) obj;
delete arg1;
}
static int _proxy__wrap_new_PreInstancData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PreInstancData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PreInstancData_attributes[] = {
    { "matrix", _wrap_PreInstancData_matrix_get, _wrap_PreInstancData_matrix_set },
    { "userData", _wrap_PreInstancData_userData_get, _wrap_PreInstancData_userData_set },
    {0,0,0}
};
static swig_lua_method swig_PreInstancData_methods[]= {
    {0,0}
};
static swig_lua_method swig_PreInstancData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PreInstancData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PreInstancData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PreInstancData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PreInstancData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PreInstancData_Sf_SwigStatic = {
    "PreInstancData",
    swig_PreInstancData_Sf_SwigStatic_methods,
    swig_PreInstancData_Sf_SwigStatic_attributes,
    swig_PreInstancData_Sf_SwigStatic_constants,
    swig_PreInstancData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PreInstancData_bases[] = {0};
static const char *swig_PreInstancData_base_names[] = {0};
static swig_lua_class _wrap_class_PreInstancData = { "PreInstancData", "PreInstancData", &SWIGTYPE_p_open__PreInstancData,_proxy__wrap_new_PreInstancData, swig_delete_PreInstancData, swig_PreInstancData_methods, swig_PreInstancData_attributes, &swig_PreInstancData_Sf_SwigStatic, swig_PreInstancData_meta, swig_PreInstancData_bases, swig_PreInstancData_base_names };

static int _wrap_Shader_vert_set(lua_State* L) {
  int SWIG_arg = 0;
  open::Shader *arg1 = (open::Shader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("open::Shader::vert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Shader::vert",1,"open::Shader *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::Shader::vert",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Shader,0))){
    SWIG_fail_ptr("Shader_vert_set",1,SWIGTYPE_p_open__Shader);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->vert = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->vert, (const char *)arg2);
    } else {
      arg1->vert = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shader_vert_get(lua_State* L) {
  int SWIG_arg = 0;
  open::Shader *arg1 = (open::Shader *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("open::Shader::vert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Shader::vert",1,"open::Shader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Shader,0))){
    SWIG_fail_ptr("Shader_vert_get",1,SWIGTYPE_p_open__Shader);
  }
  
  result = (char *) ((arg1)->vert);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shader_frag_set(lua_State* L) {
  int SWIG_arg = 0;
  open::Shader *arg1 = (open::Shader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("open::Shader::frag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Shader::frag",1,"open::Shader *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::Shader::frag",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Shader,0))){
    SWIG_fail_ptr("Shader_frag_set",1,SWIGTYPE_p_open__Shader);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->frag = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->frag, (const char *)arg2);
    } else {
      arg1->frag = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shader_frag_get(lua_State* L) {
  int SWIG_arg = 0;
  open::Shader *arg1 = (open::Shader *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("open::Shader::frag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Shader::frag",1,"open::Shader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Shader,0))){
    SWIG_fail_ptr("Shader_frag_get",1,SWIGTYPE_p_open__Shader);
  }
  
  result = (char *) ((arg1)->frag);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shader_define_set(lua_State* L) {
  int SWIG_arg = 0;
  open::Shader *arg1 = (open::Shader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("open::Shader::define",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Shader::define",1,"open::Shader *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::Shader::define",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Shader,0))){
    SWIG_fail_ptr("Shader_define_set",1,SWIGTYPE_p_open__Shader);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->define = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->define, (const char *)arg2);
    } else {
      arg1->define = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Shader_define_get(lua_State* L) {
  int SWIG_arg = 0;
  open::Shader *arg1 = (open::Shader *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("open::Shader::define",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Shader::define",1,"open::Shader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Shader,0))){
    SWIG_fail_ptr("Shader_define_get",1,SWIGTYPE_p_open__Shader);
  }
  
  result = (char *) ((arg1)->define);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shader__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::Shader *result = 0 ;
  
  SWIG_check_num_args("open::Shader::Shader",0,0)
  result = (open::Shader *)new open::Shader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Shader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shader__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  open::Shader *result = 0 ;
  
  SWIG_check_num_args("open::Shader::Shader",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::Shader::Shader",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (open::Shader *)new open::Shader(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Shader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shader__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  open::Shader *result = 0 ;
  
  SWIG_check_num_args("open::Shader::Shader",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::Shader::Shader",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::Shader::Shader",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("open::Shader::Shader",3,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (open::Shader *)new open::Shader((char const *)arg1,(char const *)arg2,(char const *)arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Shader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shader__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  open::Shader *result = 0 ;
  
  SWIG_check_num_args("open::Shader::Shader",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::Shader::Shader",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::Shader::Shader",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (open::Shader *)new open::Shader((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Shader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Shader(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Shader__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Shader__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Shader__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Shader__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Shader'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::Shader::Shader()\n"
    "    open::Shader::Shader(int)\n"
    "    open::Shader::Shader(char const *,char const *,char const *)\n"
    "    open::Shader::Shader(char const *,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Shader_isNull(lua_State* L) {
  int SWIG_arg = 0;
  open::Shader *arg1 = (open::Shader *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::Shader::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::Shader::isNull",1,"open::Shader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__Shader,0))){
    SWIG_fail_ptr("Shader_isNull",1,SWIGTYPE_p_open__Shader);
  }
  
  result = (bool)(arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Shader(void *obj) {
open::Shader *arg1 = (open::Shader *) obj;
delete arg1;
}
static int _proxy__wrap_new_Shader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Shader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Shader_attributes[] = {
    { "vert", _wrap_Shader_vert_get, _wrap_Shader_vert_set },
    { "frag", _wrap_Shader_frag_get, _wrap_Shader_frag_set },
    { "define", _wrap_Shader_define_get, _wrap_Shader_define_set },
    {0,0,0}
};
static swig_lua_method swig_Shader_methods[]= {
    { "isNull", _wrap_Shader_isNull},
    {0,0}
};
static swig_lua_method swig_Shader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Shader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Shader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Shader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Shader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Shader_Sf_SwigStatic = {
    "Shader",
    swig_Shader_Sf_SwigStatic_methods,
    swig_Shader_Sf_SwigStatic_attributes,
    swig_Shader_Sf_SwigStatic_constants,
    swig_Shader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Shader_bases[] = {0};
static const char *swig_Shader_base_names[] = {0};
static swig_lua_class _wrap_class_Shader = { "Shader", "Shader", &SWIGTYPE_p_open__Shader,_proxy__wrap_new_Shader, swig_delete_Shader, swig_Shader_methods, swig_Shader_attributes, &swig_Shader_Sf_SwigStatic, swig_Shader_meta, swig_Shader_bases, swig_Shader_base_names };

static int _wrap_OutFrag_name_set(lua_State* L) {
  int SWIG_arg = 0;
  open::OutFrag *arg1 = (open::OutFrag *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("open::OutFrag::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::OutFrag::name",1,"open::OutFrag *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::OutFrag::name",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__OutFrag,0))){
    SWIG_fail_ptr("OutFrag_name_set",1,SWIGTYPE_p_open__OutFrag);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OutFrag_name_get(lua_State* L) {
  int SWIG_arg = 0;
  open::OutFrag *arg1 = (open::OutFrag *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("open::OutFrag::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::OutFrag::name",1,"open::OutFrag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__OutFrag,0))){
    SWIG_fail_ptr("OutFrag_name_get",1,SWIGTYPE_p_open__OutFrag);
  }
  
  result = (char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OutFrag_fragPositon_set(lua_State* L) {
  int SWIG_arg = 0;
  open::OutFrag *arg1 = (open::OutFrag *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("open::OutFrag::fragPositon",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::OutFrag::fragPositon",1,"open::OutFrag *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::OutFrag::fragPositon",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__OutFrag,0))){
    SWIG_fail_ptr("OutFrag_fragPositon_set",1,SWIGTYPE_p_open__OutFrag);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  if (arg1) (arg1)->fragPositon = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OutFrag_fragPositon_get(lua_State* L) {
  int SWIG_arg = 0;
  open::OutFrag *arg1 = (open::OutFrag *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("open::OutFrag::fragPositon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::OutFrag::fragPositon",1,"open::OutFrag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__OutFrag,0))){
    SWIG_fail_ptr("OutFrag_fragPositon_get",1,SWIGTYPE_p_open__OutFrag);
  }
  
  result = (uint8) ((arg1)->fragPositon);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutFrag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::OutFrag *result = 0 ;
  
  SWIG_check_num_args("open::OutFrag::OutFrag",0,0)
  result = (open::OutFrag *)new open::OutFrag();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__OutFrag,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutFrag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  open::OutFrag *result = 0 ;
  
  SWIG_check_num_args("open::OutFrag::OutFrag",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::OutFrag::OutFrag",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (open::OutFrag *)new open::OutFrag(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__OutFrag,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutFrag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  uint8 arg2 ;
  open::OutFrag *result = 0 ;
  
  SWIG_check_num_args("open::OutFrag::OutFrag",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::OutFrag::OutFrag",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::OutFrag::OutFrag",2,"uint8");
  arg1 = (char *)lua_tostring(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  result = (open::OutFrag *)new open::OutFrag((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__OutFrag,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutFrag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_OutFrag__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_OutFrag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_OutFrag__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OutFrag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::OutFrag::OutFrag()\n"
    "    open::OutFrag::OutFrag(int)\n"
    "    open::OutFrag::OutFrag(char const *,uint8)\n");
  lua_error(L);return 0;
}


static int _wrap_OutFrag_isNull(lua_State* L) {
  int SWIG_arg = 0;
  open::OutFrag *arg1 = (open::OutFrag *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::OutFrag::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::OutFrag::isNull",1,"open::OutFrag *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__OutFrag,0))){
    SWIG_fail_ptr("OutFrag_isNull",1,SWIGTYPE_p_open__OutFrag);
  }
  
  result = (bool)(arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OutFrag(void *obj) {
open::OutFrag *arg1 = (open::OutFrag *) obj;
delete arg1;
}
static int _proxy__wrap_new_OutFrag(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OutFrag);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OutFrag_attributes[] = {
    { "name", _wrap_OutFrag_name_get, _wrap_OutFrag_name_set },
    { "fragPositon", _wrap_OutFrag_fragPositon_get, _wrap_OutFrag_fragPositon_set },
    {0,0,0}
};
static swig_lua_method swig_OutFrag_methods[]= {
    { "isNull", _wrap_OutFrag_isNull},
    {0,0}
};
static swig_lua_method swig_OutFrag_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OutFrag_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OutFrag_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OutFrag_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OutFrag_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OutFrag_Sf_SwigStatic = {
    "OutFrag",
    swig_OutFrag_Sf_SwigStatic_methods,
    swig_OutFrag_Sf_SwigStatic_attributes,
    swig_OutFrag_Sf_SwigStatic_constants,
    swig_OutFrag_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OutFrag_bases[] = {0};
static const char *swig_OutFrag_base_names[] = {0};
static swig_lua_class _wrap_class_OutFrag = { "OutFrag", "OutFrag", &SWIGTYPE_p_open__OutFrag,_proxy__wrap_new_OutFrag, swig_delete_OutFrag, swig_OutFrag_methods, swig_OutFrag_attributes, &swig_OutFrag_Sf_SwigStatic, swig_OutFrag_meta, swig_OutFrag_bases, swig_OutFrag_base_names };

static int _wrap_UniformDetial_name_set(lua_State* L) {
  int SWIG_arg = 0;
  open::UniformDetial *arg1 = (open::UniformDetial *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("open::UniformDetial::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::UniformDetial::name",1,"open::UniformDetial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::UniformDetial::name",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__UniformDetial,0))){
    SWIG_fail_ptr("UniformDetial_name_set",1,SWIGTYPE_p_open__UniformDetial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniformDetial_name_get(lua_State* L) {
  int SWIG_arg = 0;
  open::UniformDetial *arg1 = (open::UniformDetial *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("open::UniformDetial::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::UniformDetial::name",1,"open::UniformDetial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__UniformDetial,0))){
    SWIG_fail_ptr("UniformDetial_name_get",1,SWIGTYPE_p_open__UniformDetial);
  }
  
  result = (char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniformDetial_type_set(lua_State* L) {
  int SWIG_arg = 0;
  open::UniformDetial *arg1 = (open::UniformDetial *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("open::UniformDetial::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::UniformDetial::type",1,"open::UniformDetial *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::UniformDetial::type",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__UniformDetial,0))){
    SWIG_fail_ptr("UniformDetial_type_set",1,SWIGTYPE_p_open__UniformDetial);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniformDetial_type_get(lua_State* L) {
  int SWIG_arg = 0;
  open::UniformDetial *arg1 = (open::UniformDetial *) 0 ;
  int result;
  
  SWIG_check_num_args("open::UniformDetial::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::UniformDetial::type",1,"open::UniformDetial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__UniformDetial,0))){
    SWIG_fail_ptr("UniformDetial_type_get",1,SWIGTYPE_p_open__UniformDetial);
  }
  
  result = (int) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniformDetial_uniformHandle_set(lua_State* L) {
  int SWIG_arg = 0;
  open::UniformDetial *arg1 = (open::UniformDetial *) 0 ;
  open::UniformDetial::UnifromHandle *arg2 = (open::UniformDetial::UnifromHandle *) 0 ;
  
  SWIG_check_num_args("open::UniformDetial::uniformHandle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::UniformDetial::uniformHandle",1,"open::UniformDetial *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::UniformDetial::uniformHandle",2,"open::UniformDetial::UnifromHandle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__UniformDetial,0))){
    SWIG_fail_ptr("UniformDetial_uniformHandle_set",1,SWIGTYPE_p_open__UniformDetial);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t,0))){
    SWIG_fail_ptr("UniformDetial_uniformHandle_set",2,SWIGTYPE_p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t);
  }
  
  if (arg1) (arg1)->uniformHandle = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniformDetial_uniformHandle_get(lua_State* L) {
  int SWIG_arg = 0;
  open::UniformDetial *arg1 = (open::UniformDetial *) 0 ;
  open::UniformDetial::UnifromHandle *result = 0 ;
  
  SWIG_check_num_args("open::UniformDetial::uniformHandle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::UniformDetial::uniformHandle",1,"open::UniformDetial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__UniformDetial,0))){
    SWIG_fail_ptr("UniformDetial_uniformHandle_get",1,SWIGTYPE_p_open__UniformDetial);
  }
  
  result = (open::UniformDetial::UnifromHandle *)& ((arg1)->uniformHandle);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UniformDetial__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::UniformDetial *result = 0 ;
  
  SWIG_check_num_args("open::UniformDetial::UniformDetial",0,0)
  result = (open::UniformDetial *)new open::UniformDetial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__UniformDetial,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UniformDetial__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  open::UniformDetial *result = 0 ;
  
  SWIG_check_num_args("open::UniformDetial::UniformDetial",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::UniformDetial::UniformDetial",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (open::UniformDetial *)new open::UniformDetial(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__UniformDetial,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UniformDetial__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::function< void (void *,open::IMaterial *,open::IRenderPool *,open::Value &) > > arg3 ;
  open::UniformDetial::UnifromHandle *argp3 ;
  open::UniformDetial *result = 0 ;
  
  SWIG_check_num_args("open::UniformDetial::UniformDetial",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::UniformDetial::UniformDetial",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::UniformDetial::UniformDetial",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("open::UniformDetial::UniformDetial",3,"open::UniformDetial::UnifromHandle");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t,0))){
    SWIG_fail_ptr("new_UniformDetial",3,SWIGTYPE_p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t);
  }
  arg3 = *argp3;
  
  result = (open::UniformDetial *)new open::UniformDetial((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__UniformDetial,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UniformDetial(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_UniformDetial__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_UniformDetial__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_UniformDetial__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UniformDetial'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::UniformDetial::UniformDetial()\n"
    "    open::UniformDetial::UniformDetial(int)\n"
    "    open::UniformDetial::UniformDetial(char const *,int,open::UniformDetial::UnifromHandle)\n");
  lua_error(L);return 0;
}


static int _wrap_UniformDetial_isNull(lua_State* L) {
  int SWIG_arg = 0;
  open::UniformDetial *arg1 = (open::UniformDetial *) 0 ;
  bool result;
  
  SWIG_check_num_args("open::UniformDetial::isNull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::UniformDetial::isNull",1,"open::UniformDetial const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__UniformDetial,0))){
    SWIG_fail_ptr("UniformDetial_isNull",1,SWIGTYPE_p_open__UniformDetial);
  }
  
  result = (bool)((open::UniformDetial const *)arg1)->isNull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UniformDetial(void *obj) {
open::UniformDetial *arg1 = (open::UniformDetial *) obj;
delete arg1;
}
static int _proxy__wrap_new_UniformDetial(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UniformDetial);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UniformDetial_attributes[] = {
    { "name", _wrap_UniformDetial_name_get, _wrap_UniformDetial_name_set },
    { "type", _wrap_UniformDetial_type_get, _wrap_UniformDetial_type_set },
    { "uniformHandle", _wrap_UniformDetial_uniformHandle_get, _wrap_UniformDetial_uniformHandle_set },
    {0,0,0}
};
static swig_lua_method swig_UniformDetial_methods[]= {
    { "isNull", _wrap_UniformDetial_isNull},
    {0,0}
};
static swig_lua_method swig_UniformDetial_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UniformDetial_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UniformDetial_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UniformDetial_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UniformDetial_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UniformDetial_Sf_SwigStatic = {
    "UniformDetial",
    swig_UniformDetial_Sf_SwigStatic_methods,
    swig_UniformDetial_Sf_SwigStatic_attributes,
    swig_UniformDetial_Sf_SwigStatic_constants,
    swig_UniformDetial_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UniformDetial_bases[] = {0};
static const char *swig_UniformDetial_base_names[] = {0};
static swig_lua_class _wrap_class_UniformDetial = { "UniformDetial", "UniformDetial", &SWIGTYPE_p_open__UniformDetial,_proxy__wrap_new_UniformDetial, swig_delete_UniformDetial, swig_UniformDetial_methods, swig_UniformDetial_attributes, &swig_UniformDetial_Sf_SwigStatic, swig_UniformDetial_meta, swig_UniformDetial_bases, swig_UniformDetial_base_names };

static int _wrap_RenderScript_name_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("open::RenderScript::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::name",1,"open::RenderScript *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::RenderScript::name",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_name_set",1,SWIGTYPE_p_open__RenderScript);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_name_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("open::RenderScript::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::name",1,"open::RenderScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_name_get",1,SWIGTYPE_p_open__RenderScript);
  }
  
  result = (char *) ((arg1)->name);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_shader_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::Shader *arg2 = (open::Shader *) 0 ;
  
  SWIG_check_num_args("open::RenderScript::shader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::shader",1,"open::RenderScript *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::RenderScript::shader",2,"open::Shader const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_shader_set",1,SWIGTYPE_p_open__RenderScript);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Shader,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("RenderScript_shader_set",2,SWIGTYPE_p_open__Shader);
  }
  
  if (arg1) (arg1)->shader = (open::Shader const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_shader_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::Shader *result = 0 ;
  
  SWIG_check_num_args("open::RenderScript::shader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::shader",1,"open::RenderScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_shader_get",1,SWIGTYPE_p_open__RenderScript);
  }
  
  result = (open::Shader *) ((arg1)->shader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Shader,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_outFrags_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::OutFrag *arg2 = (open::OutFrag *) 0 ;
  
  SWIG_check_num_args("open::RenderScript::outFrags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::outFrags",1,"open::RenderScript *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::RenderScript::outFrags",2,"open::OutFrag const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_outFrags_set",1,SWIGTYPE_p_open__RenderScript);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__OutFrag,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("RenderScript_outFrags_set",2,SWIGTYPE_p_open__OutFrag);
  }
  
  if (arg1) (arg1)->outFrags = (open::OutFrag const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_outFrags_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::OutFrag *result = 0 ;
  
  SWIG_check_num_args("open::RenderScript::outFrags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::outFrags",1,"open::RenderScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_outFrags_get",1,SWIGTYPE_p_open__RenderScript);
  }
  
  result = (open::OutFrag *) ((arg1)->outFrags);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__OutFrag,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_uniformDetials_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::UniformDetial *arg2 = (open::UniformDetial *) 0 ;
  
  SWIG_check_num_args("open::RenderScript::uniformDetials",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::uniformDetials",1,"open::RenderScript *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::RenderScript::uniformDetials",2,"open::UniformDetial const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_uniformDetials_set",1,SWIGTYPE_p_open__RenderScript);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__UniformDetial,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("RenderScript_uniformDetials_set",2,SWIGTYPE_p_open__UniformDetial);
  }
  
  if (arg1) (arg1)->uniformDetials = (open::UniformDetial const *)arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_uniformDetials_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::UniformDetial *result = 0 ;
  
  SWIG_check_num_args("open::RenderScript::uniformDetials",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::uniformDetials",1,"open::RenderScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_uniformDetials_get",1,SWIGTYPE_p_open__RenderScript);
  }
  
  result = (open::UniformDetial *) ((arg1)->uniformDetials);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__UniformDetial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_genInstance_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::RenderScript::GenInstanceHandle arg2 ;
  open::RenderScript::GenInstanceHandle *argp2 ;
  
  SWIG_check_num_args("open::RenderScript::genInstance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::genInstance",1,"open::RenderScript *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::RenderScript::genInstance",2,"open::RenderScript::GenInstanceHandle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_genInstance_set",1,SWIGTYPE_p_open__RenderScript);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t,0))){
    SWIG_fail_ptr("RenderScript_genInstance_set",2,SWIGTYPE_p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->genInstance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_genInstance_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::RenderScript::GenInstanceHandle result;
  
  SWIG_check_num_args("open::RenderScript::genInstance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::genInstance",1,"open::RenderScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_genInstance_get",1,SWIGTYPE_p_open__RenderScript);
  }
  
  result =  ((arg1)->genInstance);
  {
    open::RenderScript::GenInstanceHandle * resultptr = new open::RenderScript::GenInstanceHandle((const open::RenderScript::GenInstanceHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_begin_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::RenderScript::BeginHandle arg2 ;
  open::RenderScript::BeginHandle *argp2 ;
  
  SWIG_check_num_args("open::RenderScript::begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::begin",1,"open::RenderScript *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::RenderScript::begin",2,"open::RenderScript::BeginHandle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_begin_set",1,SWIGTYPE_p_open__RenderScript);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__functionT_void_pfvoidF_t,0))){
    SWIG_fail_ptr("RenderScript_begin_set",2,SWIGTYPE_p_std__functionT_void_pfvoidF_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->begin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_begin_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::RenderScript::BeginHandle result;
  
  SWIG_check_num_args("open::RenderScript::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::begin",1,"open::RenderScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_begin_get",1,SWIGTYPE_p_open__RenderScript);
  }
  
  result =  ((arg1)->begin);
  {
    open::RenderScript::BeginHandle * resultptr = new open::RenderScript::BeginHandle((const open::RenderScript::BeginHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_pfvoidF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_c_end_set(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::RenderScript::EndHandle arg2 ;
  open::RenderScript::EndHandle *argp2 ;
  
  SWIG_check_num_args("open::RenderScript::end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::end",1,"open::RenderScript *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::RenderScript::end",2,"open::RenderScript::EndHandle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_c_end_set",1,SWIGTYPE_p_open__RenderScript);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__functionT_void_fvoid_pF_t,0))){
    SWIG_fail_ptr("RenderScript_c_end_set",2,SWIGTYPE_p_std__functionT_void_fvoid_pF_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->end = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderScript_c_end_get(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *arg1 = (open::RenderScript *) 0 ;
  open::RenderScript::EndHandle result;
  
  SWIG_check_num_args("open::RenderScript::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::RenderScript::end",1,"open::RenderScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("RenderScript_c_end_get",1,SWIGTYPE_p_open__RenderScript);
  }
  
  result =  ((arg1)->end);
  {
    open::RenderScript::EndHandle * resultptr = new open::RenderScript::EndHandle((const open::RenderScript::EndHandle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_void_fvoid_pF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderScript(lua_State* L) {
  int SWIG_arg = 0;
  open::RenderScript *result = 0 ;
  
  SWIG_check_num_args("open::RenderScript::RenderScript",0,0)
  result = (open::RenderScript *)new open::RenderScript();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__RenderScript,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderScript(void *obj) {
open::RenderScript *arg1 = (open::RenderScript *) obj;
delete arg1;
}
static int _proxy__wrap_new_RenderScript(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RenderScript);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RenderScript_attributes[] = {
    { "name", _wrap_RenderScript_name_get, _wrap_RenderScript_name_set },
    { "shader", _wrap_RenderScript_shader_get, _wrap_RenderScript_shader_set },
    { "outFrags", _wrap_RenderScript_outFrags_get, _wrap_RenderScript_outFrags_set },
    { "uniformDetials", _wrap_RenderScript_uniformDetials_get, _wrap_RenderScript_uniformDetials_set },
    { "genInstance", _wrap_RenderScript_genInstance_get, _wrap_RenderScript_genInstance_set },
    { "begin", _wrap_RenderScript_begin_get, _wrap_RenderScript_begin_set },
    { "c_end", _wrap_RenderScript_c_end_get, _wrap_RenderScript_c_end_set },
    {0,0,0}
};
static swig_lua_method swig_RenderScript_methods[]= {
    {0,0}
};
static swig_lua_method swig_RenderScript_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RenderScript_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RenderScript_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RenderScript_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RenderScript_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RenderScript_Sf_SwigStatic = {
    "RenderScript",
    swig_RenderScript_Sf_SwigStatic_methods,
    swig_RenderScript_Sf_SwigStatic_attributes,
    swig_RenderScript_Sf_SwigStatic_constants,
    swig_RenderScript_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RenderScript_bases[] = {0};
static const char *swig_RenderScript_base_names[] = {0};
static swig_lua_class _wrap_class_RenderScript = { "RenderScript", "RenderScript", &SWIGTYPE_p_open__RenderScript,_proxy__wrap_new_RenderScript, swig_delete_RenderScript, swig_RenderScript_methods, swig_RenderScript_attributes, &swig_RenderScript_Sf_SwigStatic, swig_RenderScript_meta, swig_RenderScript_bases, swig_RenderScript_base_names };

static int _wrap_IRenderTechnique_setCamera(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTechnique *arg1 = (open::IRenderTechnique *) 0 ;
  open::ICamera *arg2 = (open::ICamera *) 0 ;
  
  SWIG_check_num_args("open::IRenderTechnique::setCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTechnique::setCamera",1,"open::IRenderTechnique *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderTechnique::setCamera",2,"open::ICamera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTechnique,0))){
    SWIG_fail_ptr("IRenderTechnique_setCamera",1,SWIGTYPE_p_open__IRenderTechnique);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__ICamera,0))){
    SWIG_fail_ptr("IRenderTechnique_setCamera",2,SWIGTYPE_p_open__ICamera);
  }
  
  (arg1)->setCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTechnique_getCamera(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTechnique *arg1 = (open::IRenderTechnique *) 0 ;
  open::ICamera *result = 0 ;
  
  SWIG_check_num_args("open::IRenderTechnique::getCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTechnique::getCamera",1,"open::IRenderTechnique *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTechnique,0))){
    SWIG_fail_ptr("IRenderTechnique_getCamera",1,SWIGTYPE_p_open__IRenderTechnique);
  }
  
  result = (open::ICamera *)(arg1)->getCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ICamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTechnique_setRenderTarget(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTechnique *arg1 = (open::IRenderTechnique *) 0 ;
  open::IRenderTarget *arg2 = (open::IRenderTarget *) 0 ;
  
  SWIG_check_num_args("open::IRenderTechnique::setRenderTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTechnique::setRenderTarget",1,"open::IRenderTechnique *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IRenderTechnique::setRenderTarget",2,"open::IRenderTarget *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTechnique,0))){
    SWIG_fail_ptr("IRenderTechnique_setRenderTarget",1,SWIGTYPE_p_open__IRenderTechnique);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IRenderTarget,0))){
    SWIG_fail_ptr("IRenderTechnique_setRenderTarget",2,SWIGTYPE_p_open__IRenderTarget);
  }
  
  (arg1)->setRenderTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTechnique_getRenderTarget(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTechnique *arg1 = (open::IRenderTechnique *) 0 ;
  open::IRenderTarget *result = 0 ;
  
  SWIG_check_num_args("open::IRenderTechnique::getRenderTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTechnique::getRenderTarget",1,"open::IRenderTechnique *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTechnique,0))){
    SWIG_fail_ptr("IRenderTechnique_getRenderTarget",1,SWIGTYPE_p_open__IRenderTechnique);
  }
  
  result = (open::IRenderTarget *)(arg1)->getRenderTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderTarget,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTechnique_setRenderScript(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTechnique *arg1 = (open::IRenderTechnique *) 0 ;
  open::RenderScript *arg2 = 0 ;
  
  SWIG_check_num_args("open::IRenderTechnique::setRenderScript",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTechnique::setRenderScript",1,"open::IRenderTechnique *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::IRenderTechnique::setRenderScript",2,"open::RenderScript const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTechnique,0))){
    SWIG_fail_ptr("IRenderTechnique_setRenderScript",1,SWIGTYPE_p_open__IRenderTechnique);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__RenderScript,0))){
    SWIG_fail_ptr("IRenderTechnique_setRenderScript",2,SWIGTYPE_p_open__RenderScript);
  }
  
  (arg1)->setRenderScript((open::RenderScript const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTechnique_getRenderScript(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTechnique *arg1 = (open::IRenderTechnique *) 0 ;
  open::RenderScript *result = 0 ;
  
  SWIG_check_num_args("open::IRenderTechnique::getRenderScript",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTechnique::getRenderScript",1,"open::IRenderTechnique *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTechnique,0))){
    SWIG_fail_ptr("IRenderTechnique_getRenderScript",1,SWIGTYPE_p_open__IRenderTechnique);
  }
  
  result = (open::RenderScript *) &(arg1)->getRenderScript();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__RenderScript,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IRenderTechnique_getProgram(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderTechnique *arg1 = (open::IRenderTechnique *) 0 ;
  open::IProgram *result = 0 ;
  
  SWIG_check_num_args("open::IRenderTechnique::getProgram",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IRenderTechnique::getProgram",1,"open::IRenderTechnique *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IRenderTechnique,0))){
    SWIG_fail_ptr("IRenderTechnique_getProgram",1,SWIGTYPE_p_open__IRenderTechnique);
  }
  
  result = (open::IProgram *)(arg1)->getProgram();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IProgram,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IRenderTechnique(void *obj) {
open::IRenderTechnique *arg1 = (open::IRenderTechnique *) obj;
delete arg1;
}
static swig_lua_attribute swig_IRenderTechnique_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IRenderTechnique_methods[]= {
    { "setCamera", _wrap_IRenderTechnique_setCamera},
    { "getCamera", _wrap_IRenderTechnique_getCamera},
    { "setRenderTarget", _wrap_IRenderTechnique_setRenderTarget},
    { "getRenderTarget", _wrap_IRenderTechnique_getRenderTarget},
    { "setRenderScript", _wrap_IRenderTechnique_setRenderScript},
    { "getRenderScript", _wrap_IRenderTechnique_getRenderScript},
    { "getProgram", _wrap_IRenderTechnique_getProgram},
    {0,0}
};
static swig_lua_method swig_IRenderTechnique_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IRenderTechnique_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IRenderTechnique_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IRenderTechnique_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IRenderTechnique_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IRenderTechnique_Sf_SwigStatic = {
    "IRenderTechnique",
    swig_IRenderTechnique_Sf_SwigStatic_methods,
    swig_IRenderTechnique_Sf_SwigStatic_attributes,
    swig_IRenderTechnique_Sf_SwigStatic_constants,
    swig_IRenderTechnique_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IRenderTechnique_bases[] = {0};
static const char *swig_IRenderTechnique_base_names[] = {0};
static swig_lua_class _wrap_class_IRenderTechnique = { "IRenderTechnique", "IRenderTechnique", &SWIGTYPE_p_open__IRenderTechnique,0, swig_delete_IRenderTechnique, swig_IRenderTechnique_methods, swig_IRenderTechnique_attributes, &swig_IRenderTechnique_Sf_SwigStatic, swig_IRenderTechnique_meta, swig_IRenderTechnique_bases, swig_IRenderTechnique_base_names };

static int _wrap_IMaterial_getRenderStaeSet(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *arg1 = (open::IMaterial *) 0 ;
  open::RenderStateSet *result = 0 ;
  
  SWIG_check_num_args("open::IMaterial::getRenderStaeSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IMaterial::getRenderStaeSet",1,"open::IMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IMaterial,0))){
    SWIG_fail_ptr("IMaterial_getRenderStaeSet",1,SWIGTYPE_p_open__IMaterial);
  }
  
  result = (open::RenderStateSet *) &(arg1)->getRenderStaeSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__RenderStateSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMaterial_getTextureUnitSet(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *arg1 = (open::IMaterial *) 0 ;
  open::ITextureUnitSet *result = 0 ;
  
  SWIG_check_num_args("open::IMaterial::getTextureUnitSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IMaterial::getTextureUnitSet",1,"open::IMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IMaterial,0))){
    SWIG_fail_ptr("IMaterial_getTextureUnitSet",1,SWIGTYPE_p_open__IMaterial);
  }
  
  result = (open::ITextureUnitSet *)(arg1)->getTextureUnitSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITextureUnitSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMaterial_setRenderTechnique(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *arg1 = (open::IMaterial *) 0 ;
  open::IRenderTechnique *arg2 = (open::IRenderTechnique *) 0 ;
  
  SWIG_check_num_args("open::IMaterial::setRenderTechnique",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IMaterial::setRenderTechnique",1,"open::IMaterial *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IMaterial::setRenderTechnique",2,"open::IRenderTechnique *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IMaterial,0))){
    SWIG_fail_ptr("IMaterial_setRenderTechnique",1,SWIGTYPE_p_open__IMaterial);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IRenderTechnique,0))){
    SWIG_fail_ptr("IMaterial_setRenderTechnique",2,SWIGTYPE_p_open__IRenderTechnique);
  }
  
  (arg1)->setRenderTechnique(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMaterial_getRenderTechnique(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *arg1 = (open::IMaterial *) 0 ;
  open::IRenderTechnique *result = 0 ;
  
  SWIG_check_num_args("open::IMaterial::getRenderTechnique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IMaterial::getRenderTechnique",1,"open::IMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IMaterial,0))){
    SWIG_fail_ptr("IMaterial_getRenderTechnique",1,SWIGTYPE_p_open__IMaterial);
  }
  
  result = (open::IRenderTechnique *)(arg1)->getRenderTechnique();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderTechnique,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMaterial_getRenderParameter(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *arg1 = (open::IMaterial *) 0 ;
  char *arg2 = (char *) 0 ;
  open::Value *result = 0 ;
  
  SWIG_check_num_args("open::IMaterial::getRenderParameter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IMaterial::getRenderParameter",1,"open::IMaterial *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::IMaterial::getRenderParameter",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IMaterial,0))){
    SWIG_fail_ptr("IMaterial_getRenderParameter",1,SWIGTYPE_p_open__IMaterial);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (open::Value *) &(arg1)->getRenderParameter((char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__Value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMaterial_clone(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *arg1 = (open::IMaterial *) 0 ;
  open::IMaterial *result = 0 ;
  
  SWIG_check_num_args("open::IMaterial::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IMaterial::clone",1,"open::IMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IMaterial,0))){
    SWIG_fail_ptr("IMaterial_clone",1,SWIGTYPE_p_open__IMaterial);
  }
  
  result = (open::IMaterial *)(arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IMaterial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMaterial_addRef(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *arg1 = (open::IMaterial *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::IMaterial::addRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IMaterial::addRef",1,"open::IMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IMaterial,0))){
    SWIG_fail_ptr("IMaterial_addRef",1,SWIGTYPE_p_open__IMaterial);
  }
  
  result = (int32)(arg1)->addRef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IMaterial_release(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *arg1 = (open::IMaterial *) 0 ;
  int32 result;
  
  SWIG_check_num_args("open::IMaterial::release",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IMaterial::release",1,"open::IMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IMaterial,0))){
    SWIG_fail_ptr("IMaterial_release",1,SWIGTYPE_p_open__IMaterial);
  }
  
  result = (int32)(arg1)->release();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IMaterial(void *obj) {
open::IMaterial *arg1 = (open::IMaterial *) obj;
delete arg1;
}
static swig_lua_attribute swig_IMaterial_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IMaterial_methods[]= {
    { "getRenderStaeSet", _wrap_IMaterial_getRenderStaeSet},
    { "getTextureUnitSet", _wrap_IMaterial_getTextureUnitSet},
    { "setRenderTechnique", _wrap_IMaterial_setRenderTechnique},
    { "getRenderTechnique", _wrap_IMaterial_getRenderTechnique},
    { "getRenderParameter", _wrap_IMaterial_getRenderParameter},
    { "clone", _wrap_IMaterial_clone},
    { "addRef", _wrap_IMaterial_addRef},
    { "release", _wrap_IMaterial_release},
    {0,0}
};
static swig_lua_method swig_IMaterial_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IMaterial_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IMaterial_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IMaterial_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IMaterial_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IMaterial_Sf_SwigStatic = {
    "IMaterial",
    swig_IMaterial_Sf_SwigStatic_methods,
    swig_IMaterial_Sf_SwigStatic_attributes,
    swig_IMaterial_Sf_SwigStatic_constants,
    swig_IMaterial_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IMaterial_bases[] = {0};
static const char *swig_IMaterial_base_names[] = {0};
static swig_lua_class _wrap_class_IMaterial = { "IMaterial", "IMaterial", &SWIGTYPE_p_open__IMaterial,0, swig_delete_IMaterial, swig_IMaterial_methods, swig_IMaterial_attributes, &swig_IMaterial_Sf_SwigStatic, swig_IMaterial_meta, swig_IMaterial_bases, swig_IMaterial_base_names };

static int _wrap_IEngine_setRenderWindow(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  open::IRenderWindow *arg2 = (open::IRenderWindow *) 0 ;
  
  SWIG_check_num_args("open::IEngine::setRenderWindow",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::setRenderWindow",1,"open::IEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IEngine::setRenderWindow",2,"open::IRenderWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_setRenderWindow",1,SWIGTYPE_p_open__IEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__IRenderWindow,0))){
    SWIG_fail_ptr("IEngine_setRenderWindow",2,SWIGTYPE_p_open__IRenderWindow);
  }
  
  (arg1)->setRenderWindow(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEngine_getRenderWindow(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  open::IRenderWindow *result = 0 ;
  
  SWIG_check_num_args("open::IEngine::getRenderWindow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::getRenderWindow",1,"open::IEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_getRenderWindow",1,SWIGTYPE_p_open__IEngine);
  }
  
  result = (open::IRenderWindow *)(arg1)->getRenderWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEngine_getRenderEngine(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  open::IRenderEngine *result = 0 ;
  
  SWIG_check_num_args("open::IEngine::getRenderEngine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::getRenderEngine",1,"open::IEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_getRenderEngine",1,SWIGTYPE_p_open__IEngine);
  }
  
  result = (open::IRenderEngine *)(arg1)->getRenderEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEngine_addFrameListener(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  open::FrameListener *arg2 = (open::FrameListener *) 0 ;
  
  SWIG_check_num_args("open::IEngine::addFrameListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::addFrameListener",1,"open::IEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IEngine::addFrameListener",2,"open::FrameListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_addFrameListener",1,SWIGTYPE_p_open__IEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__FrameListener,0))){
    SWIG_fail_ptr("IEngine_addFrameListener",2,SWIGTYPE_p_open__FrameListener);
  }
  
  (arg1)->addFrameListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEngine_removeFrameListener(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  open::FrameListener *arg2 = (open::FrameListener *) 0 ;
  
  SWIG_check_num_args("open::IEngine::removeFrameListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::removeFrameListener",1,"open::IEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IEngine::removeFrameListener",2,"open::FrameListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_removeFrameListener",1,SWIGTYPE_p_open__IEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__FrameListener,0))){
    SWIG_fail_ptr("IEngine_removeFrameListener",2,SWIGTYPE_p_open__FrameListener);
  }
  
  (arg1)->removeFrameListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEngine_addInputListener(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  open::InputListener *arg2 = (open::InputListener *) 0 ;
  
  SWIG_check_num_args("open::IEngine::addInputListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::addInputListener",1,"open::IEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IEngine::addInputListener",2,"open::InputListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_addInputListener",1,SWIGTYPE_p_open__IEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__InputListener,0))){
    SWIG_fail_ptr("IEngine_addInputListener",2,SWIGTYPE_p_open__InputListener);
  }
  
  (arg1)->addInputListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEngine_removeInputListener(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  open::InputListener *arg2 = (open::InputListener *) 0 ;
  
  SWIG_check_num_args("open::IEngine::removeInputListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::removeInputListener",1,"open::IEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("open::IEngine::removeInputListener",2,"open::InputListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_removeInputListener",1,SWIGTYPE_p_open__IEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__InputListener,0))){
    SWIG_fail_ptr("IEngine_removeInputListener",2,SWIGTYPE_p_open__InputListener);
  }
  
  (arg1)->removeInputListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEngine_frame(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  
  SWIG_check_num_args("open::IEngine::frame",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::frame",1,"open::IEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_frame",1,SWIGTYPE_p_open__IEngine);
  }
  
  (arg1)->frame();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IEngine_run(lua_State* L) {
  int SWIG_arg = 0;
  open::IEngine *arg1 = (open::IEngine *) 0 ;
  
  SWIG_check_num_args("open::IEngine::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::IEngine::run",1,"open::IEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_open__IEngine,0))){
    SWIG_fail_ptr("IEngine_run",1,SWIGTYPE_p_open__IEngine);
  }
  
  (arg1)->run();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IEngine(void *obj) {
open::IEngine *arg1 = (open::IEngine *) obj;
delete arg1;
}
static swig_lua_attribute swig_IEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IEngine_methods[]= {
    { "setRenderWindow", _wrap_IEngine_setRenderWindow},
    { "getRenderWindow", _wrap_IEngine_getRenderWindow},
    { "getRenderEngine", _wrap_IEngine_getRenderEngine},
    { "addFrameListener", _wrap_IEngine_addFrameListener},
    { "removeFrameListener", _wrap_IEngine_removeFrameListener},
    { "addInputListener", _wrap_IEngine_addInputListener},
    { "removeInputListener", _wrap_IEngine_removeInputListener},
    { "frame", _wrap_IEngine_frame},
    { "run", _wrap_IEngine_run},
    {0,0}
};
static swig_lua_method swig_IEngine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IEngine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IEngine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IEngine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IEngine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IEngine_Sf_SwigStatic = {
    "IEngine",
    swig_IEngine_Sf_SwigStatic_methods,
    swig_IEngine_Sf_SwigStatic_attributes,
    swig_IEngine_Sf_SwigStatic_constants,
    swig_IEngine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IEngine_bases[] = {0};
static const char *swig_IEngine_base_names[] = {0};
static swig_lua_class _wrap_class_IEngine = { "IEngine", "IEngine", &SWIGTYPE_p_open__IEngine,0, swig_delete_IEngine, swig_IEngine_methods, swig_IEngine_attributes, &swig_IEngine_Sf_SwigStatic, swig_IEngine_meta, swig_IEngine_bases, swig_IEngine_base_names };

static int _wrap_createGPUBuffer(lua_State* L) {
  int SWIG_arg = 0;
  open::BufferUseType arg1 ;
  open::IGPUBuffer *result = 0 ;
  
  SWIG_check_num_args("open::createGPUBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("open::createGPUBuffer",1,"open::BufferUseType");
  arg1 = (open::BufferUseType)(int)lua_tonumber(L, 1);
  result = (open::IGPUBuffer *)open::createGPUBuffer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IGPUBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createVertexStream(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexStream *result = 0 ;
  
  SWIG_check_num_args("open::createVertexStream",0,0)
  result = (open::IVertexStream *)open::createVertexStream();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IVertexStream,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createVertextArray(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertextArray *result = 0 ;
  
  SWIG_check_num_args("open::createVertextArray",0,0)
  result = (open::IVertextArray *)open::createVertextArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IVertextArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createVertexArrayObject(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexArrayObject *result = 0 ;
  
  SWIG_check_num_args("open::createVertexArrayObject",0,0)
  result = (open::IVertexArrayObject *)open::createVertexArrayObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IVertexArrayObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createVertexIndexObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IVertexIndexObject *result = 0 ;
  
  SWIG_check_num_args("open::createVertexIndexObject",0,0)
  result = (open::IVertexIndexObject *)open::createVertexIndexObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IVertexIndexObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createVertexIndexObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  uint16 *arg1 = (uint16 *) 0 ;
  uint32 arg2 ;
  open::IVertexIndexObject *result = 0 ;
  
  SWIG_check_num_args("open::createVertexIndexObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::createVertexIndexObject",1,"uint16 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::createVertexIndexObject",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("createVertexIndexObject",1,SWIGTYPE_p_unsigned_short);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  result = (open::IVertexIndexObject *)open::createVertexIndexObject(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IVertexIndexObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createVertexIndexObject__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  uint32 *arg1 = (uint32 *) 0 ;
  uint32 arg2 ;
  open::IVertexIndexObject *result = 0 ;
  
  SWIG_check_num_args("open::createVertexIndexObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("open::createVertexIndexObject",1,"uint32 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("open::createVertexIndexObject",2,"uint32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("createVertexIndexObject",1,SWIGTYPE_p_unsigned_int);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint32)lua_tonumber(L, 2);
  result = (open::IVertexIndexObject *)open::createVertexIndexObject(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IVertexIndexObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createVertexIndexObject(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_createVertexIndexObject__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_createVertexIndexObject__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_createVertexIndexObject__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'createVertexIndexObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::createVertexIndexObject()\n"
    "    open::createVertexIndexObject(uint16 *,uint32)\n"
    "    open::createVertexIndexObject(uint32 *,uint32)\n");
  lua_error(L);return 0;
}


static int _wrap_createProgram(lua_State* L) {
  int SWIG_arg = 0;
  open::IProgram *result = 0 ;
  
  SWIG_check_num_args("open::createProgram",0,0)
  result = (open::IProgram *)open::createProgram();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IProgram,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createTexture__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::ITexture *result = 0 ;
  
  SWIG_check_num_args("open::createTexture",0,0)
  result = (open::ITexture *)open::createTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITexture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createTexture__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  open::ITexture *result = 0 ;
  
  SWIG_check_num_args("open::createTexture",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::createTexture",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (open::ITexture *)open::createTexture((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITexture,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createTexture(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_createTexture__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_createTexture__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'createTexture'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::createTexture()\n"
    "    open::createTexture(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_createTextureUnit(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnit *result = 0 ;
  
  SWIG_check_num_args("open::createTextureUnit",0,0)
  result = (open::ITextureUnit *)open::createTextureUnit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITextureUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createTextureUnitSet(lua_State* L) {
  int SWIG_arg = 0;
  open::ITextureUnitSet *result = 0 ;
  
  SWIG_check_num_args("open::createTextureUnitSet",0,0)
  result = (open::ITextureUnitSet *)open::createTextureUnitSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ITextureUnitSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getRenderWindowFactory(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderWindowFactory *result = 0 ;
  
  SWIG_check_num_args("open::getRenderWindowFactory",0,0)
  result = (open::IRenderWindowFactory *)open::getRenderWindowFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderWindowFactory,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createRenderBuffer(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderBuffer *result = 0 ;
  
  SWIG_check_num_args("open::createRenderBuffer",0,0)
  result = (open::IRenderBuffer *)open::createRenderBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createFrameBuffer(lua_State* L) {
  int SWIG_arg = 0;
  open::IFrameBuffer *result = 0 ;
  
  SWIG_check_num_args("open::createFrameBuffer",0,0)
  result = (open::IFrameBuffer *)open::createFrameBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IFrameBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createRenderPool(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderPool *result = 0 ;
  
  SWIG_check_num_args("open::createRenderPool",0,0)
  result = (open::IRenderPool *)open::createRenderPool();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderPool,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createMesh(lua_State* L) {
  int SWIG_arg = 0;
  open::IMesh *result = 0 ;
  
  SWIG_check_num_args("open::createMesh",0,0)
  result = (open::IMesh *)open::createMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IMesh,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createSolidGeometry(lua_State* L) {
  int SWIG_arg = 0;
  open::ISolidGeometry *result = 0 ;
  
  SWIG_check_num_args("open::createSolidGeometry",0,0)
  result = (open::ISolidGeometry *)open::createSolidGeometry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ISolidGeometry,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createDrawable__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  open::IDrawableBase *result = 0 ;
  
  SWIG_check_num_args("open::createDrawable",0,0)
  result = (open::IDrawableBase *)open::createDrawable();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IDrawableBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createDrawable__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  open::Config *arg2 = 0 ;
  open::IDrawable *result = 0 ;
  
  SWIG_check_num_args("open::createDrawable",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::createDrawable",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("open::createDrawable",2,"open::Config const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_open__Config,0))){
    SWIG_fail_ptr("createDrawable",2,SWIGTYPE_p_open__Config);
  }
  
  result = (open::IDrawable *)open::createDrawable((char const *)arg1,(open::Config const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IDrawable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createDrawable(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_createDrawable__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_open__Config, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_createDrawable__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'createDrawable'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::createDrawable()\n"
    "    open::createDrawable(char const *,open::Config const &)\n");
  lua_error(L);return 0;
}


static int _wrap_createMaterial__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  open::IMaterial *result = 0 ;
  
  SWIG_check_num_args("open::createMaterial",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::createMaterial",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (open::IMaterial *)open::createMaterial((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IMaterial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createMaterial__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  open::IMaterial *result = 0 ;
  
  SWIG_check_num_args("open::createMaterial",0,0)
  result = (open::IMaterial *)open::createMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IMaterial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createMaterial(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_createMaterial__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_createMaterial__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'createMaterial'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::createMaterial(char const *)\n"
    "    open::createMaterial()\n");
  lua_error(L);return 0;
}


static int _wrap_getMaterial(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  open::IMaterial *result = 0 ;
  
  SWIG_check_num_args("open::getMaterial",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::getMaterial",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (open::IMaterial *)open::getMaterial((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IMaterial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getOrCreateMaterial__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  open::IMaterial *result = 0 ;
  
  SWIG_check_num_args("open::getOrCreateMaterial",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::getOrCreateMaterial",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("open::getOrCreateMaterial",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (open::IMaterial *)open::getOrCreateMaterial((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IMaterial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getOrCreateMaterial__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  open::IMaterial *result = 0 ;
  
  SWIG_check_num_args("open::getOrCreateMaterial",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("open::getOrCreateMaterial",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (open::IMaterial *)open::getOrCreateMaterial((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IMaterial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_getOrCreateMaterial(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_getOrCreateMaterial__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_getOrCreateMaterial__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getOrCreateMaterial'\n"
    "  Possible C/C++ prototypes are:\n"
    "    open::getOrCreateMaterial(char const *,char const *)\n"
    "    open::getOrCreateMaterial(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_getRenderEngine(lua_State* L) {
  int SWIG_arg = 0;
  open::IRenderEngine *result = 0 ;
  
  SWIG_check_num_args("open::getRenderEngine",0,0)
  result = (open::IRenderEngine *)open::getRenderEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__IRenderEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createCamera(lua_State* L) {
  int SWIG_arg = 0;
  open::ICamera *result = 0 ;
  
  SWIG_check_num_args("open::createCamera",0,0)
  result = (open::ICamera *)open::createCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_open__ICamera,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("WYIN_DEF_H", 1)},
    {SWIG_LUA_CONSTTAB_INT("DOUBLE_PRECISION", 0)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_VISIBLE", open::RENDER_VISIBLE)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_CAST_SHADOW", open::RENDER_CAST_SHADOW)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_RECEIVES_SHADOW", open::RENDER_RECEIVES_SHADOW)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_BUFFER_BIT", open::DEPTH_BUFFER_BIT)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_BUFFER_BIT", open::STENCIL_BUFFER_BIT)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_BUFFER_BIT", open::COLOR_BUFFER_BIT)},
    {SWIG_LUA_CONSTTAB_INT("POINT_LIST", open::POINT_LIST)},
    {SWIG_LUA_CONSTTAB_INT("LINE_LIST", open::LINE_LIST)},
    {SWIG_LUA_CONSTTAB_INT("LINE_STRIP", open::LINE_STRIP)},
    {SWIG_LUA_CONSTTAB_INT("LINE_LOOP", open::LINE_LOOP)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGLE_LIST", open::TRIANGLE_LIST)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGLE_STRIP", open::TRIANGLE_STRIP)},
    {SWIG_LUA_CONSTTAB_INT("TRIANGLE_FAN", open::TRIANGLE_FAN)},
    {SWIG_LUA_CONSTTAB_INT("SHALLOW_CLONE", open::SHALLOW_CLONE)},
    {SWIG_LUA_CONSTTAB_INT("DEEP_CLONE_ALL", open::DEEP_CLONE_ALL)},
    {SWIG_LUA_CONSTTAB_INT("DATATYPE_UNSIGNED_BYTE", open::DATATYPE_UNSIGNED_BYTE)},
    {SWIG_LUA_CONSTTAB_INT("DATATYPE_UNSIGNED_SHORT", open::DATATYPE_UNSIGNED_SHORT)},
    {SWIG_LUA_CONSTTAB_INT("DATATYPE_UNSIGNED_INT", open::DATATYPE_UNSIGNED_INT)},
    {SWIG_LUA_CONSTTAB_INT("DATATYPE_INT", open::DATATYPE_INT)},
    {SWIG_LUA_CONSTTAB_INT("DATATYPE_FLOAT", open::DATATYPE_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_RGB", open::PIXELINTERNALFORMAT_RGB)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_RGBA", open::PIXELINTERNALFORMAT_RGBA)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_RGBA32F", open::PIXELINTERNALFORMAT_RGBA32F)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_RGB32F", open::PIXELINTERNALFORMAT_RGB32F)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_RGBA16F", open::PIXELINTERNALFORMAT_RGBA16F)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_RGB16F", open::PIXELINTERNALFORMAT_RGB16F)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_R8", open::PIXELINTERNALFORMAT_R8)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_R16F", open::PIXELINTERNALFORMAT_R16F)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_R32F", open::PIXELINTERNALFORMAT_R32F)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_DEPTH_COMPONENT32", open::PIXELINTERNALFORMAT_DEPTH_COMPONENT32)},
    {SWIG_LUA_CONSTTAB_INT("PIXELINTERNALFORMAT_DEPTH_STENCIL", open::PIXELINTERNALFORMAT_DEPTH_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_DEPTH_COMPONENT", open::PIXEFORMAT_DEPTH_COMPONENT)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_R", open::PIXEFORMAT_R)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_G", open::PIXEFORMAT_G)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_B", open::PIXEFORMAT_B)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_ALPHA", open::PIXEFORMAT_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_RGB", open::PIXEFORMAT_RGB)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_RGBA", open::PIXEFORMAT_RGBA)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_BGR", open::PIXEFORMAT_BGR)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_BGRA", open::PIXEFORMAT_BGRA)},
    {SWIG_LUA_CONSTTAB_INT("PIXEFORMAT_DEPTH_STENCIL", open::PIXEFORMAT_DEPTH_STENCIL)},
    {SWIG_LUA_CONSTTAB_INT("VERT_USE", open::VERT_USE)},
    {SWIG_LUA_CONSTTAB_INT("INDEX_USE", open::INDEX_USE)},
    {SWIG_LUA_CONSTTAB_INT("INSTANCED_USE", open::INSTANCED_USE)},
    {SWIG_LUA_CONSTTAB_INT("UNIFORM_USE", open::UNIFORM_USE)},
    {SWIG_LUA_CONSTTAB_INT("TEXTURE_USE", open::TEXTURE_USE)},
    {SWIG_LUA_CONSTTAB_INT("PIXEL_PACK_USE", open::PIXEL_PACK_USE)},
    {SWIG_LUA_CONSTTAB_INT("PIXEL_UNPACK_USE", open::PIXEL_UNPACK_USE)},
    {SWIG_LUA_CONSTTAB_INT("OTHER_USE", open::OTHER_USE)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_TEST", open::DEPTH_TEST)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_TEST", open::STENCIL_TEST)},
    {SWIG_LUA_CONSTTAB_INT("BLEND", open::BLEND)},
    {SWIG_LUA_CONSTTAB_INT("CULL_FACE", open::CULL_FACE)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT", open::LIGHT)},
    {SWIG_LUA_CONSTTAB_INT("COLORMASK_R", open::COLORMASK_R)},
    {SWIG_LUA_CONSTTAB_INT("COLORMASK_G", open::COLORMASK_G)},
    {SWIG_LUA_CONSTTAB_INT("COLORMASK_B", open::COLORMASK_B)},
    {SWIG_LUA_CONSTTAB_INT("COLORMASK_A", open::COLORMASK_A)},
    {SWIG_LUA_CONSTTAB_INT("COLORMASK_ALL", open::COLORMASK_ALL)},
    {SWIG_LUA_CONSTTAB_INT("POLYGONMODE_FILL", open::POLYGONMODE_FILL)},
    {SWIG_LUA_CONSTTAB_INT("POLYGONMODE_LINE", open::POLYGONMODE_LINE)},
    {SWIG_LUA_CONSTTAB_INT("POLYGONMODE_POINT", open::POLYGONMODE_POINT)},
    {SWIG_LUA_CONSTTAB_INT("NEVER", open::NEVER)},
    {SWIG_LUA_CONSTTAB_INT("LESS", open::LESS)},
    {SWIG_LUA_CONSTTAB_INT("EQUAL", open::EQUAL)},
    {SWIG_LUA_CONSTTAB_INT("LEQUAL", open::LEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("GREATER", open::GREATER)},
    {SWIG_LUA_CONSTTAB_INT("NOTEQUAL", open::NOTEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("GEQUAL", open::GEQUAL)},
    {SWIG_LUA_CONSTTAB_INT("ALWAYS", open::ALWAYS)},
    {SWIG_LUA_CONSTTAB_INT("STENCILOPERATION_ZERO", open::STENCILOPERATION_ZERO)},
    {SWIG_LUA_CONSTTAB_INT("STENCILOPERATION_KEEP", open::STENCILOPERATION_KEEP)},
    {SWIG_LUA_CONSTTAB_INT("STENCILOPERATION_REPLACE", open::STENCILOPERATION_REPLACE)},
    {SWIG_LUA_CONSTTAB_INT("STENCILOPERATION_INCR", open::STENCILOPERATION_INCR)},
    {SWIG_LUA_CONSTTAB_INT("STENCILOPERATION_DECR", open::STENCILOPERATION_DECR)},
    {SWIG_LUA_CONSTTAB_INT("STENCILOPERATION_INVERT", open::STENCILOPERATION_INVERT)},
    {SWIG_LUA_CONSTTAB_INT("STENCILOPERATION_INCR_WRAP", open::STENCILOPERATION_INCR_WRAP)},
    {SWIG_LUA_CONSTTAB_INT("STENCILOPERATION_DECR_WRAP", open::STENCILOPERATION_DECR_WRAP)},
    {SWIG_LUA_CONSTTAB_INT("FACE_FRONT", open::FACE_FRONT)},
    {SWIG_LUA_CONSTTAB_INT("FACE_BACK", open::FACE_BACK)},
    {SWIG_LUA_CONSTTAB_INT("FACE_FRONT_AND_BACK", open::FACE_FRONT_AND_BACK)},
    {SWIG_LUA_CONSTTAB_INT("FRONTFACE_CW", open::FRONTFACE_CW)},
    {SWIG_LUA_CONSTTAB_INT("FRONTFACE_CCW", open::FRONTFACE_CCW)},
    {SWIG_LUA_CONSTTAB_INT("BLENDEQUATION_ADD", open::BLENDEQUATION_ADD)},
    {SWIG_LUA_CONSTTAB_INT("BLENDEQUATION_MIN", open::BLENDEQUATION_MIN)},
    {SWIG_LUA_CONSTTAB_INT("BLENDEQUATION_MAX", open::BLENDEQUATION_MAX)},
    {SWIG_LUA_CONSTTAB_INT("BLENDEQUATION_SUBTRACT", open::BLENDEQUATION_SUBTRACT)},
    {SWIG_LUA_CONSTTAB_INT("BLENDEQUATION_REVERSE_SUBTRACT", open::BLENDEQUATION_REVERSE_SUBTRACT)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_ZERO", open::BLENDFUN_ZERO)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_ONE", open::BLENDFUN_ONE)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_SRC_COLOR", open::BLENDFUN_SRC_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_ONE_MINUS_SRC_COLOR", open::BLENDFUN_ONE_MINUS_SRC_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_SRC_ALPHA", open::BLENDFUN_SRC_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_ONE_MINUS_SRC_ALPHA", open::BLENDFUN_ONE_MINUS_SRC_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_DST_ALPHA", open::BLENDFUN_DST_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_ONE_MINUS_DST_ALPHA", open::BLENDFUN_ONE_MINUS_DST_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_DST_COLOR", open::BLENDFUN_DST_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_ONE_MINUS_DST_COLOR", open::BLENDFUN_ONE_MINUS_DST_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("BLENDFUN_SRC_ALPHA_SATURATE", open::BLENDFUN_SRC_ALPHA_SATURATE)},
    {SWIG_LUA_CONSTTAB_INT("WRAP_S", open::WRAP_S)},
    {SWIG_LUA_CONSTTAB_INT("WRAP_T", open::WRAP_T)},
    {SWIG_LUA_CONSTTAB_INT("WRAP_R", open::WRAP_R)},
    {SWIG_LUA_CONSTTAB_INT("CLAMP", open::CLAMP)},
    {SWIG_LUA_CONSTTAB_INT("CLAMP_TO_EDGE", open::CLAMP_TO_EDGE)},
    {SWIG_LUA_CONSTTAB_INT("CLAMP_TO_BORDER", open::CLAMP_TO_BORDER)},
    {SWIG_LUA_CONSTTAB_INT("REPEAT", open::REPEAT)},
    {SWIG_LUA_CONSTTAB_INT("MIRROR", open::MIRROR)},
    {SWIG_LUA_CONSTTAB_INT("MIN_FILTER", open::MIN_FILTER)},
    {SWIG_LUA_CONSTTAB_INT("MAG_FILTER", open::MAG_FILTER)},
    {SWIG_LUA_CONSTTAB_INT("LINEAR", open::LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("LINEAR_MIPMAP_LINEAR", open::LINEAR_MIPMAP_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("LINEAR_MIPMAP_NEAREST", open::LINEAR_MIPMAP_NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("NEAREST", open::NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("NEAREST_MIPMAP_LINEAR", open::NEAREST_MIPMAP_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("NEAREST_MIPMAP_NEAREST", open::NEAREST_MIPMAP_NEAREST)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_ATTACHMENT", open::DEPTH_ATTACHMENT)},
    {SWIG_LUA_CONSTTAB_INT("STENCIL_ATTACHMENT", open::STENCIL_ATTACHMENT)},
    {SWIG_LUA_CONSTTAB_INT("DEPTH_STENCIL_ATTACHMENT", open::DEPTH_STENCIL_ATTACHMENT)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT0", open::COLOR_ATTACHMENT0)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT1", open::COLOR_ATTACHMENT1)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT2", open::COLOR_ATTACHMENT2)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT3", open::COLOR_ATTACHMENT3)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT4", open::COLOR_ATTACHMENT4)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT5", open::COLOR_ATTACHMENT5)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT6", open::COLOR_ATTACHMENT6)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT7", open::COLOR_ATTACHMENT7)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT8", open::COLOR_ATTACHMENT8)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT9", open::COLOR_ATTACHMENT9)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT10", open::COLOR_ATTACHMENT10)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT11", open::COLOR_ATTACHMENT11)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT12", open::COLOR_ATTACHMENT12)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT13", open::COLOR_ATTACHMENT13)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT14", open::COLOR_ATTACHMENT14)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTACHMENT15", open::COLOR_ATTACHMENT15)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_POINT", open::LIGHT_POINT)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_DIRECT", open::LIGHT_DIRECT)},
    {SWIG_LUA_CONSTTAB_INT("LIGHT_SPOT", open::LIGHT_SPOT)},
    {SWIG_LUA_CONSTTAB_INT("FRAGMENT_SHADER", open::FRAGMENT_SHADER)},
    {SWIG_LUA_CONSTTAB_INT("VERTEX_SHADER", open::VERTEX_SHADER)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_UNSIGNED_BYTE", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_BYTE)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_UNSIGNED_SHORT", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_SHORT)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_UNSIGNED_INT", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_INT)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_INT", open::IVertexStream::VERXTEXDATATYPE_INT)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_FLOAT", open::IVertexStream::VERXTEXDATATYPE_FLOAT)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_UNSIGNED_INT2", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_INT2)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_UNSIGNED_INT3", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_INT3)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_UNSIGNED_INT4", open::IVertexStream::VERXTEXDATATYPE_UNSIGNED_INT4)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_INT2", open::IVertexStream::VERXTEXDATATYPE_INT2)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_INT3", open::IVertexStream::VERXTEXDATATYPE_INT3)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_INT4", open::IVertexStream::VERXTEXDATATYPE_INT4)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_FLOAT2", open::IVertexStream::VERXTEXDATATYPE_FLOAT2)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_FLOAT3", open::IVertexStream::VERXTEXDATATYPE_FLOAT3)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXTEXDATATYPE_FLOAT4", open::IVertexStream::VERXTEXDATATYPE_FLOAT4)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_POSITOIN", open::IVertexStream::VERXT_POSITOIN)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_NORMAL", open::IVertexStream::VERXT_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_COOR", open::IVertexStream::VERXT_COOR)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_TEXTURECOORD0", open::IVertexStream::VERXT_TEXTURECOORD0)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_TEXTURECOORD1", open::IVertexStream::VERXT_TEXTURECOORD1)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_TEXTURECOORD2", open::IVertexStream::VERXT_TEXTURECOORD2)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_TEXTURECOORD3", open::IVertexStream::VERXT_TEXTURECOORD3)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_INSTANCE0", open::IVertexStream::VERXT_INSTANCE0)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_INSTANCE1", open::IVertexStream::VERXT_INSTANCE1)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_INSTANCE2", open::IVertexStream::VERXT_INSTANCE2)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_INSTANCE3", open::IVertexStream::VERXT_INSTANCE3)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_INSTANCE4", open::IVertexStream::VERXT_INSTANCE4)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_INSTANCE5", open::IVertexStream::VERXT_INSTANCE5)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_INSTANCE6", open::IVertexStream::VERXT_INSTANCE6)},
    {SWIG_LUA_CONSTTAB_INT("IVertexStream_VERXT_INSTANCE7", open::IVertexStream::VERXT_INSTANCE7)},
    {SWIG_LUA_CONSTTAB_INT("RENDER_MATERIALINTERFACE_H", 1)},
    {SWIG_LUA_CONSTTAB_INT("OPEN_LUA_FACTORY_H", 1)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Vec3f_fromRGB", _wrap_Vec3f_fromRGB},
    { "IVertexStream_genVertexType", _wrap_IVertexStream_genVertexType},
    { "createGPUBuffer", _wrap_createGPUBuffer},
    { "createVertexStream", _wrap_createVertexStream},
    { "createVertextArray", _wrap_createVertextArray},
    { "createVertexArrayObject", _wrap_createVertexArrayObject},
    { "createVertexIndexObject", _wrap_createVertexIndexObject},
    { "createProgram", _wrap_createProgram},
    { "createTexture", _wrap_createTexture},
    { "createTextureUnit", _wrap_createTextureUnit},
    { "createTextureUnitSet", _wrap_createTextureUnitSet},
    { "getRenderWindowFactory", _wrap_getRenderWindowFactory},
    { "createRenderBuffer", _wrap_createRenderBuffer},
    { "createFrameBuffer", _wrap_createFrameBuffer},
    { "createRenderPool", _wrap_createRenderPool},
    { "createMesh", _wrap_createMesh},
    { "createSolidGeometry", _wrap_createSolidGeometry},
    { "createDrawable", _wrap_createDrawable},
    { "createMaterial", _wrap_createMaterial},
    { "getMaterial", _wrap_getMaterial},
    { "getOrCreateMaterial", _wrap_getOrCreateMaterial},
    { "getRenderEngine", _wrap_getRenderEngine},
    { "createCamera", _wrap_createCamera},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_Vec2f,
&_wrap_class_Vec3f,
&_wrap_class_Vec4f,
&_wrap_class_Matrixf,
&_wrap_class_IGPUBuffer,
&_wrap_class_IVertexArrayObject,
&_wrap_class_IVertexIndexObject,
&_wrap_class_IVertexStream,
&_wrap_class_IVertextArray,
&_wrap_class_IProgram,
&_wrap_class_Uniform,
&_wrap_class_ITexture,
&_wrap_class_ITextureUnit,
&_wrap_class_ITextureUnitSet,
&_wrap_class_RenderStateSet,
&_wrap_class_IShadowData,
&_wrap_class_ILight,
&_wrap_class_ILightManager,
&_wrap_class_IRenderTarget,
&_wrap_class_WindowTraits,
&_wrap_class_IRenderWindow,
&_wrap_class_IRenderWindowFactory,
&_wrap_class_IRenderBuffer,
&_wrap_class_IFrameBuffer,
&_wrap_class_IRenderPool,
&_wrap_class_GBuffer,
&_wrap_class_Value,
&_wrap_class_PreInstancData,
&_wrap_class_Shader,
&_wrap_class_OutFrag,
&_wrap_class_UniformDetial,
&_wrap_class_RenderScript,
&_wrap_class_IRenderTechnique,
&_wrap_class_IMaterial,
&_wrap_class_IEngine,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "open_lua",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_open__IRenderWindowTo_p_open__IRenderTarget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((open::IRenderTarget *)  ((open::IRenderWindow *) x));
}
static void *_p_open__IFrameBufferTo_p_open__IRenderTarget(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((open::IRenderTarget *)  ((open::IFrameBuffer *) x));
}
static swig_type_info _swigt__p_BeginHandle = {"_p_BeginHandle", "BeginHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EndHandle = {"_p_EndHandle", "EndHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GenInstanceHandle = {"_p_GenInstanceHandle", "GenInstanceHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RMatrix = {"_p_RMatrix", "RMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Real2 = {"_p_Real2", "Real2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Real3 = {"_p_Real3", "Real3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Real4 = {"_p_Real4", "Real4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnifromHandle = {"_p_UnifromHandle", "UnifromHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "open::Matrix< float >::value_type *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__BoundingBoxT_double_t = {"_p_open__BoundingBoxT_double_t", "open::BoundingBoxd *|open::BoundingBox< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__BoundingBoxT_float_t = {"_p_open__BoundingBoxT_float_t", "open::BoundingBox< float > *|open::BoundingBoxf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__Config = {"_p_open__Config", "open::Config *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__DataType = {"_p_open__DataType", "enum open::DataType *|open::DataType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__FrameListener = {"_p_open__FrameListener", "open::FrameListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__GBuffer = {"_p_open__GBuffer", "open::GBuffer *", 0, 0, (void*)&_wrap_class_GBuffer, 0};
static swig_type_info _swigt__p_open__ICamera = {"_p_open__ICamera", "open::ICamera *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__IDrawable = {"_p_open__IDrawable", "open::IDrawable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__IDrawableBase = {"_p_open__IDrawableBase", "open::IDrawableBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__IEngine = {"_p_open__IEngine", "open::IEngine *", 0, 0, (void*)&_wrap_class_IEngine, 0};
static swig_type_info _swigt__p_open__IFrameBuffer = {"_p_open__IFrameBuffer", "open::IFrameBuffer *", 0, 0, (void*)&_wrap_class_IFrameBuffer, 0};
static swig_type_info _swigt__p_open__IGPUBuffer = {"_p_open__IGPUBuffer", "open::IGPUBuffer *", 0, 0, (void*)&_wrap_class_IGPUBuffer, 0};
static swig_type_info _swigt__p_open__IInputQueue = {"_p_open__IInputQueue", "open::IInputQueue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__ILight = {"_p_open__ILight", "open::ILight *", 0, 0, (void*)&_wrap_class_ILight, 0};
static swig_type_info _swigt__p_open__ILightManager = {"_p_open__ILightManager", "open::ILightManager *", 0, 0, (void*)&_wrap_class_ILightManager, 0};
static swig_type_info _swigt__p_open__IMaterial = {"_p_open__IMaterial", "open::IMaterial *", 0, 0, (void*)&_wrap_class_IMaterial, 0};
static swig_type_info _swigt__p_open__IMesh = {"_p_open__IMesh", "open::IMesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__IProgram = {"_p_open__IProgram", "open::IProgram *", 0, 0, (void*)&_wrap_class_IProgram, 0};
static swig_type_info _swigt__p_open__IRenderBuffer = {"_p_open__IRenderBuffer", "open::IRenderBuffer *", 0, 0, (void*)&_wrap_class_IRenderBuffer, 0};
static swig_type_info _swigt__p_open__IRenderEngine = {"_p_open__IRenderEngine", "open::IRenderEngine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__IRenderPool = {"_p_open__IRenderPool", "open::IRenderPool *", 0, 0, (void*)&_wrap_class_IRenderPool, 0};
static swig_type_info _swigt__p_open__IRenderTarget = {"_p_open__IRenderTarget", "open::IRenderTarget *", 0, 0, (void*)&_wrap_class_IRenderTarget, 0};
static swig_type_info _swigt__p_open__IRenderTechnique = {"_p_open__IRenderTechnique", "open::IRenderTechnique *", 0, 0, (void*)&_wrap_class_IRenderTechnique, 0};
static swig_type_info _swigt__p_open__IRenderWindow = {"_p_open__IRenderWindow", "open::IRenderWindow *", 0, 0, (void*)&_wrap_class_IRenderWindow, 0};
static swig_type_info _swigt__p_open__IRenderWindowFactory = {"_p_open__IRenderWindowFactory", "open::IRenderWindowFactory *", 0, 0, (void*)&_wrap_class_IRenderWindowFactory, 0};
static swig_type_info _swigt__p_open__IShadowData = {"_p_open__IShadowData", "open::IShadowData *", 0, 0, (void*)&_wrap_class_IShadowData, 0};
static swig_type_info _swigt__p_open__ISolidGeometry = {"_p_open__ISolidGeometry", "open::ISolidGeometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__ITexture = {"_p_open__ITexture", "open::ITexture *", 0, 0, (void*)&_wrap_class_ITexture, 0};
static swig_type_info _swigt__p_open__ITextureUnit = {"_p_open__ITextureUnit", "open::ITextureUnit *", 0, 0, (void*)&_wrap_class_ITextureUnit, 0};
static swig_type_info _swigt__p_open__ITextureUnitSet = {"_p_open__ITextureUnitSet", "open::ITextureUnitSet *", 0, 0, (void*)&_wrap_class_ITextureUnitSet, 0};
static swig_type_info _swigt__p_open__IVertexArrayObject = {"_p_open__IVertexArrayObject", "open::IVertexArrayObject *", 0, 0, (void*)&_wrap_class_IVertexArrayObject, 0};
static swig_type_info _swigt__p_open__IVertexIndexObject = {"_p_open__IVertexIndexObject", "open::IVertexIndexObject *", 0, 0, (void*)&_wrap_class_IVertexIndexObject, 0};
static swig_type_info _swigt__p_open__IVertexStream = {"_p_open__IVertexStream", "open::IVertexStream *", 0, 0, (void*)&_wrap_class_IVertexStream, 0};
static swig_type_info _swigt__p_open__IVertextArray = {"_p_open__IVertextArray", "open::IVertextArray *", 0, 0, (void*)&_wrap_class_IVertextArray, 0};
static swig_type_info _swigt__p_open__InputListener = {"_p_open__InputListener", "open::InputListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__MatrixT_double_t = {"_p_open__MatrixT_double_t", "open::Matrixd *|open::Matrix< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__MatrixT_float_t = {"_p_open__MatrixT_float_t", "open::Matrix< float > *|open::Matrixf *", 0, 0, (void*)&_wrap_class_Matrixf, 0};
static swig_type_info _swigt__p_open__OutFrag = {"_p_open__OutFrag", "open::OutFrag *", 0, 0, (void*)&_wrap_class_OutFrag, 0};
static swig_type_info _swigt__p_open__PlaneT_double_t = {"_p_open__PlaneT_double_t", "open::Planed *|open::Plane< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__PlaneT_float_t = {"_p_open__PlaneT_float_t", "open::Plane< float > *|open::Planef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__PreInstancData = {"_p_open__PreInstancData", "open::PreInstancData *", 0, 0, (void*)&_wrap_class_PreInstancData, 0};
static swig_type_info _swigt__p_open__QuatT_double_t = {"_p_open__QuatT_double_t", "open::Quat< double > *|open::Quatd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__QuatT_float_t = {"_p_open__QuatT_float_t", "open::Quat< float > *|open::Quatf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__RayT_double_t = {"_p_open__RayT_double_t", "open::Rayd *|open::Ray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__RayT_float_t = {"_p_open__RayT_float_t", "open::Ray< float > *|open::Rayf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__RenderScript = {"_p_open__RenderScript", "open::RenderScript *", 0, 0, (void*)&_wrap_class_RenderScript, 0};
static swig_type_info _swigt__p_open__RenderStateSet = {"_p_open__RenderStateSet", "open::RenderStateSet *", 0, 0, (void*)&_wrap_class_RenderStateSet, 0};
static swig_type_info _swigt__p_open__Shader = {"_p_open__Shader", "open::Shader *", 0, 0, (void*)&_wrap_class_Shader, 0};
static swig_type_info _swigt__p_open__Uniform = {"_p_open__Uniform", "open::Uniform *", 0, 0, (void*)&_wrap_class_Uniform, 0};
static swig_type_info _swigt__p_open__UniformDetial = {"_p_open__UniformDetial", "open::UniformDetial *", 0, 0, (void*)&_wrap_class_UniformDetial, 0};
static swig_type_info _swigt__p_open__Value = {"_p_open__Value", "open::Value *", 0, 0, (void*)&_wrap_class_Value, 0};
static swig_type_info _swigt__p_open__Vec2T_double_t = {"_p_open__Vec2T_double_t", "open::Vec2d *|open::Vec2< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__Vec2T_float_t = {"_p_open__Vec2T_float_t", "open::Vec2< float > *|open::Vec2f *", 0, 0, (void*)&_wrap_class_Vec2f, 0};
static swig_type_info _swigt__p_open__Vec3T_double_t = {"_p_open__Vec3T_double_t", "open::Vec3d *|open::Vec3< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__Vec3T_float_t = {"_p_open__Vec3T_float_t", "open::Vec3< float > *|open::Vec3f *", 0, 0, (void*)&_wrap_class_Vec3f, 0};
static swig_type_info _swigt__p_open__Vec4T_double_t = {"_p_open__Vec4T_double_t", "open::Vec4d *|open::Vec4< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_open__Vec4T_float_t = {"_p_open__Vec4T_float_t", "open::Vec4f *|open::Vec4< float > *", 0, 0, (void*)&_wrap_class_Vec4f, 0};
static swig_type_info _swigt__p_open__WindowTraits = {"_p_open__WindowTraits", "open::WindowTraits *", 0, 0, (void*)&_wrap_class_WindowTraits, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t = {"_p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t", "open::RenderScript::GenInstanceHandle *|std::function< void (open::IRenderPool *,open::IVertexStream *,open::PreInstancData const *,int) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fvoid_pF_t = {"_p_std__functionT_void_fvoid_pF_t", "std::function< void (void *) > *|open::RenderScript::EndHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t = {"_p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t", "std::function< void (void *,open::IMaterial *,open::IRenderPool *,open::Value &) > *|open::UniformDetial::UnifromHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_void_pfvoidF_t = {"_p_std__functionT_void_pfvoidF_t", "std::function< void *(void) > *|open::RenderScript::BeginHandle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32 *|unsigned int *|Handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BeginHandle,
  &_swigt__p_EndHandle,
  &_swigt__p_GenInstanceHandle,
  &_swigt__p_RMatrix,
  &_swigt__p_Real2,
  &_swigt__p_Real3,
  &_swigt__p_Real4,
  &_swigt__p_UnifromHandle,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_open__BoundingBoxT_double_t,
  &_swigt__p_open__BoundingBoxT_float_t,
  &_swigt__p_open__Config,
  &_swigt__p_open__DataType,
  &_swigt__p_open__FrameListener,
  &_swigt__p_open__GBuffer,
  &_swigt__p_open__ICamera,
  &_swigt__p_open__IDrawable,
  &_swigt__p_open__IDrawableBase,
  &_swigt__p_open__IEngine,
  &_swigt__p_open__IFrameBuffer,
  &_swigt__p_open__IGPUBuffer,
  &_swigt__p_open__IInputQueue,
  &_swigt__p_open__ILight,
  &_swigt__p_open__ILightManager,
  &_swigt__p_open__IMaterial,
  &_swigt__p_open__IMesh,
  &_swigt__p_open__IProgram,
  &_swigt__p_open__IRenderBuffer,
  &_swigt__p_open__IRenderEngine,
  &_swigt__p_open__IRenderPool,
  &_swigt__p_open__IRenderTarget,
  &_swigt__p_open__IRenderTechnique,
  &_swigt__p_open__IRenderWindow,
  &_swigt__p_open__IRenderWindowFactory,
  &_swigt__p_open__IShadowData,
  &_swigt__p_open__ISolidGeometry,
  &_swigt__p_open__ITexture,
  &_swigt__p_open__ITextureUnit,
  &_swigt__p_open__ITextureUnitSet,
  &_swigt__p_open__IVertexArrayObject,
  &_swigt__p_open__IVertexIndexObject,
  &_swigt__p_open__IVertexStream,
  &_swigt__p_open__IVertextArray,
  &_swigt__p_open__InputListener,
  &_swigt__p_open__MatrixT_double_t,
  &_swigt__p_open__MatrixT_float_t,
  &_swigt__p_open__OutFrag,
  &_swigt__p_open__PlaneT_double_t,
  &_swigt__p_open__PlaneT_float_t,
  &_swigt__p_open__PreInstancData,
  &_swigt__p_open__QuatT_double_t,
  &_swigt__p_open__QuatT_float_t,
  &_swigt__p_open__RayT_double_t,
  &_swigt__p_open__RayT_float_t,
  &_swigt__p_open__RenderScript,
  &_swigt__p_open__RenderStateSet,
  &_swigt__p_open__Shader,
  &_swigt__p_open__Uniform,
  &_swigt__p_open__UniformDetial,
  &_swigt__p_open__Value,
  &_swigt__p_open__Vec2T_double_t,
  &_swigt__p_open__Vec2T_float_t,
  &_swigt__p_open__Vec3T_double_t,
  &_swigt__p_open__Vec3T_float_t,
  &_swigt__p_open__Vec4T_double_t,
  &_swigt__p_open__Vec4T_float_t,
  &_swigt__p_open__WindowTraits,
  &_swigt__p_short,
  &_swigt__p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t,
  &_swigt__p_std__functionT_void_fvoid_pF_t,
  &_swigt__p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t,
  &_swigt__p_std__functionT_void_pfvoidF_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_BeginHandle[] = {  {&_swigt__p_BeginHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EndHandle[] = {  {&_swigt__p_EndHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GenInstanceHandle[] = {  {&_swigt__p_GenInstanceHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RMatrix[] = {  {&_swigt__p_RMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Real2[] = {  {&_swigt__p_Real2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Real3[] = {  {&_swigt__p_Real3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Real4[] = {  {&_swigt__p_Real4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnifromHandle[] = {  {&_swigt__p_UnifromHandle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__BoundingBoxT_double_t[] = {  {&_swigt__p_open__BoundingBoxT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__BoundingBoxT_float_t[] = {  {&_swigt__p_open__BoundingBoxT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Config[] = {  {&_swigt__p_open__Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__DataType[] = {  {&_swigt__p_open__DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__FrameListener[] = {  {&_swigt__p_open__FrameListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__GBuffer[] = {  {&_swigt__p_open__GBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__ICamera[] = {  {&_swigt__p_open__ICamera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IDrawable[] = {  {&_swigt__p_open__IDrawable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IDrawableBase[] = {  {&_swigt__p_open__IDrawableBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IEngine[] = {  {&_swigt__p_open__IEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IFrameBuffer[] = {  {&_swigt__p_open__IFrameBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IGPUBuffer[] = {  {&_swigt__p_open__IGPUBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IInputQueue[] = {  {&_swigt__p_open__IInputQueue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__ILight[] = {  {&_swigt__p_open__ILight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__ILightManager[] = {  {&_swigt__p_open__ILightManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IMaterial[] = {  {&_swigt__p_open__IMaterial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IMesh[] = {  {&_swigt__p_open__IMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IProgram[] = {  {&_swigt__p_open__IProgram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IRenderBuffer[] = {  {&_swigt__p_open__IRenderBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IRenderEngine[] = {  {&_swigt__p_open__IRenderEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IRenderPool[] = {  {&_swigt__p_open__IRenderPool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IRenderTarget[] = {  {&_swigt__p_open__IRenderTarget, 0, 0, 0},  {&_swigt__p_open__IRenderWindow, _p_open__IRenderWindowTo_p_open__IRenderTarget, 0, 0},  {&_swigt__p_open__IFrameBuffer, _p_open__IFrameBufferTo_p_open__IRenderTarget, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IRenderTechnique[] = {  {&_swigt__p_open__IRenderTechnique, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IRenderWindow[] = {  {&_swigt__p_open__IRenderWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IRenderWindowFactory[] = {  {&_swigt__p_open__IRenderWindowFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IShadowData[] = {  {&_swigt__p_open__IShadowData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__ISolidGeometry[] = {  {&_swigt__p_open__ISolidGeometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__ITexture[] = {  {&_swigt__p_open__ITexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__ITextureUnit[] = {  {&_swigt__p_open__ITextureUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__ITextureUnitSet[] = {  {&_swigt__p_open__ITextureUnitSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IVertexArrayObject[] = {  {&_swigt__p_open__IVertexArrayObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IVertexIndexObject[] = {  {&_swigt__p_open__IVertexIndexObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IVertexStream[] = {  {&_swigt__p_open__IVertexStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__IVertextArray[] = {  {&_swigt__p_open__IVertextArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__InputListener[] = {  {&_swigt__p_open__InputListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__MatrixT_double_t[] = {  {&_swigt__p_open__MatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__MatrixT_float_t[] = {  {&_swigt__p_open__MatrixT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__OutFrag[] = {  {&_swigt__p_open__OutFrag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__PlaneT_double_t[] = {  {&_swigt__p_open__PlaneT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__PlaneT_float_t[] = {  {&_swigt__p_open__PlaneT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__PreInstancData[] = {  {&_swigt__p_open__PreInstancData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__QuatT_double_t[] = {  {&_swigt__p_open__QuatT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__QuatT_float_t[] = {  {&_swigt__p_open__QuatT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__RayT_double_t[] = {  {&_swigt__p_open__RayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__RayT_float_t[] = {  {&_swigt__p_open__RayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__RenderScript[] = {  {&_swigt__p_open__RenderScript, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__RenderStateSet[] = {  {&_swigt__p_open__RenderStateSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Shader[] = {  {&_swigt__p_open__Shader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Uniform[] = {  {&_swigt__p_open__Uniform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__UniformDetial[] = {  {&_swigt__p_open__UniformDetial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Value[] = {  {&_swigt__p_open__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Vec2T_double_t[] = {  {&_swigt__p_open__Vec2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Vec2T_float_t[] = {  {&_swigt__p_open__Vec2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Vec3T_double_t[] = {  {&_swigt__p_open__Vec3T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Vec3T_float_t[] = {  {&_swigt__p_open__Vec3T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Vec4T_double_t[] = {  {&_swigt__p_open__Vec4T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__Vec4T_float_t[] = {  {&_swigt__p_open__Vec4T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_open__WindowTraits[] = {  {&_swigt__p_open__WindowTraits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t[] = {  {&_swigt__p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fvoid_pF_t[] = {  {&_swigt__p_std__functionT_void_fvoid_pF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t[] = {  {&_swigt__p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_void_pfvoidF_t[] = {  {&_swigt__p_std__functionT_void_pfvoidF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BeginHandle,
  _swigc__p_EndHandle,
  _swigc__p_GenInstanceHandle,
  _swigc__p_RMatrix,
  _swigc__p_Real2,
  _swigc__p_Real3,
  _swigc__p_Real4,
  _swigc__p_UnifromHandle,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_open__BoundingBoxT_double_t,
  _swigc__p_open__BoundingBoxT_float_t,
  _swigc__p_open__Config,
  _swigc__p_open__DataType,
  _swigc__p_open__FrameListener,
  _swigc__p_open__GBuffer,
  _swigc__p_open__ICamera,
  _swigc__p_open__IDrawable,
  _swigc__p_open__IDrawableBase,
  _swigc__p_open__IEngine,
  _swigc__p_open__IFrameBuffer,
  _swigc__p_open__IGPUBuffer,
  _swigc__p_open__IInputQueue,
  _swigc__p_open__ILight,
  _swigc__p_open__ILightManager,
  _swigc__p_open__IMaterial,
  _swigc__p_open__IMesh,
  _swigc__p_open__IProgram,
  _swigc__p_open__IRenderBuffer,
  _swigc__p_open__IRenderEngine,
  _swigc__p_open__IRenderPool,
  _swigc__p_open__IRenderTarget,
  _swigc__p_open__IRenderTechnique,
  _swigc__p_open__IRenderWindow,
  _swigc__p_open__IRenderWindowFactory,
  _swigc__p_open__IShadowData,
  _swigc__p_open__ISolidGeometry,
  _swigc__p_open__ITexture,
  _swigc__p_open__ITextureUnit,
  _swigc__p_open__ITextureUnitSet,
  _swigc__p_open__IVertexArrayObject,
  _swigc__p_open__IVertexIndexObject,
  _swigc__p_open__IVertexStream,
  _swigc__p_open__IVertextArray,
  _swigc__p_open__InputListener,
  _swigc__p_open__MatrixT_double_t,
  _swigc__p_open__MatrixT_float_t,
  _swigc__p_open__OutFrag,
  _swigc__p_open__PlaneT_double_t,
  _swigc__p_open__PlaneT_float_t,
  _swigc__p_open__PreInstancData,
  _swigc__p_open__QuatT_double_t,
  _swigc__p_open__QuatT_float_t,
  _swigc__p_open__RayT_double_t,
  _swigc__p_open__RayT_float_t,
  _swigc__p_open__RenderScript,
  _swigc__p_open__RenderStateSet,
  _swigc__p_open__Shader,
  _swigc__p_open__Uniform,
  _swigc__p_open__UniformDetial,
  _swigc__p_open__Value,
  _swigc__p_open__Vec2T_double_t,
  _swigc__p_open__Vec2T_float_t,
  _swigc__p_open__Vec3T_double_t,
  _swigc__p_open__Vec3T_float_t,
  _swigc__p_open__Vec4T_double_t,
  _swigc__p_open__Vec4T_float_t,
  _swigc__p_open__WindowTraits,
  _swigc__p_short,
  _swigc__p_std__functionT_void_fopen__IRenderPool_p_open__IVertexStream_p_open__PreInstancData_const_p_intF_t,
  _swigc__p_std__functionT_void_fvoid_pF_t,
  _swigc__p_std__functionT_void_fvoid_p_open__IMaterial_p_open__IRenderPool_p_open__Value_RF_t,
  _swigc__p_std__functionT_void_pfvoidF_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

